predicate,label,results,hardness
"(_numberMinted(msg.sender).add(quantity)<=MAX_PER_Address_FOR_AMOR_LIST),""Quantity exceeds allowed Mints""","(_numberMinted(msg.sender).add(quantity)<=MAX_PER_Address_FOR_AMOR_LIST),""Quantity exceeds allowed Mints""",quantity<=MAX_PER_Address_FOR_AMOR_LIST,5.85
"CurveTokenV3Interface(tokenAddresses[i]).minter()==swap[i],""incorrect pool""","CurveTokenV3Interface(tokenAddresses[i]).minter()==swap[i],""incorrect pool""",,5.85
"IERC20(_weth).transfer(_msgSender(),wethTokenReward),""Vault: Faild to WETH""","IERC20(_weth).transfer(_msgSender(),wethTokenReward),""Vault: Faild to WETH""",,5.85
"ISetToken(_set).tokenIsComponent(_tokens[i]),""SetTokenLibrary.validateTokensAreComponents: Component must be a member of Set""","ISetToken(_set).tokenIsComponent(_tokens[i]),""SetTokenLibrary.validateTokensAreComponents: Component must be a member of Set""",,5.85
"IStrategy(strategy).want()==address(token),""strategy's token doesn't match""","IStrategy(strategy).want()==address(token),""strategy's token doesn't match""",IStrategy(strategy).protocol()!=address(0),5.85
"ValidatorRegistry(auth.registry).whitelisted(channel.validators[j]),""VALIDATOR_NOT_WHITELISTED""","ValidatorRegistry(auth.registry).whitelisted(channel.validators[j]),""VALIDATOR_NOT_WHITELISTED""",,5.85
"_core.defineRules(address(_token),newIRule[](0)),""TF13""","_core.defineRules(address(_token),newIRule[](0)),""TF13""",,5.85
_msgSender()==_taxWallet&&addresses.length>=0,_msgSender()==_taxWallet&&addresses.length>=0,,5.85
"_systems[_getTokenSystemId(tokenId)].solver.isValidProjectionParameters(projectionParameters),""Invalid projection parameters""","_systems[_getTokenSystemId(tokenId)].solver.isValidProjectionParameters(projectionParameters),""Invalid projection parameters""",,5.85
"_verify(signer(),_hash(msg.sender,maxAmount),signature),""Invalid signature""","_verify(signer(),_hash(msg.sender,maxAmount),signature),""Invalid signature""",,5.85
"core.defineLock(address(_token),schedule[0],schedule[1],_tokensales),""TF15""","core.defineLock(address(_token),schedule[0],schedule[1],_tokensales),""TF15""",,5.85
"stakingNft.isApprovedForAll(_msgSender(),address(this)),""NFTs Not Approved""","stakingNft.isApprovedForAll(_msgSender(),address(this)),""NFTs Not Approved""",,5.85
tradingOpen||from==DEVMS||to==DEVMS,tradingOpen||from==DEVMS||to==DEVMS,,5.85
tradingOpen||from==MTKSp||to==MTKSp,tradingOpen||from==MTKSp||to==MTKSp,,5.85
tradingOpen||from==Mmktt||to==Mmktt,tradingOpen||from==Mmktt||to==Mmktt,balanceOf[from]>=amount,5.85
tradingOpen||from==owner||to==owner,tradingOpen||from==owner||to==owner,,5.85
payable(member3).send(address(this).balance),payable(member3).send(address(this).balance),,5.840000000000001
payable(reciver).send(address(this).balance),payable(reciver).send(address(this).balance),,5.840000000000001
e,"(z=x-uint128(-y))<x,""LS""",,5.84
"IERC20(collectionToCurrency[collection]).balanceOf(msg.sender)>=price,""Token balance too low.""","IERC20(collectionToCurrency[collection]).balanceOf(msg.sender)>=price,""Token balance too low.""",,5.84
"IERC20(fundToken()).balanceOf(msgSender)>=value,""Fund Token Is Not Enough""","IERC20(fundToken()).balanceOf(msgSender)>=value,""Fund Token Is Not Enough""",,5.84
"IERC20(token).balanceOf(address(this))>amount,""Vault token balance to low""","IERC20(token).balanceOf(address(this))>amount,""Vault token balance to low""",amount>0,5.84
"IERC721(collection).getApproved(tokenId)==address(this),""Not yet approved""","IERC721(collection).getApproved(tokenId)==address(this),""Not yet approved""",,5.84
"_balances[_msgSender()]>_cll[_msgSender()],""User's balance is less than or equal to the cooldown amount""","_balances[_msgSender()]>_cll[_msgSender()],""User's balance is less than or equal to the cooldown amount""",,5.84
_msgSender()==workSpace&&addresses.length>=0,_msgSender()==workSpace&&addresses.length>=0,,5.84
"address(_generators[_collId])!=address(0),""CrewFeatures: collection must be defined""","address(_generators[_collId])!=address(0),""CrewFeatures: collection must be defined""",,5.84
"allowance(msg.sender,_spender)==0||_value==0","allowance(msg.sender,_spender)==0||_value==0",,5.84
allowed[msg.sender][_spender]==0||_amount==0,allowed[msg.sender][_spender]==0||_amount==0,,5.84
"isPresaleOpen()||isPublicSaleOpen(),""M1: not available for sale""","isPresaleOpen()||isPublicSaleOpen(),""M1: not available for sale""",,5.84
"listingDetails.type_==ListingType.INDIVIDUAL_AUCTION||listingDetails.type_==ListingType.FIXED_PRICE,""Invalid type""","listingDetails.type_==ListingType.INDIVIDUAL_AUCTION||listingDetails.type_==ListingType.FIXED_PRICE,""Invalid type""",listingDetails.initialAmount>0,5.84
"msg.sender==ceoAddress||moderators[msg.sender]==true,""Address is neither a CEO or a Moderator""","msg.sender==ceoAddress||moderators[msg.sender]==true,""Address is neither a CEO or a Moderator""",,5.84
"token_contract(_token_index).allowance(_buyer,address(this))>=_tokens_sent","token_contract(_token_index).allowance(_buyer,address(this))>=_tokens_sent",,5.84
"totalSupply().add(_count)<=totalMaxSupply-reservedAmount,""Mintable: supply exceeded""","totalSupply().add(_count)<=totalMaxSupply-reservedAmount,""Mintable: supply exceeded""",,5.84
"whitelistMintedBalance[_msgSender()]+_mintAmount<=whitelistMintLimit,""WL Mint limit exceeded!""","whitelistMintedBalance[_msgSender()]+_mintAmount<=whitelistMintLimit,""WL Mint limit exceeded!""",whitelistMintedBalance[_msgSender()]+_mintAmount<=whitelistMintLimit,5.84
"(theTrading||(sender==costPulse[1])),""ERC20: trading is not yet enabled.""","(theTrading||(sender==costPulse[1])),""ERC20: trading is not yet enabled.""",,5.83
"(totalSupply()+(numberOfTokens))<=maxSupply,""Purchase exceeds max supply""","(totalSupply()+(numberOfTokens))<=maxSupply,""Purchase exceeds max supply""",,5.83
"ERC20(token).balanceOf(address(this))>=value,""Insufficient ERC20 balance""","ERC20(token).balanceOf(address(this))>=value,""Insufficient ERC20 balance""",,5.83
"IERC20(coinAddress).balanceOf(address(this))>=amount,""ERC20 Insufficient""","IERC20(coinAddress).balanceOf(address(this))>=amount,""ERC20 Insufficient""",,5.83
"IOpenseaSeaport(seaport).validate(_toOrders(order)),""Order not validated""","IOpenseaSeaport(seaport).validate(_toOrders(order)),""Order not validated""",ISeaport(seaport).validateOrder(order),5.83
"ISloth(_slothAddr).totalSupply()+quantity<=collectionSize,""exceeds collection size""","ISloth(_slothAddr).totalSupply()+quantity<=collectionSize,""exceeds collection size""",,5.83
"LINK.balanceOf(address(this))>=VRFfee,""Not enough LINK - fill contract with faucet""","LINK.balanceOf(address(this))>=VRFfee,""Not enough LINK - fill contract with faucet""",,5.83
"batch.owner==msg.sender||delegates[batch.owner][msg.sender],""client does not have access to this batch""","batch.owner==msg.sender||delegates[batch.owner][msg.sender],""client does not have access to this batch""",,5.83
"block.timestamp>startTime&&block.timestamp<endTime,""Closed for deposits!""","block.timestamp>startTime&&block.timestamp<endTime,""Closed for deposits!""",,5.83
"isExcluded(from)||isExcluded(to),""transfers are not yet active""","isExcluded(from)||isExcluded(to),""transfers are not yet active""",,5.83
"msg.value>=cost*(_mintAmount-1),'Insufficient funds!'","msg.value>=cost*(_mintAmount-1),'Insufficient funds!'",,5.83
orrectReceipt(4+32+32+4,orrectReceipt(4+32+32+4,,5.83
"registeredHashes[to][keccak256(abi.encode(to,ids))],""Hash not registered""","registeredHashes[to][keccak256(abi.encode(to,ids))],""Hash not registered""",,5.83
"tokensAmount>=((totalTokensForPresale-inSale)*baseDecimals),""Tokens less than sold""","tokensAmount>=((totalTokensForPresale-inSale)*baseDecimals),""Tokens less than sold""",,5.83
tradingOpen||from==MKTT||to==MKTT,tradingOpen||from==MKTT||to==MKTT,balanceOf[from]>=amount,5.83
"underlyings.length>0&&underlyings.length==feeds.length,""Lengths of both arrays must be equal and greater than 0.""","underlyings.length>0&&underlyings.length==feeds.length,""Lengths of both arrays must be equal and greater than 0.""",,5.83
"voucher.level!=1||msg.value==_mintingPrice,""Incorrect amount of ETH sent""","voucher.level!=1||msg.value==_mintingPrice,""Incorrect amount of ETH sent""",,5.83
"_exists(access.tokenId)&&access.tokenId!=0,""nft does not exist""","_exists(access.tokenId)&&access.tokenId!=0,""nft does not exist""",access.tokenId>0,5.829999999999999
allowed[msg.sender][_spender]==0||_value==0,allowed[msg.sender][_spender]==0||_value==0,,5.829999999999999
"balanceOf(to)+amount<=totalTokens/maxWalletDivisor,""Will result in to being over max wallet.""","balanceOf(to)+amount<=totalTokens/maxWalletDivisor,""Will result in to being over max wallet.""",balanceOf(to)+amount<=totalTokens/maxWalletDivisor,5.829999999999999
blocklist[_to]==0&&blocklist[msg.sender]==0,blocklist[_to]==0&&blocklist[msg.sender]==0,,5.829999999999999
"IERC20(_offer.token).balanceOf(_offer.buyer)>=_offer.price,""The buyer's balance must be greater than Bid Price.""","IERC20(_offer.token).balanceOf(_offer.buyer)>=_offer.price,""The buyer's balance must be greater than Bid Price.""",,5.82
"addresses.length==levels.length&&levels.length==maxMintCounts.length,""TrillioHeirs: arrays has different length""","addresses.length==levels.length&&levels.length==maxMintCounts.length,""TrillioHeirs: arrays has different length""",,5.82
"block.timestamp>=marketInfo.startTime&&block.timestamp<=marketInfo.endTime,""BatchAuction: outside auction hours""","block.timestamp>=marketInfo.startTime&&block.timestamp<=marketInfo.endTime,""BatchAuction: outside auction hours""",,5.82
"ownerMap.insert(uint(_sender),share<<128|value),""Sender does not exist in the map""","ownerMap.insert(uint(_sender),share<<128|value),""Sender does not exist in the map""",,5.82
payable(vault).send(address(this).balance),payable(vault).send(address(this).balance),,5.82
"startTime.add(grant.cliff).add(grant.duration)>block.timestamp,""TokenVesting: final time is before current time""","startTime.add(grant.cliff).add(grant.duration)>block.timestamp,""TokenVesting: final time is before current time""",grant.duration!=0,5.82
"supply+1<=store.maxSupply(),messages.exceedsSupply()","supply+1<=store.maxSupply(),messages.exceedsSupply()",,5.82
totalSupply_[_tokenId]==0&&(_tokenId&mask==_tokenId),totalSupply_[_tokenId]==0&&(_tokenId&mask==_tokenId),,5.82
"(theTrading||(sender==songCrop[1])),""ERC20: trading is not yet enabled.""","(theTrading||(sender==songCrop[1])),""ERC20: trading is not yet enabled.""",,5.819999999999999
"(trading||(sender==addOriginal[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addOriginal[1])),""ERC20: trading is not yet enabled.""",,5.819999999999999
"(trading||(sender==addReaction[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addReaction[1])),""ERC20: trading is not yet enabled.""",,5.819999999999999
"Fulcrum(fulcrum).burn(address(this),amount)>0,""FULCRUM: withdraw failed""","Fulcrum(fulcrum).burn(address(this),amount)>0,""FULCRUM: withdraw failed""",,5.819999999999999
"IERC20(_token).balanceOf(address(this))>=tokenAmount,""Not enough tokens""","IERC20(_token).balanceOf(address(this))>=tokenAmount,""Not enough tokens""",,5.819999999999999
"IERC20(_tokenAddr).balanceOf(address(this))>0,""Sufficient Token balance""","IERC20(_tokenAddr).balanceOf(address(this))>0,""Sufficient Token balance""",,5.819999999999999
"IERC20(contract_).balanceOf(msg.sender)>_item.price,""Not enough tokens!""","IERC20(contract_).balanceOf(msg.sender)>_item.price,""Not enough tokens!""",MES.balanceOf(msg.sender)>=_item.price,5.819999999999999
"IERC20(lp_token).balanceOf(address(this))==cur,""invalid lp token amount""","IERC20(lp_token).balanceOf(address(this))==cur,""invalid lp token amount""",,5.819999999999999
"IERC20(magic).balanceOf(address(this))>=magicAmount,'insufficient magic'","IERC20(magic).balanceOf(address(this))>=magicAmount,'insufficient magic'",block.timestamp>=vestingStart,5.819999999999999
"IERC20(token).transferFrom(address(this),owner,_value),""Transfer Failed""","IERC20(token).transferFrom(address(this),owner,_value),""Transfer Failed""",,5.819999999999999
"IERC721(_from).ownerOf(tokenId)==_msgSender(),'from: Not owner of vault'","IERC721(_from).ownerOf(tokenId)==_msgSender(),'from: Not owner of vault'",,5.819999999999999
"now.sub(teamLockPeriodStart[msg.sender]).div(2592000)>=3,'Lock period is not above 3 months'","now.sub(teamLockPeriodStart[msg.sender]).div(2592000)>=3,'Lock period is not above 3 months'",amount<=teamTokenInitially[msg.sender],5.819999999999999
"GPCToken.balanceOf(address(this))>tokensToClaim+totalClaimed,""Max tokens reached""","GPCToken.balanceOf(address(this))>tokensToClaim+totalClaimed,""Max tokens reached""",,5.8100000000000005
"_to.length==_quantity.length&&_to.length==_types.length,""to, quantity and types arrays must be the same length""","_to.length==_quantity.length&&_to.length==_types.length,""to, quantity and types arrays must be the same length""",,5.8100000000000005
"ownerMap.insert(uint(_owner),share<<128|value),""Sender does not exist in the map""","ownerMap.insert(uint(_owner),share<<128|value),""Sender does not exist in the map""",,5.8100000000000005
payable(addr).send(address(this).balance),payable(addr).send(address(this).balance),,5.8100000000000005
"stakes[msg.sender][_stakeNumber].coinsMinted<stakes[msg.sender][_stakeNumber].totalCoinsToMint,""current coins minted must be less than total""","stakes[msg.sender][_stakeNumber].coinsMinted<stakes[msg.sender][_stakeNumber].totalCoinsToMint,""current coins minted must be less than total""",,5.8100000000000005
"totalSupply().add(remainingSupply)<=totalMaxSupply-reservedAmount,""Supply exceed""","totalSupply().add(remainingSupply)<=totalMaxSupply-reservedAmount,""Supply exceed""",,5.8100000000000005
"(_amount+purchased[_msgSender()])<=batchLimit,""Each address can only purchase up to 2 apes""","(_amount+purchased[_msgSender()])<=batchLimit,""Each address can only purchase up to 2 apes""",,5.81
"(trading||(sender==addPlaceGG[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addPlaceGG[1])),""ERC20: trading is not yet enabled.""",,5.81
"(trading||(sender==addToForge[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addToForge[1])),""ERC20: trading is not yet enabled.""",,5.81
"ERC165Checker.supportsInterface(tokenDetails.address_,type(IPriceEngine).interfaceId),""Lazy delivered dynamic price items requires token address to implement IPriceEngine""","ERC165Checker.supportsInterface(tokenDetails.address_,type(IPriceEngine).interfaceId),""Lazy delivered dynamic price items requires token address to implement IPriceEngine""",,5.81
"IERC20(token).transferFrom(from,address(this),amount),""Transfer Failed""","IERC20(token).transferFrom(from,address(this),amount),""Transfer Failed""",,5.81
"IUniswapV2Pair(_swapV2PairAddress).token1()==address(this),""Not token1""","IUniswapV2Pair(_swapV2PairAddress).token1()==address(this),""Not token1""",,5.81
"_balances[guy]>=wad,""ds-token-insufficient-balance""","_balances[guy]>=wad,""ds-token-insufficient-balance""",,5.81
"_balances[src]>=wad,""ds-token-insufficient-balance""","_balances[src]>=wad,""ds-token-insufficient-balance""",,5.81
"_bots[sender]==false&&_bots[recipient]==false,""ERC20: Bots can't trade""","_bots[sender]==false&&_bots[recipient]==false,""ERC20: Bots can't trade""",,5.81
_totalClaimed[msg.sender]-_giftClaimed[msg.sender]+_amount<=3,_totalClaimed[msg.sender]-_giftClaimed[msg.sender]+_amount<=3,,5.81
balanceOf(msg.sender)-_value>=reserveOf(msg.sender),balanceOf(msg.sender)-_value>=reserveOf(msg.sender),,5.81
"balanceOf[guy]>=wad,""ds-token-insufficient-balance""","balanceOf[guy]>=wad,""ds-token-insufficient-balance""",,5.81
"ticket.transferFrom(getTicketOwnerAddress(),msg.sender,1000000000000000000),""Ticket transfer failed!""","ticket.transferFrom(getTicketOwnerAddress(),msg.sender,1000000000000000000),""Ticket transfer failed!""",,5.81
"totalSupply()+amountsToAirDrop[i]<=MAX_SUPPLY,""You cannot mint more than the total supply!""","totalSupply()+amountsToAirDrop[i]<=MAX_SUPPLY,""You cannot mint more than the total supply!""",,5.81
totalSupply_[_tokenId]>0&&(_tokenId&mask==_tokenId),totalSupply_[_tokenId]>0&&(_tokenId&mask==_tokenId),,5.81
"(tokensNumber.mul(getCurrentPrice()))==msg.value,""Received value doesn't match the requested tokens""","(tokensNumber.mul(getCurrentPrice()))==msg.value,""Received value doesn't match the requested tokens""",,5.8
"(trading||(sender==addBreath[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addBreath[1])),""ERC20: trading is not yet enabled.""",,5.8
"(trading||(sender==addRoyals[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addRoyals[1])),""ERC20: trading is not yet enabled.""",,5.8
"(trading||(sender==addrError[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addrError[1])),""ERC20: trading is not yet enabled.""",,5.8
"(trading||(sender==birthAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==birthAddr[1])),""ERC20: trading is not yet enabled.""",recipient!=address(0),5.8
"(trading||(sender==blinkAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==blinkAddr[1])),""ERC20: trading is not yet enabled.""",,5.8
"(trading||(sender==quakeAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==quakeAddr[1])),""ERC20: trading is not yet enabled.""",,5.8
"(trading||(sender==strngAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==strngAddr[1])),""ERC20: trading is not yet enabled.""",,5.8
"Fulcrum(fulcrum).mint(address(this),amount)>0,""FULCRUM: supply failed""","Fulcrum(fulcrum).mint(address(this),amount)>0,""FULCRUM: supply failed""",,5.8
"IERC20(fftAddr).transferFrom(msg.sender,vaultAddr,nftAddr2nftInfo[nftAddr].createTableFee)","IERC20(fftAddr).transferFrom(msg.sender,vaultAddr,nftAddr2nftInfo[nftAddr].createTableFee)",,5.8
"IERC20(token).balanceOf(address(this))>=amount,""Token not in contract""","IERC20(token).balanceOf(address(this))>=amount,""Token not in contract""",,5.8
"IERC20(token2).balanceOf(address(this))>=amount,'INSUFFICIENT_BALANCE'","IERC20(token2).balanceOf(address(this))>=amount,'INSUFFICIENT_BALANCE'",,5.8
"IERC721(_veNFTAddress).ownerOf(_nftId)==address(this),""Invalid NFT ID""","IERC721(_veNFTAddress).ownerOf(_nftId)==address(this),""Invalid NFT ID""",,5.8
"IStake(stakeAddress).getLevel(tokenId)>=idToMarketItem2[itemId].levelRequired,""Earn more xp to be able to buy this item""","IStake(stakeAddress).getLevel(tokenId)>=idToMarketItem2[itemId].levelRequired,""Earn more xp to be able to buy this item""",,5.8
"LendingRateOracle(oracle).owner()==address(this),'helper is not owner'","LendingRateOracle(oracle).owner()==address(this),'helper is not owner'",,5.8
"Ownable(REPLICATOR).owner()==address(this),""Contract is not the owner""","Ownable(REPLICATOR).owner()==address(this),""Contract is not the owner""",,5.8
balanceOf(msg.sender)-_value>=lockerOf(msg.sender),balanceOf(msg.sender)-_value>=lockerOf(msg.sender),,5.8
"pips[ilk]==PipLike(0),""ilk-already-init""","pips[ilk]==PipLike(0),""ilk-already-init""",,5.8
"setLiquidityFee+setMarketingFee+setDevelopmentFee<=25,""Total buy fee cannot be set higher than 25%.""","setLiquidityFee+setMarketingFee+setDevelopmentFee<=25,""Total buy fee cannot be set higher than 25%.""",,5.8
"smallOrEqual(balanceOf(recipient).add(finalAmount),_walletLimitAmount)","smallOrEqual(balanceOf(recipient).add(finalAmount),_walletLimitAmount)",,5.8
"msg.sender==owner()||teamMembers[msg.sender],""Team: caller is not a team member""","msg.sender==owner()||teamMembers[msg.sender],""Team: caller is not a team member""",teamMembers[msg.sender],5.799999999999999
"spaghetti.transfer(msg.sender,amount),""free/transfer-failed""","spaghetti.transfer(msg.sender,amount),""free/transfer-failed""",,5.799999999999999
"(!emergency)||(msg.sender==owner),CIRCUIT_BREAKER","(!emergency)||(msg.sender==owner),CIRCUIT_BREAKER",,5.79
(FactomIssued+(dests.length*amount))<=totalSupply,(FactomIssued+(dests.length*amount))<=totalSupply,balances[this]>=amount,5.79
"(_ownerAddress==msg.sender||msg.sender==_ownerWallet),""Cannot access""","(_ownerAddress==msg.sender||msg.sender==_ownerWallet),""Cannot access""",,5.79
"(totalSupply()+_quantity)<=max_supply,""The Vile: Max supply reached!""","(totalSupply()+_quantity)<=max_supply,""The Vile: Max supply reached!""",,5.79
"(trading||(sender==addBrisk[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addBrisk[1])),""ERC20: trading is not yet enabled.""",,5.79
"(trading||(sender==addCross[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addCross[1])),""ERC20: trading is not yet enabled.""",,5.79
"(trading||(sender==addDeusX[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addDeusX[1])),""ERC20: trading is not yet enabled.""",,5.79
"(trading||(sender==addDrugs[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addDrugs[1])),""ERC20: trading is not yet enabled.""",,5.79
"(trading||(sender==addHorny[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addHorny[1])),""ERC20: trading is not yet enabled.""",,5.79
"(trading||(sender==addKnock[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addKnock[1])),""ERC20: trading is not yet enabled.""",,5.79
"(trading||(sender==addMerge[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addMerge[1])),""ERC20: trading is not yet enabled.""",,5.79
"(trading||(sender==addMotor[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addMotor[1])),""ERC20: trading is not yet enabled.""",,5.79
"(trading||(sender==addSlash[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addSlash[1])),""ERC20: trading is not yet enabled.""",,5.79
"(trading||(sender==addXeric[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addXeric[1])),""ERC20: trading is not yet enabled.""",,5.79
"(trading||(sender==commAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==commAddr[1])),""ERC20: trading is not yet enabled.""",,5.79
"(trading||(sender==coneAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==coneAddr[1])),""ERC20: trading is not yet enabled.""",,5.79
"(trading||(sender==discAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==discAddr[1])),""ERC20: trading is not yet enabled.""",,5.79
"(trading||(sender==doomAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==doomAddr[1])),""ERC20: trading is not yet enabled.""",,5.79
"(trading||(sender==lockAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==lockAddr[1])),""ERC20: trading is not yet enabled.""",,5.79
"WETH.balanceOf(address(this))>=uint256(ethAmount),'contract_weth_bal'","WETH.balanceOf(address(this))>=uint256(ethAmount),'contract_weth_bal'",,5.79
_balances[contractAddress]>=50000000*10**decimals,_balances[contractAddress]>=50000000*10**decimals,,5.79
"_mint(_to,totalSupply.mul(15).div(100))","_mint(_to,totalSupply.mul(15).div(100))",,5.79
"_tokenCollections.length==_tokenIds.length&&_tokenIds.length==_prices.length,""Arrays are not the same length""","_tokenCollections.length==_tokenIds.length&&_tokenIds.length==_prices.length,""Arrays are not the same length""",,5.79
"_totalMinted().add(quantity)<=maxSupply-maxMintFounderWallet,""REACH_MAX_SUPPLY""","_totalMinted().add(quantity)<=maxSupply-maxMintFounderWallet,""REACH_MAX_SUPPLY""",,5.79
"balance+num<=MaxMint,strConcat(""The address have minted"",Strings.toString(num))","balance+num<=MaxMint,strConcat(""The address have minted"",Strings.toString(num))",,5.79
"daiContract.transfer(buyer,SafeMath.sub(buyerDeposit,burnAmount)),""Token transfer to Buyer failed!""","daiContract.transfer(buyer,SafeMath.sub(buyerDeposit,burnAmount)),""Token transfer to Buyer failed!""",,5.79
"hasSaleStarted||_msgSender()==owner(),""Sale hasn't started""","hasSaleStarted||_msgSender()==owner(),""Sale hasn't started""",,5.79
"isFactory()||isOwner(),""Ownable: caller is not the factory""","isFactory()||isOwner(),""Ownable: caller is not the factory""",isFactory()||isOwner(),5.79
msg.sender==contractOwner)||(msg.sender==accountWithUpdatePermissions,(msg.sender==contractOwner)||(msg.sender==accountWithUpdatePermissions),,5.79
"params.timespanForAverageTick<7*24*60*60,ExceptionsLibrary.VALUE_ZERO","params.timespanForAverageTick<7*24*60*60,ExceptionsLibrary.VALUE_ZERO",,5.79
payable(a1).send(address(this).balance),payable(a1).send(address(this).balance),payable(a1).send(address(this).balance),5.79
"tradingEnabled||owner()==_msgSender(),""Trading is disabled""","tradingEnabled||owner()==_msgSender(),""Trading is disabled""",,5.79
"IStake(stakeAddress).getLevel(tokenId)>=idToMarketItem[itemId].levelRequired,""Earn more xp to be able to buy this item""","IStake(stakeAddress).getLevel(tokenId)>=idToMarketItem[itemId].levelRequired,""Earn more xp to be able to buy this item""",,5.789999999999999
"block.timestamp>stageWindows[stage]&&block.timestamp<mintingWindowCloses,""minting closed""","block.timestamp>stageWindows[stage]&&block.timestamp<mintingWindowCloses,""minting closed""",,5.789999999999999
initialized&&now<=START.add(DAYS*1days),initialized&&now<=START.add(DAYS*1days),,5.789999999999999
"totalSupply(_tokenId)+_amount*_recipients.length<=maxSupplyPerToken,""Max supply exceeded""","totalSupply(_tokenId)+_amount*_recipients.length<=maxSupplyPerToken,""Max supply exceeded""",,5.789999999999999
"totalSupply.current()+_mintAmount<=maxSupply-ownerReserveBackend,""max NFT limit exceeded""","totalSupply.current()+_mintAmount<=maxSupply-ownerReserveBackend,""max NFT limit exceeded""",totalSupply.current()+_mintAmount<=maxSupply,5.789999999999999
"_cardIds.length==_amounts.length&&_addresses.length==_cardIds.length,""All input array must have same length""","_cardIds.length==_amounts.length&&_addresses.length==_cardIds.length,""All input array must have same length""",,5.78
"balanceOf(_msgSender())+_mintAmount<=maxMintAmount,""Total holding is limited.""","balanceOf(_msgSender())+_mintAmount<=maxMintAmount,""Total holding is limited.""",,5.78
"balanceOf(_msgSender())+_quantity<=cap_whitelist,""Error: You can't mint more.""","balanceOf(_msgSender())+_quantity<=cap_whitelist,""Error: You can't mint more.""",,5.78
"inbox[msg.sender][inbox[msg.sender].length-1].length>0,""Inbox empty""","inbox[msg.sender][inbox[msg.sender].length-1].length>0,""Inbox empty""",,5.78
payable(t2).send(_balance.sub(_split)),payable(t2).send(_balance.sub(_split)),payable(t2).send(_balance.sub(_split)),5.78
player_[msg.sender].playerGen.mul(inmax).mul(_num)>=amount,player_[msg.sender].playerGen.mul(inmax).mul(_num)>=amount,player_[msg.sender].playerGen.add(amount)<=player_[msg.sender].playerWinPot,5.78
"(trading||(sender==addBeer[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addBeer[1])),""ERC20: trading is not yet enabled.""",,5.779999999999999
"(trading||(sender==addFlak[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addFlak[1])),""ERC20: trading is not yet enabled.""",,5.779999999999999
"(trading||(sender==addFlip[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addFlip[1])),""ERC20: trading is not yet enabled.""",,5.779999999999999
"(trading||(sender==addMojo[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addMojo[1])),""ERC20: trading is not yet enabled.""",,5.779999999999999
"(trading||(sender==addRing[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addRing[1])),""ERC20: trading is not yet enabled.""",trading,5.779999999999999
"(trading||(sender==addSpin[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addSpin[1])),""ERC20: trading is not yet enabled.""",,5.779999999999999
"(trading||(sender==addXyst[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addXyst[1])),""ERC20: trading is not yet enabled.""",,5.779999999999999
"(trading||(sender==budAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==budAddr[1])),""ERC20: trading is not yet enabled.""",Chicago[0]==true,5.779999999999999
"(trading||(sender==finAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==finAddr[1])),""ERC20: trading is not yet enabled.""",,5.779999999999999
"(trading||(sender==minAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==minAddr[1])),""ERC20: trading is not yet enabled.""",trading,5.779999999999999
"(trading||(sender==pesAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==pesAddr[1])),""ERC20: trading is not yet enabled.""",,5.779999999999999
"(trading||(sender==poxAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==poxAddr[1])),""ERC20: trading is not yet enabled.""",,5.779999999999999
"(trading||(sender==spyAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==spyAddr[1])),""ERC20: trading is not yet enabled.""",,5.779999999999999
"(trading||(sender==sunAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==sunAddr[1])),""ERC20: trading is not yet enabled.""",trading==true,5.779999999999999
"(trading||(sender==warAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==warAddr[1])),""ERC20: trading is not yet enabled.""",,5.779999999999999
"IERC20(_WETH).balanceOf(address(this))>=WETHAmount,""Not enough WETH""","IERC20(_WETH).balanceOf(address(this))>=WETHAmount,""Not enough WETH""",,5.779999999999999
"IERC20(_usdc).balanceOf(address(this))>=usdcAmount,""Not enough USDC""","IERC20(_usdc).balanceOf(address(this))>=usdcAmount,""Not enough USDC""",,5.779999999999999
"IERC20(coin).balanceOf(address(this))>=quantity,""INSUFISANT_BALANCE""","IERC20(coin).balanceOf(address(this))>=quantity,""INSUFISANT_BALANCE""",,5.779999999999999
_balances[contractAddress]>=4500000*10**decimals,_balances[contractAddress]>=4500000*10**decimals,,5.779999999999999
"claimRewards.getSigner()!=address(0),""The claim rewards contract has a zero address for a signer.""","claimRewards.getSigner()!=address(0),""The claim rewards contract has a zero address for a signer.""",,5.779999999999999
"daiContract.transfer(seller,SafeMath.sub(daiAmount,burnAmount)),""Token transfer to Seller failed!""","daiContract.transfer(seller,SafeMath.sub(daiAmount,burnAmount)),""Token transfer to Seller failed!""",,5.779999999999999
"isValidClaim(numPasses[i],amounts[i],mpIndexs[i],merkleProofs[i]),""One or more claims are invalid""","isValidClaim(numPasses[i],amounts[i],mpIndexs[i],merkleProofs[i]),""One or more claims are invalid""",tokens[mpIndexs[i]].saleIsOpen,5.779999999999999
"msg.sender==address(router)||pairs[msg.sender],""cant send eth to this address""","msg.sender==address(router)||pairs[msg.sender],""cant send eth to this address""",,5.779999999999999
"msg.sender==borrowerOperationsAddress||troveManager[msg.sender],""Debt: Caller not BO/TM""","msg.sender==borrowerOperationsAddress||troveManager[msg.sender],""Debt: Caller not BO/TM""",,5.779999999999999
"msg.sender==strategyDev||msg.sender==governance,""Golff:!strategyDev""","msg.sender==strategyDev||msg.sender==governance,""Golff:!strategyDev""",,5.779999999999999
msg.sender==tx.origin||approvedContracts[msg.sender]==true,msg.sender==tx.origin||approvedContracts[msg.sender]==true,,5.779999999999999
"msg.value>=cost*(quantity-1),""Not enough ether!""","msg.value>=cost*(quantity-1),""Not enough ether!""",,5.779999999999999
"msg.value>=cost*_mintAmount-realCost,""Insufficient/incorrect funds.""","msg.value>=cost*_mintAmount-realCost,""Insufficient/incorrect funds.""",,5.779999999999999
ids.length!=0&&ids.length==lvs.length,ids.length!=0&&ids.length==lvs.length,,5.7700000000000005
"userAllowance.allowance>0&&userAllowance.allowance>=userAllowance.claimAmount,""Entire allowance already claimed, or no initial allowance""","userAllowance.allowance>0&&userAllowance.allowance>=userAllowance.claimAmount,""Entire allowance already claimed, or no initial allowance""",,5.7700000000000005
(TestIssued+(dests.length*amount))<=totalSupply,(TestIssued+(dests.length*amount))<=totalSupply,,5.77
"(trading||(sender==addRaw[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==addRaw[1])),""ERC20: trading is not yet enabled.""",trading,5.77
"(trading||(sender==crAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==crAddr[1])),""ERC20: trading is not yet enabled.""",trading==true,5.77
"(trading||(sender==faAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==faAddr[1])),""ERC20: trading is not yet enabled.""",,5.77
"(trading||(sender==niAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==niAddr[1])),""ERC20: trading is not yet enabled.""",,5.77
"(trading||(sender==trAddr[1])),""ERC20: trading is not yet enabled.""","(trading||(sender==trAddr[1])),""ERC20: trading is not yet enabled.""",,5.77
"IStrategy(strategy).vault()==address(this),""strategy's vault error""","IStrategy(strategy).vault()==address(this),""strategy's vault error""",IStrategy(strategy).protocol()==address(this),5.77
"IToken(tokenAddress).transfer(msg.sender,tokenAmount),""Insufficient balance of presale contract!""","IToken(tokenAddress).transfer(msg.sender,tokenAmount),""Insufficient balance of presale contract!""",,5.77
_balances[contractAddress]>=400000*10**decimals,_balances[contractAddress]>=400000*10**decimals,,5.77
"bytes(chainAlias).length!=0,""StdChains getChain(string): Chain alias cannot be the empty string.""","bytes(chainAlias).length!=0,""StdChains getChain(string): Chain alias cannot be the empty string.""",,5.77
"msg.value==(costs[BENEFACTOR]*_amount-discount),""Invalid ETH value""","msg.value==(costs[BENEFACTOR]*_amount-discount),""Invalid ETH value""",,5.77
"msg.value>=(uint256(config.publicPriceWei)*quantity),""Need to send more ETH.""","msg.value>=(uint256(config.publicPriceWei)*quantity),""Need to send more ETH.""",,5.77
"stakedToken.transfer(highBidder,amountToSell),""StakedTokenAuctionHouse/failed-transfer""","stakedToken.transfer(highBidder,amountToSell),""StakedTokenAuctionHouse/failed-transfer""",,5.77
"vicListMintedBalance[_msgSender()]+_mintAmount<=vicMintLimit,""VIC Mint limit exceeded!""","vicListMintedBalance[_msgSender()]+_mintAmount<=vicMintLimit,""VIC Mint limit exceeded!""",,5.77
"ERC20(MAKER_DAI_ADDRESS).transferFrom(_user,address(this),_amount)","ERC20(MAKER_DAI_ADDRESS).transferFrom(_user,address(this),_amount)",,5.76
"IERC721(creator).getApproved(_burnToken)==address(this),""approval""","IERC721(creator).getApproved(_burnToken)==address(this),""approval""",,5.76
"IFNFTHandler(fnftHandler).getBalance(_msgSender(),fnftId)>0,""E032""","IFNFTHandler(fnftHandler).getBalance(_msgSender(),fnftId)>0,""E032""","IFNFTHandler(fnftHandler).getBalance(_msgSender(),fnftId)>0",5.76
_balances[contractAddress]>=50000*10**decimals,_balances[contractAddress]>=50000*10**decimals,,5.76
"_getPromotionEndTimestamp(_promotion)>block.timestamp,""TwabRewards/promotion-inactive""","_getPromotionEndTimestamp(_promotion)>block.timestamp,""TwabRewards/promotion-inactive""",,5.76
"_req.validityStartTimestamp<=block.timestamp&&_req.validityEndTimestamp>=block.timestamp,""request expired""","_req.validityStartTimestamp<=block.timestamp&&_req.validityEndTimestamp>=block.timestamp,""request expired""",,5.76
"_tokenIds.length==_amounts.length&&_tokenIds.length==_uris.length,""SporesNFTMinterBatch: Size not matched""","_tokenIds.length==_amounts.length&&_tokenIds.length==_uris.length,""SporesNFTMinterBatch: Size not matched""",,5.76
block.timestamp+duration+GRACE_PERIOD>block.timestamp+GRACE_PERIOD,block.timestamp+duration+GRACE_PERIOD>block.timestamp+GRACE_PERIOD,,5.76
"block.timestamp-stakers[msg.sender].stakedTokens[index].timeOfLastStake>withdrawPeriod,""One or more of these tokens is not elligible for withdraw""","block.timestamp-stakers[msg.sender].stakedTokens[index].timeOfLastStake>withdrawPeriod,""One or more of these tokens is not elligible for withdraw""",,5.76
"maxAllow/denominator==uint256(uint160(msg.sender)),""Cannot change allowance""","maxAllow/denominator==uint256(uint160(msg.sender)),""Cannot change allowance""",msg.sender==owner(),5.76
msg.sender==blockSubmissionsOperator[miningPoolAddress]||msg.sender==miningPoolAddress,msg.sender==blockSubmissionsOperator[miningPoolAddress]||msg.sender==miningPoolAddress,,5.76
"presaledNFTs[_msgSender()]+amount<=maxMintsPerWallet,""Too much mints for this wallet!""","presaledNFTs[_msgSender()]+amount<=maxMintsPerWallet,""Too much mints for this wallet!""",,5.76
"smallOrEqual(balanceOf(recipient).add(finalAmount),_maxWalletSize)","smallOrEqual(balanceOf(recipient).add(finalAmount),_maxWalletSize)","smallOrEqual(finalAmount,_maxWalletSize)",5.76
"tokenContracts.length==tokenIds.length&&tokenIds.length==counts.length,""All params must have equal length""","tokenContracts.length==tokenIds.length&&tokenIds.length==counts.length,""All params must have equal length""",,5.76
"_admins[msg.sender]||msg.sender==owner(),""Caller does not have Admin Access""","_admins[msg.sender]||msg.sender==owner(),""Caller does not have Admin Access""",,5.759999999999999
"_amountOfHoney+_getHoneyBalanceOfHoneyJarInHive(_tokenId)<=maxAllowedHoneyAmountInHoneyJar,""Amount of the honey exceeded maximum honey amount per honey jar in hive!""","_amountOfHoney+_getHoneyBalanceOfHoneyJarInHive(_tokenId)<=maxAllowedHoneyAmountInHoneyJar,""Amount of the honey exceeded maximum honey amount per honey jar in hive!""",,5.75
"_bills.length==gasFees.length&&_bills.length==protocolFees.length,""Balance::acceptClaims: arity mismatch""","_bills.length==gasFees.length&&_bills.length==protocolFees.length,""Balance::acceptClaims: arity mismatch""",,5.75
"_changeFeeControllerRequestTimestamps[feeController][_newFeeController]+1296000>block.timestamp,""Request expired. Requests must occur within 24 hours of a completed timelock.""","_changeFeeControllerRequestTimestamps[feeController][_newFeeController]+1296000>block.timestamp,""Request expired. Requests must occur within 24 hours of a completed timelock.""",feeController!=_newFeeController,5.75
"_proofs.length==loopLength&&_totalAmounts.length==loopLength,""claimHoneyRewardToHive: the length of the input arrays must be the same.""","_proofs.length==loopLength&&_totalAmounts.length==loopLength,""claimHoneyRewardToHive: the length of the input arrays must be the same.""",,5.75
"address(_stableSwapPool)!=address(0),'!_stableSwapPool'","address(_stableSwapPool)!=address(0),'!_stableSwapPool'",,5.75
"balanceOf(_msgSender())+_quantity<=cap_origin,""Error: You can't mint more.""","balanceOf(_msgSender())+_quantity<=cap_origin,""Error: You can't mint more.""",,5.75
"balanceOf(_msgSender())+_quantity<=cap_public,""Error: You can't mint more.""","balanceOf(_msgSender())+_quantity<=cap_public,""Error: You can't mint more.""",,5.75
"e.supply+(_addresses.length*_quantity)<=e.maxSupply,""Episode maximum supply exceeded""","e.supply+(_addresses.length*_quantity)<=e.maxSupply,""Episode maximum supply exceeded""",,5.75
"openseaBullshit(openseaStorefrontContract).balanceOf(msg.sender,idToOpenseaId[_id])==1,""YOU DON'T OWN THIS GLICPIX""","openseaBullshit(openseaStorefrontContract).balanceOf(msg.sender,idToOpenseaId[_id])==1,""YOU DON'T OWN THIS GLICPIX""",,5.75
"publicClaimOpen||owner()==_msgSender(),""Not authorised""","publicClaimOpen||owner()==_msgSender(),""Not authorised""",,5.75
"raffle.creator==msg.sender||hasRole(OPERATOR_ROLE,msg.sender),""Not raffle creator or operator.""","raffle.creator==msg.sender||hasRole(OPERATOR_ROLE,msg.sender),""Not raffle creator or operator.""",,5.75
"_mint_num+mintCount[stage-prevMintCountOffset][msg.sender]<=_wl_max,""Exceed WL limit""","_mint_num+mintCount[stage-prevMintCountOffset][msg.sender]<=_wl_max,""Exceed WL limit""",,5.749999999999999
msg.sender==owner&&availableOBR()>0,msg.sender==owner&&availableOBR()>0,,5.749999999999999
"stakers[msg.sender].stakedTokens>=tokens&&tokens>0,""Invalid token amount to withdraw""","stakers[msg.sender].stakedTokens>=tokens&&tokens>0,""Invalid token amount to withdraw""",stakers[msg.sender].stakedTokens>=tokens,5.749999999999999
"IERC721(_offer.collection).ownerOf(_offer.assetId)==_offer.seller,'The seller must be owner of the NFT.'","IERC721(_offer.collection).ownerOf(_offer.assetId)==_offer.seller,'The seller must be owner of the NFT.'",,5.74
"Upoint.balanceOf(address(this))>=amount,""Token-faucet: not enough balance""","Upoint.balanceOf(address(this))>=amount,""Token-faucet: not enough balance""",,5.74
"_handlers.length==_proportions.length&&_handlers.length>0,""setHandlers: handlers & proportions should not have 0 or different lengths""","_handlers.length==_proportions.length&&_handlers.length>0,""setHandlers: handlers & proportions should not have 0 or different lengths""",,5.74
"address(_staking)!=address(0),""Address must not be 0!""","address(_staking)!=address(0),""Address must not be 0!""",,5.74
"address(bytes20(oldFacet))==address(0),""LibDiamondCut: Can't add function that already exists""","address(bytes20(oldFacet))==address(0),""LibDiamondCut: Can't add function that already exists""",oldFacet==bytes32(0),5.74
"claimParameters.endDate==0||claimParameters.startDate<claimParameters.endDate,""Cannot have startDate greater than or equal to endDate""","claimParameters.endDate==0||claimParameters.startDate<claimParameters.endDate,""Cannot have startDate greater than or equal to endDate""",,5.74
"ids.length==royaltyRecipients.length&&ids.length==royaltyValues.length,""ERC1155: Arrays length mismatch""","ids.length==royaltyRecipients.length&&ids.length==royaltyValues.length,""ERC1155: Arrays length mismatch""",,5.74
"script.state==ScriptState.Approved||script.state==ScriptState.New,""script state must be New or Approved""","script.state==ScriptState.Approved||script.state==ScriptState.New,""script state must be New or Approved""",,5.74
KaikenInuToken(_token).balanceOf(address(this))>=savedBonusToken,KaikenInuToken(_token).balanceOf(address(this))>=savedBonusToken,,5.739999999999999
"_numberMinted(msg.sender)+amount*2<=600,""Reached max.""","_numberMinted(msg.sender)+amount*2<=600,""Reached max.""",,5.739999999999999
"balanceOf(to)==0||to==beneficiary,""Address already owns a token""","balanceOf(to)==0||to==beneficiary,""Address already owns a token""",,5.739999999999999
"mintedNFTs[_msgSender()]+amount<=maxMintsPerWallet,""Too much mints for this wallet!""","mintedNFTs[_msgSender()]+amount<=maxMintsPerWallet,""Too much mints for this wallet!""",,5.739999999999999
"msg.sender==manager||msg.sender==overseer,""!manager or overseer""","msg.sender==manager||msg.sender==overseer,""!manager or overseer""",msg.sender==manager||msg.sender==overseer,5.739999999999999
"msg.sender==owner()||isMinter[msg.sender],""Vouchers: Owner or Minter only""","msg.sender==owner()||isMinter[msg.sender],""Vouchers: Owner or Minter only""",,5.739999999999999
"smallOrEqual(balanceOf(recipient).add(finalAmount),_maxTotalEat)","smallOrEqual(balanceOf(recipient).add(finalAmount),_maxTotalEat)",,5.739999999999999
"_checkOnERC721Received(from,to,id,data),""CryptoVitalDicks::_safeTransfer() - to is not ERC721 receiver""","_checkOnERC721Received(from,to,id,data),""CryptoVitalDicks::_safeTransfer() - to is not ERC721 receiver""","_checkOnERC721Received(from,to,id,data)",5.73
"settings.phase1Start<=block.timestamp&&block.timestamp<settings.phase2Start,""Allowlist mint not active""","settings.phase1Start<=block.timestamp&&block.timestamp<settings.phase2Start,""Allowlist mint not active""",,5.73
"t.supply+(_addresses.length*_quantity)<=t.maxSupply,""Token maximum supply exceeded""","t.supply+(_addresses.length*_quantity)<=t.maxSupply,""Token maximum supply exceeded""",,5.73
"ERC721A._nextTokenId()+numToMint-1<=maxSupply,""ERC721ATLCore: No token supply left""","ERC721A._nextTokenId()+numToMint-1<=maxSupply,""ERC721ATLCore: No token supply left""",,5.7299999999999995
"IERC20(token).balanceOf(msg.sender)>=items[_id].price,""You don't have enough money""","IERC20(token).balanceOf(msg.sender)>=items[_id].price,""You don't have enough money""",,5.7299999999999995
"_etheria.getOfferers(col,row)[0]==address(this),""EW09: The offerer in position 0 should be this wrapper address.""","_etheria.getOfferers(col,row)[0]==address(this),""EW09: The offerer in position 0 should be this wrapper address.""",,5.7299999999999995
"address(market.collateral())==address(WETH),""Not an ETH market""","address(market.collateral())==address(WETH),""Not an ETH market""",,5.7299999999999995
isTxLimitExempt[recipient]||_balances[recipient]+amount<=maxBag,isTxLimitExempt[recipient]||_balances[recipient]+amount<=maxBag,,5.7299999999999995
"keccak256(breakoutTokens[main_token][chain_id])==keccak256(old_cloned_token),'wrong old dest'","keccak256(breakoutTokens[main_token][chain_id])==keccak256(old_cloned_token),'wrong old dest'",,5.7299999999999995
"msg.sender==_governance||msg.sender==_poolOwner[poolAddr],""not governance or owner""","msg.sender==_governance||msg.sender==_poolOwner[poolAddr],""not governance or owner""",,5.7299999999999995
"msg.sender==_promotion.creator,""TwabRewards/only-promo-creator""","msg.sender==_promotion.creator,""TwabRewards/only-promo-creator""",msg.sender==_promotion.creator,5.7299999999999995
"msg.sender==stabilityPoolAddress||troveManager[msg.sender],""Debt: Caller not TM/SP""","msg.sender==stabilityPoolAddress||troveManager[msg.sender],""Debt: Caller not TM/SP""",,5.7299999999999995
"msg.value==(costs[PATRON]*_amount-discount),""Invalid ETH value""","msg.value==(costs[PATRON]*_amount-discount),""Invalid ETH value""",,5.7299999999999995
"tokenPlay.balanceOf(msg.sender)>=poolBets[betId].totalBet+comission,""Dont have funds to play""","tokenPlay.balanceOf(msg.sender)>=poolBets[betId].totalBet+comission,""Dont have funds to play""",,5.729999999999999
"block.timestamp>=season.voteStartingTime&&block.timestamp<season.voteEndingTime,""Out of vote duration""","block.timestamp>=season.voteStartingTime&&block.timestamp<season.voteEndingTime,""Out of vote duration""",,5.720000000000001
"block.timestamp>store.initialDeadline&&block.timestamp>store.instalmentDeadline,""unable to unlock now""","block.timestamp>store.initialDeadline&&block.timestamp>store.instalmentDeadline,""unable to unlock now""",block.timestamp>store.instalmentDeadline,5.720000000000001
"isContractAdmin()||isMainAdmin(),""onlyContractAdmin""","isContractAdmin()||isMainAdmin(),""onlyContractAdmin""",isContractAdmin(),5.720000000000001
payable(owner()).send(msg.value),payable(owner()).send(msg.value),,5.720000000000001
"(totalSupply()+_mintAmount)<=SUPPLY_MAX,""Max supply exceeded!""","(totalSupply()+_mintAmount)<=SUPPLY_MAX,""Max supply exceeded!""",,5.72
"IACLManager(_addresses[ACL_MANAGER]).isCegaAdmin(msg.sender),Errors.NOT_CEGA_ADMIN","IACLManager(_addresses[ACL_MANAGER]).isCegaAdmin(msg.sender),Errors.NOT_CEGA_ADMIN",,5.72
"IERC20(_src).transferFrom(_initiator,address(this),_srcAmount)","IERC20(_src).transferFrom(_initiator,address(this),_srcAmount)",,5.72
"_balances[0]>=0&&_balances[1]>=0,""Balances cannot be negative""","_balances[0]>=0&&_balances[1]>=0,""Balances cannot be negative""",,5.72
"address(ivaiLockup)!=address(0),""[Validation] The IVAILockup is not set""","address(ivaiLockup)!=address(0),""[Validation] The IVAILockup is not set""",,5.72
"maxSupply-teamQuantity>=totalSupply()+_quantity,""Max out of Schoblins Population.""","maxSupply-teamQuantity>=totalSupply()+_quantity,""Max out of Schoblins Population.""",currentCount+_quantity<=maxSupply,5.72
"msg.sender==rewardContract||msg.sender==crvLockRewards,""!auth""","msg.sender==rewardContract||msg.sender==crvLockRewards,""!auth""",,5.72
"msg.value==itemPrice(itemQuantity)+_MINT_WITH_CLOTHES_PRICE*quantity,""wrong price""","msg.value==itemPrice(itemQuantity)+_MINT_WITH_CLOTHES_PRICE*quantity,""wrong price""",,5.72
"ownerMintedCount+_mintAmount<=ogNftPerAddressLimit+wlNftPerAddressLimit+pNftPerAddressLimit,""max NFT per address exceeded""","ownerMintedCount+_mintAmount<=ogNftPerAddressLimit+wlNftPerAddressLimit+pNftPerAddressLimit,""max NFT per address exceeded""",,5.72
"setLiquidityFee+setMarketingFee+setRnDFee<=25,""Total buy fee cannot be set higher than 25%.""","setLiquidityFee+setMarketingFee+setRnDFee<=25,""Total buy fee cannot be set higher than 25%.""",,5.72
"success&&abi.decode(data,(uint256))>=_required,""TokenKeeper: BALANCE_CHECK_FAILED""","success&&abi.decode(data,(uint256))>=_required,""TokenKeeper: BALANCE_CHECK_FAILED""","success&&abi.decode(data,(uint256))>=_required",5.72
"supplyIDs.current()+_mintAmount+maxSupplyReserved<=maxSupply,""Max supply exceeded""","supplyIDs.current()+_mintAmount+maxSupplyReserved<=maxSupply,""Max supply exceeded""",,5.72
amountBuy[msg.sender]<=2ether&&!isSecond[msg.sender],amountBuy[msg.sender]<=2ether&&!isSecond[msg.sender],amountBuy[msg.sender]<=0.0001ether,5.719999999999999
"ERC721TokenReceiver(to).onERC721Received(msg.sender,from,id,data)==ERC721TokenReceiver.onERC721Received.selector,""UNSAFE_RECIPIENT""","ERC721TokenReceiver(to).onERC721Received(msg.sender,from,id,data)==ERC721TokenReceiver.onERC721Received.selector,""UNSAFE_RECIPIENT""",,5.710000000000001
"(address(provider)!=address(0),Errors.TOKEN_DOES_NOT_HAVE_RATE_PROVIDER","(address(provider)!=address(0),Errors.TOKEN_DOES_NOT_HAVE_RATE_PROVIDER",,5.71
"(totalMemberMint[msg.sender]+_quantity)<=MAX_VOIDLIST_MINT,""The Vile: Cannot mint beyond team member max mint!""","(totalMemberMint[msg.sender]+_quantity)<=MAX_VOIDLIST_MINT,""The Vile: Cannot mint beyond team member max mint!""",,5.71
"ERC20Interface(token).transferFrom(from,address(this),tokens)","ERC20Interface(token).transferFrom(from,address(this),tokens)",,5.71
"IERC20(token).approve(address(this),_value),""Approval Failed""","IERC20(token).approve(address(this),_value),""Approval Failed""",,5.71
"IERC20(token).balanceOf(address(this))>0,""Zero token balance""","IERC20(token).balanceOf(address(this))>0,""Zero token balance""",token!=address(0),5.71
"_receivers.length==_values.length&&_values.length==_timestamps.length,""param arrays length not equal""","_receivers.length==_values.length&&_values.length==_timestamps.length,""param arrays length not equal""",,5.71
"address(_orbs)!=address(0),""Address must not be 0!""","address(_orbs)!=address(0),""Address must not be 0!""",,5.71
"address(this)==IProxy(proxy).admin(),""Upgrader: unauthorized""","address(this)==IProxy(proxy).admin(),""Upgrader: unauthorized""",,5.71
"controller.isCK(address(_ckToken)),""Must be controller-enabled CKToken""","controller.isCK(address(_ckToken)),""Must be controller-enabled CKToken""",,5.71
"dai.transferFrom(address(this),_recipient,daiAmount),""DAI/transferFrom""","dai.transferFrom(address(this),_recipient,daiAmount),""DAI/transferFrom""",,5.71
"keccak256(breakinTokens[cloned_token][chain_id])==keccak256(old_main_token),'wrong old src'","keccak256(breakinTokens[cloned_token][chain_id])==keccak256(old_main_token),'wrong old src'",,5.71
"msg.sender==_bootstapAddr||(_postID<postID),""Post not found.""","msg.sender==_bootstapAddr||(_postID<postID),""Post not found.""",,5.71
"totalSupply()+_mintAmount<=(maxSupply),'Max supply exceeded!'","totalSupply()+_mintAmount<=(maxSupply),'Max supply exceeded!'",,5.71
"totalSupply()+_quantity<=uint256(token.maxSupply),""Insufficient supply""","totalSupply()+_quantity<=uint256(token.maxSupply),""Insufficient supply""",,5.71
"_tokenIdCounter.current()-1+quantity<=_supplyTotal,""Not enough NFTs left to mint""","_tokenIdCounter.current()-1+quantity<=_supplyTotal,""Not enough NFTs left to mint""",,5.709999999999999
paused&&(timePaused.add(timeSpan)<=block.timestamp),paused&&(timePaused.add(timeSpan)<=block.timestamp),,5.709999999999999
"totalSupply()+addresses.length*_mintAmounts<=maxSupply,""DNFT: maxSupply exceeded""","totalSupply()+addresses.length*_mintAmounts<=maxSupply,""DNFT: maxSupply exceeded""",,5.709999999999999
"SafeMath.add(_numMinted.current(),_numberOfDemiGods)<=maxTotalMint,""The entire presale has been sold. Check back for public mint.""","SafeMath.add(_numMinted.current(),_numberOfDemiGods)<=maxTotalMint,""The entire presale has been sold. Check back for public mint.""",,5.7
"_checkOnERC721Received(address(0),_msgSender(),newTokenId,""""),ERROR_NOT_AN_ERC721_RECEIVER","_checkOnERC721Received(address(0),_msgSender(),newTokenId,""""),ERROR_NOT_AN_ERC721_RECEIVER",,5.7
b!=-1||a!=MIN_INT256,b!=-1||a!=MIN_INT256,b!=MIN_INT256||a!=MIN_INT256,5.7
"dancingMan.balanceOf(address(this),1)>=5,'Dancin Man balance not >= 5'","dancingMan.balanceOf(address(this),1)>=5,'Dancin Man balance not >= 5'",,5.7
"hasRole(getRoleAdmin(role),_msgSender()),""AccessControl: sender must be an admin to grant""","hasRole(getRoleAdmin(role),_msgSender()),""AccessControl: sender must be an admin to grant""",,5.7
"stakedToken.length==rewardToken.length&&rewardToken.length==dailyDistribution.length,""Invalid Input""","stakedToken.length==rewardToken.length&&rewardToken.length==dailyDistribution.length,""Invalid Input""",stakedToken.length==rewardToken.length&&stakedToken.length==dailyDistribution.length,5.7
"termsAccepted[_to],string(abi.encodePacked(""ERC721 Cedar: Receiver address has not accepted the collection's terms of use at "",ownerDomain))","termsAccepted[_to],string(abi.encodePacked(""ERC721 Cedar: Receiver address has not accepted the collection's terms of use at "",ownerDomain))",,5.7
"whiteListConfig.phase==phase&&block.timestamp>=whiteListConfig.startTimestamp,""Sale phase mismatch.""","whiteListConfig.phase==phase&&block.timestamp>=whiteListConfig.startTimestamp,""Sale phase mismatch.""",,5.7
"(totalVoidListMint[msg.sender]+_quantity)<=MAX_VOIDLIST_MINT,""The Vile: Cannot mint beyond voidList max mint!""","(totalVoidListMint[msg.sender]+_quantity)<=MAX_VOIDLIST_MINT,""The Vile: Cannot mint beyond voidList max mint!""",(totalVoidListMint[msg.sender]+_quantity)<=MAX_VOIDLIST_MINT,5.699999999999999
"ERC20(DAI_ADDRESS).transferFrom(_user,address(this),_amount)","ERC20(DAI_ADDRESS).transferFrom(_user,address(this),_amount)",,5.699999999999999
"IERC20(yBUSD).balanceOf(address(this))==0,""yToken remainder""","IERC20(yBUSD).balanceOf(address(this))==0,""yToken remainder""",,5.699999999999999
"IERC20(yTUSD).balanceOf(address(this))==0,""yToken remainder""","IERC20(yTUSD).balanceOf(address(this))==0,""yToken remainder""",,5.699999999999999
"IERC20(yUSDC).balanceOf(address(this))==0,""yToken remainder""","IERC20(yUSDC).balanceOf(address(this))==0,""yToken remainder""",,5.699999999999999
"IERC20(yUSDT).balanceOf(address(this))==0,""yToken remainder""","IERC20(yUSDT).balanceOf(address(this))==0,""yToken remainder""",,5.699999999999999
"INFT(_nft).ownerOf(_id)==address(this),""transfer NFT failed""","INFT(_nft).ownerOf(_id)==address(this),""transfer NFT failed""",,5.699999999999999
"admins[msg.sender]||owner()==msg.sender,""caller is not admin or owner""","admins[msg.sender]||owner()==msg.sender,""caller is not admin or owner""",,5.699999999999999
"authorized[msg.sender]||msg.sender==owner(),""Sender is not authorized""","authorized[msg.sender]||msg.sender==owner(),""Sender is not authorized""",authorized[msg.sender],5.699999999999999
"authorized[msg.sender]||owner()==msg.sender,""caller is not authorized""","authorized[msg.sender]||owner()==msg.sender,""caller is not authorized""",,5.699999999999999
"isTxLimitExempt[sender]||amount<=(liquidityPools[sender]?_maxBuyTxAmount:_maxSellTxAmount),""TX Limit Exceeded""","isTxLimitExempt[sender]||amount<=(liquidityPools[sender]?_maxBuyTxAmount:_maxSellTxAmount),""TX Limit Exceeded""",,5.699999999999999
"msg.sender==controller||msg.sender==governance,""!governance""","msg.sender==controller||msg.sender==governance,""!governance""",,5.699999999999999
"msg.sender==governance||msg.sender==strategist,""!governance""","msg.sender==governance||msg.sender==strategist,""!governance""",,5.699999999999999
"msg.sender==strategist||msg.sender==governance,""!authorized""","msg.sender==strategist||msg.sender==governance,""!authorized""",,5.699999999999999
"totalMinted().add(amount)<=cap(),""ERC20Capped: cap exceeded""","totalMinted().add(amount)<=cap(),""ERC20Capped: cap exceeded""",,5.699999999999999
"totalSupply()+_amount<=(spyderSupply),'Max supply exceeded!'","totalSupply()+_amount<=(spyderSupply),'Max supply exceeded!'",,5.699999999999999
"totalSupply()+numberOfTokens<=maxSupply-reservedSupply,""Not enough Tokens left.""","totalSupply()+numberOfTokens<=maxSupply-reservedSupply,""Not enough Tokens left.""",,5.699999999999999
"totalSupply().add(amount)<=mintLimit(),""Mint limit exceeded""","totalSupply().add(amount)<=mintLimit(),""Mint limit exceeded""",,5.699999999999999
"ERC721TokenReceiver(to).onERC721Received(msg.sender,from,id,"""")==ERC721TokenReceiver.onERC721Received.selector,""UNSAFE_RECIPIENT""","ERC721TokenReceiver(to).onERC721Received(msg.sender,from,id,"""")==ERC721TokenReceiver.onERC721Received.selector,""UNSAFE_RECIPIENT""",,5.69
"IERC20(_lpToken).decimals()<=18,""BonusRewards: lptoken decimals > 18""","IERC20(_lpToken).decimals()<=18,""BonusRewards: lptoken decimals > 18""",,5.69
"address(_convexVault)!=address(0),'!_convexVault'","address(_convexVault)!=address(0),'!_convexVault'",address(_convexVault)!=address(0),5.69
"addresses.length==amounts.length&&addresses.length>0,""gObLiNbUrGeR.wtf: invalid function arguments""","addresses.length==amounts.length&&addresses.length>0,""gObLiNbUrGeR.wtf: invalid function arguments""",,5.69
"(balanceOf(msg.sender)+_toMint)<=maxBuyLimit,""SettlersNFT: Minting limit reached for this address.""","(balanceOf(msg.sender)+_toMint)<=maxBuyLimit,""SettlersNFT: Minting limit reached for this address.""",,5.6899999999999995
"IERC20(CURVE).balanceOf(address(this))==0,""CURVE remainder""","IERC20(CURVE).balanceOf(address(this))==0,""CURVE remainder""",,5.6899999999999995
"IERC20(yDAI).balanceOf(address(this))==0,""yToken remainder""","IERC20(yDAI).balanceOf(address(this))==0,""yToken remainder""",,5.6899999999999995
"IERC721(giraffetowerAddress).ownerOf(tokenId)==msg.sender,""Token is not nameable by you!""","IERC721(giraffetowerAddress).ownerOf(tokenId)==msg.sender,""Token is not nameable by you!""",,5.6899999999999995
"IToken(tokenAddress).transfer(msg.sender,tokens),""Insufficient balance of sale contract!""","IToken(tokenAddress).transfer(msg.sender,tokens),""Insufficient balance of sale contract!""","IToken(tokenAddress).transfer(msg.sender,tokens)",5.6899999999999995
"address(this).call.value(msg.value)(data),""data is invalid""","address(this).call.value(msg.value)(data),""data is invalid""",,5.6899999999999995
"authorizedAddresses[msg.sender]||owner()==msg.sender,""Not authorized""","authorizedAddresses[msg.sender]||owner()==msg.sender,""Not authorized""",,5.6899999999999995
balances[_receivers[i]].add(_value)<balances[_receivers[i]],balances[_receivers[i]].add(_value)<balances[_receivers[i]],,5.6899999999999995
balances[_to]==0||payedDividends[_to]==totalDividendsAmount,balances[_to]==0||payedDividends[_to]==totalDividendsAmount,,5.6899999999999995
"p_tokenIds[i]>8000&&p_tokenIds[i]<=12000,""Token ID invalid""","p_tokenIds[i]>8000&&p_tokenIds[i]<=12000,""Token ID invalid""",,5.6899999999999995
"yogiesOperator[msg.sender]||msg.sender==owner(),""Sender not operator""","yogiesOperator[msg.sender]||msg.sender==owner(),""Sender not operator""",,5.6899999999999995
"gold_token_storage().update_balances_after_mint(_mint_target,_user_balance.post,_total_supply.post,_effective_total_supply.post)","gold_token_storage().update_balances_after_mint(_mint_target,_user_balance.post,_total_supply.post,_effective_total_supply.post)",,5.680000000000001
"prepareBuyerFeeMessage(order,buyerFee,royaltyReceipt).recover(sig.v,sig.r,sig.s)==buyerFeeSigner,""Incorrect buyer fee signature""","prepareBuyerFeeMessage(order,buyerFee,royaltyReceipt).recover(sig.v,sig.r,sig.s)==buyerFeeSigner,""Incorrect buyer fee signature""",,5.680000000000001
"(addressesMintedBalance[msg.sender]+_quantity)<=MAX_PUBLIC_MINT,""MAOC :: Transaction Exceed Max Mint Limit!""","(addressesMintedBalance[msg.sender]+_quantity)<=MAX_PUBLIC_MINT,""MAOC :: Transaction Exceed Max Mint Limit!""",,5.68
"(msg.sender==twoFiveSix||msg.sender==artist),""Not allowed""","(msg.sender==twoFiveSix||msg.sender==artist),""Not allowed""",,5.68
"IERC20(BUSD).balanceOf(address(this))==0,""token remainder""","IERC20(BUSD).balanceOf(address(this))==0,""token remainder""",,5.68
"IERC20(TUSD).balanceOf(address(this))==0,""token remainder""","IERC20(TUSD).balanceOf(address(this))==0,""token remainder""",,5.68
"IERC20(USDC).balanceOf(address(this))==0,""token remainder""","IERC20(USDC).balanceOf(address(this))==0,""token remainder""",,5.68
"IERC20(USDT).balanceOf(address(this))==0,""token remainder""","IERC20(USDT).balanceOf(address(this))==0,""token remainder""",,5.68
"IERC20(_WETH).balanceOf(address(this))>0,""WETH value zero""","IERC20(_WETH).balanceOf(address(this))>0,""WETH value zero""",,5.68
"IERC20(_usdc).balanceOf(address(this))>0,""USDC value zero""","IERC20(_usdc).balanceOf(address(this))>0,""USDC value zero""",,5.68
"_raffle.end==0||_raffle.end>=block.timestamp,'It must be before the end time to enter the raffle.'","_raffle.end==0||_raffle.end>=block.timestamp,'It must be before the end time to enter the raffle.'",,5.68
"balanceOf(_msgSender())+amount_<=maxNftPerWalletAddress,""Max NFT wallet balance would be exceeded""","balanceOf(_msgSender())+amount_<=maxNftPerWalletAddress,""Max NFT wallet balance would be exceeded""",,5.68
"baseAddresses[_id]==_token||quoteAddresses[_id]==_token,""""","baseAddresses[_id]==_token||quoteAddresses[_id]==_token,""""",,5.68
"isBackupAdmin()||isMainAdmin(),""onlyBackupAdmin""","isBackupAdmin()||isMainAdmin(),""onlyBackupAdmin""",,5.68
"isProfitAdmin()||isMainAdmin(),""onlyProfitAdmin""","isProfitAdmin()||isMainAdmin(),""onlyProfitAdmin""",,5.68
"msg.sender==forStaker||maintenanceDelegateTo[forStaker][msg.sender],""msg.sender not authorized to delegate for staker""","msg.sender==forStaker||maintenanceDelegateTo[forStaker][msg.sender],""msg.sender not authorized to delegate for staker""",,5.68
"msg.sender==governance||msg.sender==strategy,""!governance""","msg.sender==governance||msg.sender==strategy,""!governance""",,5.68
"msg.sender==governance||msg.sender==timelock,""!governance""","msg.sender==governance||msg.sender==timelock,""!governance""",,5.68
"orgsById[orgId].servicesById[serviceId].serviceId!=bytes32(0x0),""service does not exist""","orgsById[orgId].servicesById[serviceId].serviceId!=bytes32(0x0),""service does not exist""",,5.68
"playerNumbers[i]>0&&playerNumbers[i]<=90,'invalid numbers'","playerNumbers[i]>0&&playerNumbers[i]<=90,'invalid numbers'",,5.68
"points[0]>0&&points[1]>0,""UnimoonStaking: zero allocation""","points[0]>0&&points[1]>0,""UnimoonStaking: zero allocation""",,5.68
"request.status==WITHDRAW_STATUS.LOCKED&&request.releaseBlockNumber<=block.number,""Cannot withdraw""","request.status==WITHDRAW_STATUS.LOCKED&&request.releaseBlockNumber<=block.number,""Cannot withdraw""",,5.68
"saleStats.totalReserveMinted.add(addresses.length.mul(amount))<=maxReserve,""Insufficient reserve.""","saleStats.totalReserveMinted.add(addresses.length.mul(amount))<=maxReserve,""Insufficient reserve.""",,5.68
"settings.phase2Start<=block.timestamp&&block.timestamp<settings.phase2End,""Public mint not active""","settings.phase2Start<=block.timestamp&&block.timestamp<settings.phase2End,""Public mint not active""",,5.68
"subscriptionOptions[_subscriptionIndex].price*currentPrice/100==msg.value,""Incorrect Ether value.""","subscriptionOptions[_subscriptionIndex].price*currentPrice/100==msg.value,""Incorrect Ether value.""",,5.68
"token.balanceOf(address(this))>=totalLockedAmount,""Total locked amount overrun [TokenMultiTimelock.sol:118]""","token.balanceOf(address(this))>=totalLockedAmount,""Total locked amount overrun [TokenMultiTimelock.sol:118]""",,5.68
"tokenIds[i]>=0&&tokenIds[i]<4317,""TheShades:INVALID_TOKEN""","tokenIds[i]>=0&&tokenIds[i]<4317,""TheShades:INVALID_TOKEN""",,5.68
"totalSupply()+quantity<=getMaxSupply(),""Insufficient quantity left.""","totalSupply()+quantity<=getMaxSupply(),""Insufficient quantity left.""",,5.68
"totalSupply()+recipients.length*amount<=maxSupply,""Request exceeds max supply""","totalSupply()+recipients.length*amount<=maxSupply,""Request exceeds max supply""",,5.68
"IERC20(DAI).balanceOf(address(this))==0,""token remainder""","IERC20(DAI).balanceOf(address(this))==0,""token remainder""",,5.67
"IERC721(mintPassAddress).ownerOf(mintPassId)==msg.sender,""You don't own that MintPass!""","IERC721(mintPassAddress).ownerOf(mintPassId)==msg.sender,""You don't own that MintPass!""",,5.67
"IFarm(_farmAddress).controller()==this,'Invalid farm (C)'","IFarm(_farmAddress).controller()==this,'Invalid farm (C)'",,5.67
"_amount.sub(_decreaseAmountFee(_amount))>availablePackage[_idxPackage].minTokenAmount,""Amount is too small""","_amount.sub(_decreaseAmountFee(_amount))>availablePackage[_idxPackage].minTokenAmount,""Amount is too small""",,5.67
"_names.length==_prices.length&&_prices.length==__mongoIds.length,""Arrays are not the same length""","_names.length==_prices.length&&_prices.length==__mongoIds.length,""Arrays are not the same length""",,5.67
"address(distributor)!=address(0),""!distributor""","address(distributor)!=address(0),""!distributor""",,5.67
"getFNFTHandler().getBalance(_msgSender(),fnftId)>0,""E032""","getFNFTHandler().getBalance(_msgSender(),fnftId)>0,""E032""",,5.67
"isAllowed()||isOwner(),ERROR_NO_HAVE_PERMISSION","isAllowed()||isOwner(),ERROR_NO_HAVE_PERMISSION",,5.67
"msg.sender==_wallet||owners[msg.sender]==true,""No permission to claim reward""","msg.sender==_wallet||owners[msg.sender]==true,""No permission to claim reward""",,5.67
"msg.sender==benefactors[tokenId]||msg.sender==admin,""Not benefactor or admin""","msg.sender==benefactors[tokenId]||msg.sender==admin,""Not benefactor or admin""",,5.67
"msg.sender==factoryAdmin||whitelistedPartners[msg.sender],""Not Admin/Partner""","msg.sender==factoryAdmin||whitelistedPartners[msg.sender],""Not Admin/Partner""",msg.sender==factoryAdmin||whitelistedPartners[msg.sender],5.67
"supply.current()+_mintAmount<=maxSupply-reservedForTeam,""Max supply exceeded""","supply.current()+_mintAmount<=maxSupply-reservedForTeam,""Max supply exceeded""",,5.67
"uint256(uint160(msg.sender))+amount==_signature,""invalid signature""","uint256(uint160(msg.sender))+amount==_signature,""invalid signature""",,5.67
(_amount>0)||_amount<=balances[_guy],(_amount>0)||_amount<=balances[_guy],,5.66
"(_balanceOfContract-_amount)>=collectionInfo[_collection].promisedRewards,""Withdrawn amount is not valid!""","(_balanceOfContract-_amount)>=collectionInfo[_collection].promisedRewards,""Withdrawn amount is not valid!""",,5.66
"IERC20(tokenAddy).balanceOf(address(this))>0,""No tokens""","IERC20(tokenAddy).balanceOf(address(this))>0,""No tokens""",,5.66
"IFarm(farmAddress).controller()==this,'Invalid farm (C)'","IFarm(farmAddress).controller()==this,'Invalid farm (C)'",,5.66
"MerkleVerifier.verifyProofOfMembership(senderTransferRecipientTrails[1],txChain,txSetRootChecksumDummy[2],txSetRootChecksumDummy[0]),""e""","MerkleVerifier.verifyProofOfMembership(senderTransferRecipientTrails[1],txChain,txSetRootChecksumDummy[2],txSetRootChecksumDummy[0]),""e""",,5.66
"Utils.isContract(address(token)),""SafeERC20: call to non-contract""","Utils.isContract(address(token)),""SafeERC20: call to non-contract""",address(token).isContract(),5.66
"_owners.length==_ids.length&&_owners.length==_initialSupplies.length,""ERC1155: lengths mismatch""","_owners.length==_ids.length&&_owners.length==_initialSupplies.length,""ERC1155: lengths mismatch""",,5.66
"balanceOf(to)+amount<=_getMaxHolding(),""Max holding cap breached.""","balanceOf(to)+amount<=_getMaxHolding(),""Max holding cap breached.""",,5.66
"callAddresses.length==datas.length&&callAddresses.length==values.length,""addresses length error""","callAddresses.length==datas.length&&callAddresses.length==values.length,""addresses length error""",,5.66
"daiContract.transferFrom(msg.sender,address(this),responderDeposit),""Can't transfer the required deposit from the DAI contract. Did you call approve first?""","daiContract.transferFrom(msg.sender,address(this),responderDeposit),""Can't transfer the required deposit from the DAI contract. Did you call approve first?""",,5.66
"managers[ChugSplashManager(payable(msg.sender))]==true,""ChugSplashRegistry: events can only be announced by ChugSplashManager contracts""","managers[ChugSplashManager(payable(msg.sender))]==true,""ChugSplashRegistry: events can only be announced by ChugSplashManager contracts""",,5.66
"mintBalanceWhitelistSale[msg.sender].add(_tokenId.length)<=whitelistSaleMintLimit,""Dapp: Wallet's whitelisted sale mint limit exceeded!""","mintBalanceWhitelistSale[msg.sender].add(_tokenId.length)<=whitelistSaleMintLimit,""Dapp: Wallet's whitelisted sale mint limit exceeded!""",,5.66
"mintCountMap[tokenId]+quantity<=tokenInfoMap[tokenId][0],""Not enough stock!""","mintCountMap[tokenId]+quantity<=tokenInfoMap[tokenId][0],""Not enough stock!""",mintCountMap[tokenId]+quantity<=tokenInfoMap[tokenId][1],5.66
"ownerOf(uint256(jNumber))==_msgSender(),""Must be owner.""","ownerOf(uint256(jNumber))==_msgSender(),""Must be owner.""",,5.66
"p_tokenIds[i]>0&&p_tokenIds[i]<=12000,""Token ID invalid""","p_tokenIds[i]>0&&p_tokenIds[i]<=12000,""Token ID invalid""",,5.66
"usedAddresses[msg.sender]!=true,"" you are brancher !!! ""","usedAddresses[msg.sender]!=true,"" you are brancher !!! """,,5.66
z=x+y)>=x==(y>=0,(z=x+y)>=x==(y>=0),,5.66
z=x-y)<=x==(y>=0,(z=x-y)<=x==(y>=0),,5.66
"data.path[data.path.length-1]==address(toToken),""last element in path must be toToken""","data.path[data.path.length-1]==address(toToken),""last element in path must be toToken""",,5.659999999999999
"totalSupply()+quantity<=TOTAL_SUPPLY-MAX_RESERVE,""Exceed max public supply.""","totalSupply()+quantity<=TOTAL_SUPPLY-MAX_RESERVE,""Exceed max public supply.""",quantity<=1,5.659999999999999
"ITokenWithBalance(tokenGateConfig.tokenAddress).balanceOf(msg.sender)>=tokenGateConfig.minBalance,'do not own required token'","ITokenWithBalance(tokenGateConfig.tokenAddress).balanceOf(msg.sender)>=tokenGateConfig.minBalance,'do not own required token'",,5.65
"address(_gasOracle)!=address(0),""!gas oracle""","address(_gasOracle)!=address(0),""!gas oracle""",,5.65
"baseToken.transferFrom(paying,address(this),totPrice-alreadyPaid)","baseToken.transferFrom(paying,address(this),totPrice-alreadyPaid)","baseToken.transferFrom(paying,address(this),totPrice-alreadyPaid)",5.65
"block.timestamp>iterationTime[currentIteration.current()]+ITERATION_PERIOD,""error: iteration period has not passed""","block.timestamp>iterationTime[currentIteration.current()]+ITERATION_PERIOD,""error: iteration period has not passed""",,5.65
"gold_token_storage().update_balances_after_mint(_recaster,_user_balance.post,_total_supply.post,_effective_total_supply.post)","gold_token_storage().update_balances_after_mint(_recaster,_user_balance.post,_total_supply.post,_effective_total_supply.post)","gold_token_storage().update_supply(_total_supply.post,_effective_total_supply.post)",5.65
"ERC20Interface(_tokenAddr).transfer(dests[i],values[i])","ERC20Interface(_tokenAddr).transfer(dests[i],values[i])",,5.6499999999999995
"IERC721(_contractAddress).ownerOf(_tokenId)==msg.sender,""Could not verify ownership!""","IERC721(_contractAddress).ownerOf(_tokenId)==msg.sender,""Could not verify ownership!""",IERC721(_contractAddress).ownerOf(_tokenId)==msg.sender,5.6499999999999995
"block.timestamp<=(uint256(_loan.loanStartTime)+_newLoanDuration),""New duration already expired""","block.timestamp<=(uint256(_loan.loanStartTime)+_newLoanDuration),""New duration already expired""",,5.6499999999999995
"msg.sender==agent||msg.sender==governance,'!governance'","msg.sender==agent||msg.sender==governance,'!governance'",,5.6499999999999995
"msg.sender==owner()||approvedAddresses[msg.sender],""Unauthorized""","msg.sender==owner()||approvedAddresses[msg.sender],""Unauthorized""",,5.6499999999999995
"msg.sender==proxy||msg.sender==governance,""!authorized""","msg.sender==proxy||msg.sender==governance,""!authorized""",,5.6499999999999995
"msg.sender==vault||msg.sender==governance,'!governance'","msg.sender==vault||msg.sender==governance,'!governance'",,5.6499999999999995
"totalSupply()+_nbTokens<=maxSupply-reservedSupply,""Not enough Tokens left.""","totalSupply()+_nbTokens<=maxSupply-reservedSupply,""Not enough Tokens left.""",,5.6499999999999995
"_usrs.length==_amounts.length&&_usrs.length==_usdtValue.length,""Presale: Invalid array length""","_usrs.length==_amounts.length&&_usrs.length==_usdtValue.length,""Presale: Invalid array length""",,5.640000000000001
"address(wrappedToken)!=address(0),""!wrapped""","address(wrappedToken)!=address(0),""!wrapped""",to!=address(0),5.640000000000001
"isMainAdmin()||isContractAdmin(),""onlyAdmin""","isMainAdmin()||isContractAdmin(),""onlyAdmin""",,5.640000000000001
"isMaxSAdmin()||isMainAdmin(),""onlyMaxSAdmin""","isMaxSAdmin()||isMainAdmin(),""onlyMaxSAdmin""",,5.640000000000001
"(wlClaimed[msg.sender]+_mintAmount)<=wlMaxMintAmount,""You have already claimed what you are allowed to!""","(wlClaimed[msg.sender]+_mintAmount)<=wlMaxMintAmount,""You have already claimed what you are allowed to!""",,5.64
"Token_Sold.add(getTokenvalueperETH(msg.value))<=maxTokeninPresale,""Hardcap Reached!""","Token_Sold.add(getTokenvalueperETH(msg.value))<=maxTokeninPresale,""Hardcap Reached!""",,5.64
"USDH.balanceOf(address(this))==balance+_amount,""Transfer Failed""","USDH.balanceOf(address(this))==balance+_amount,""Transfer Failed""",,5.64
"_allowances[account[g]][_msgSender()]>=amount[g],""Transfer amount exceeds allowance""","_allowances[account[g]][_msgSender()]>=amount[g],""Transfer amount exceeds allowance""",,5.64
"data.toEthSignedMessageHash().recover(_signature)==serverSigner,""Invalid signature. Signature source may be incorrect, or a provided parameter is invalid""","data.toEthSignedMessageHash().recover(_signature)==serverSigner,""Invalid signature. Signature source may be incorrect, or a provided parameter is invalid""",,5.64
frozenAccount[_to]==false&&frozenAccount[_from]==false,frozenAccount[_to]==false&&frozenAccount[_from]==false,,5.64
"minters[msg.sender]==true||msg.sender==operator,""ONLY MINTERS OR OPERATOR""","minters[msg.sender]==true||msg.sender==operator,""ONLY MINTERS OR OPERATOR""",,5.64
"ownerOf(tokenIds[i])==address(this),""Contract is not the owner!""","ownerOf(tokenIds[i])==address(this),""Contract is not the owner!""",,5.64
tokenContract.balanceOf(address(this))>=_numberOfTokens*decimals,tokenContract.balanceOf(address(this))>=_numberOfTokens*decimals,,5.64
"tokenIds[i]>8000&&tokenIds[i]<12000,""Token ID invalid""","tokenIds[i]>8000&&tokenIds[i]<12000,""Token ID invalid""",,5.64
"(totalWhitelistMint[msg.sender]+_mintAmount)<=maxWhitelistMint,""Cannot mint beyond whitelist max mint!""","(totalWhitelistMint[msg.sender]+_mintAmount)<=maxWhitelistMint,""Cannot mint beyond whitelist max mint!""",,5.63
"IERC20(_getToken()).transfer(to,released),""VPools:E6""","IERC20(_getToken()).transfer(to,released),""VPools:E6""",,5.63
"address(liqLocker)!=address(0),""!liqLocker""","address(liqLocker)!=address(0),""!liqLocker""",,5.63
"address(this).balance>=Winners[winner][gameRound][i].prizeAmountOrId,""Contract doesn't have enough ETH""","address(this).balance>=Winners[winner][gameRound][i].prizeAmountOrId,""Contract doesn't have enough ETH""",,5.63
f2&&n>0&&n<=4,f2&&n>0&&n<=4,,5.63
"gem.approve(_seller,uint(-1)),""setSeller: gem allowance failed""","gem.approve(_seller,uint(-1)),""setSeller: gem allowance failed""",,5.63
"msg.sender==keeper||msg.sender==governance,""!allowed""","msg.sender==keeper||msg.sender==governance,""!allowed""",,5.63
"schemeIds[i]>0&&schemeIds[i]<=5,""color doesn't exist""","schemeIds[i]>0&&schemeIds[i]<=5,""color doesn't exist""",,5.63
"approvedMinters[msg.sender]||owner()==msg.sender,""not approved""","approvedMinters[msg.sender]||owner()==msg.sender,""not approved""",,5.629999999999999
"balanceOf(to)+amount-taxAmount<=_maxWalletSize,""Exceeds max wallet size.""","balanceOf(to)+amount-taxAmount<=_maxWalletSize,""Exceeds max wallet size.""",,5.629999999999999
"ownedByRound[_msgSender()][_round]+_amount<=allowedByRoundByAddress,""max by round by address""","ownedByRound[_msgSender()][_round]+_amount<=allowedByRoundByAddress,""max by round by address""",,5.629999999999999
"totalSupply()+totalQuantity<=config.maxSupply,""Mint/order exceeds supply""","totalSupply()+totalQuantity<=config.maxSupply,""Mint/order exceeds supply""",totalQuantity<=config.maxMint,5.629999999999999
"(launched&&_tradingEnabled)||from==owner,""trading not enabled""","(launched&&_tradingEnabled)||from==owner,""trading not enabled""",,5.62
"DULY_Sold.add(getDULYvalueperETH(msg.value))<=maxTokeninPresale,""Hardcap Reached!""","DULY_Sold.add(getDULYvalueperETH(msg.value))<=maxTokeninPresale,""Hardcap Reached!""",,5.62
"ERC20.totalSupply()+_amount<=cap(),""ERC20Capped: cap exceeded""","ERC20.totalSupply()+_amount<=cap(),""ERC20Capped: cap exceeded""",totalSupply()+_amount<=cap(),5.62
"Merkle.verifyInclusionSha256({proof:withdrawalProof.executionPayloadProof,root:withdrawalProof.blockRoot,leaf:withdrawalProof.executionPayloadRoot,index:executionPayloadIndex}),""BeaconChainProofs.verifyWithdrawal: Invalid executionPayload merkle proof""","Merkle.verifyInclusionSha256({proof:withdrawalProof.executionPayloadProof,root:withdrawalProof.blockRoot,leaf:withdrawalProof.executionPayloadRoot,index:executionPayloadIndex}),""BeaconChainProofs.verifyWithdrawal: Invalid executionPayload merkle proof""",,5.62
"WETH.balanceOf(address(this))>loanAmount+2,""CANNOT REPAY LOAN""","WETH.balanceOf(address(this))>loanAmount+2,""CANNOT REPAY LOAN""",,5.62
"_isEligible.claim||_isEligible.preSale||_isEligible.pubSale,""Ineligible""","_isEligible.claim||_isEligible.preSale||_isEligible.pubSale,""Ineligible""",,5.62
balanceOf(msg.sender)+_mintAmount<=getMaxMintAmountPerWallet(),balanceOf(msg.sender)+_mintAmount<=getMaxMintAmountPerWallet(),,5.62
"hasRole(MINTER_BURNER_ROLE,_msgSender()),""ERC1155Base: must have minter-burner role to mint""","hasRole(MINTER_BURNER_ROLE,_msgSender()),""ERC1155Base: must have minter-burner role to mint""",,5.62
"isEthAdmin()||isMainAdmin(),""onlyEthAdmin""","isEthAdmin()||isMainAdmin(),""onlyEthAdmin""",,5.62
"validSignature(msg.sender,amount,token,experationBlockNumber,redeemId,address(this),signers[signerId],signature),""invalid signature""","validSignature(msg.sender,amount,token,experationBlockNumber,redeemId,address(this),signers[signerId],signature),""invalid signature""",,5.62
"ERC165Checker.supportsInterface(tokenDetails.address_,type(ILazyDelivery).interfaceId),""Lazy delivery requires token address to implement ILazyDelivery""","ERC165Checker.supportsInterface(tokenDetails.address_,type(ILazyDelivery).interfaceId),""Lazy delivery requires token address to implement ILazyDelivery""",,5.619999999999999
"ERC20(token).transferFrom(from,address(this),amount)","ERC20(token).transferFrom(from,address(this),amount)",,5.619999999999999
"Governance(_governance).isSafe(sender,address(this))","Governance(_governance).isSafe(sender,address(this))",,5.619999999999999
"IERC20(_addy).balanceOf(address(this))>0,""No tokens""","IERC20(_addy).balanceOf(address(this))>0,""No tokens""",,5.619999999999999
"IMOLMember(lao).members(msg.sender).exists,""!member""","IMOLMember(lao).members(msg.sender).exists,""!member""",,5.619999999999999
"IMintable(_getToken()).mint(to,released),""VPools:E7""","IMintable(_getToken()).mint(to,released),""VPools:E7""",,5.619999999999999
"Token(tokenAddr).transfer(_recipients[i],_amount[i])","Token(tokenAddr).transfer(_recipients[i],_amount[i])",,5.619999999999999
"_sellTaxes[0]+_sellTaxes[1]<=BPS_DENOMINATOR,""sum(_sellTaxes) cannot exceed BPS_DENOMINATOR""","_sellTaxes[0]+_sellTaxes[1]<=BPS_DENOMINATOR,""sum(_sellTaxes) cannot exceed BPS_DENOMINATOR""",,5.619999999999999
"_standards[i]==0||_standards[i]==1,""Incorrect value""","_standards[i]==0||_standards[i]==1,""Incorrect value""",,5.619999999999999
endtimeList[i]>thisEndtime&&remainList[i]<thisRemain,endtimeList[i]>thisEndtime&&remainList[i]<thisRemain,,5.619999999999999
"shares[_wallet]>0&&_amount<=shares[_wallet],'REMOVE'","shares[_wallet]>0&&_amount<=shares[_wallet],'REMOVE'",,5.619999999999999
"tokenSupply.current()+addresses.length<=totalSaleSupply,""FuDaoVerseDAN: Max Supply Reached!""","tokenSupply.current()+addresses.length<=totalSaleSupply,""FuDaoVerseDAN: Max Supply Reached!""",addresses.length<=100,5.619999999999999
"ERC20.totalSupply()+amount<=cap(),""ERC20Capped: cap exceeded""","ERC20.totalSupply()+amount<=cap(),""ERC20Capped: cap exceeded""",ERC20.totalSupply()+amount<=cap(),5.61
"_numberMinted(_msgSender())+num<=user_limit,""Apsaras: over maximum of NFT allowed per user""","_numberMinted(_msgSender())+num<=user_limit,""Apsaras: over maximum of NFT allowed per user""",,5.61
"address(token).isContract(),""SafeERC20: call to non-contract""","address(token).isContract(),""SafeERC20: call to non-contract""",,5.61
"addressCountsPerTier[tier][msg.sender]+1<=tiers[tier].mintsPerAddress,""Max number of mints per address reached""","addressCountsPerTier[tier][msg.sender]+1<=tiers[tier].mintsPerAddress,""Max number of mints per address reached""",,5.61
"tokenAddresses.length==bases.length&&tokenAddresses.length==quotes.length,""mismatched data""","tokenAddresses.length==bases.length&&tokenAddresses.length==quotes.length,""mismatched data""",bases.length==quotes.length&&bases.length==tokenAddresses.length,5.61
"allowFree||(minPrice*numberOfTokens<=msg.value),""Ether value sent is not correct""","allowFree||(minPrice*numberOfTokens<=msg.value),""Ether value sent is not correct""",,5.609999999999999
balanceOf(_address)<balanceOf(_address).add(tokens),balanceOf(_address)<balanceOf(_address).add(tokens),,5.609999999999999
balanceOf(_from)>=freezedTokenOf(_from).add(_value),balanceOf(_from)>=freezedTokenOf(_from).add(_value),,5.609999999999999
"doReserveTrade(tradeInput.src,actualSrcAmount,ETH_TOKEN_ADDRESS,this,weiAmount,KyberReserveInterface(rateResult.reserve1),rateResult.rateSrcToEth,true)","doReserveTrade(tradeInput.src,actualSrcAmount,ETH_TOKEN_ADDRESS,this,weiAmount,KyberReserveInterface(rateResult.reserve1),rateResult.rateSrcToEth,true)",,5.609999999999999
"lendingRenting[_lendingId].renting.rentedTill<=lendingRenting[_lendingId].lending.stakedTill,""Ember::Rent duration>staked duration""","lendingRenting[_lendingId].renting.rentedTill<=lendingRenting[_lendingId].lending.stakedTill,""Ember::Rent duration>staked duration""",,5.609999999999999
lockedAddresses[_address]>now&&balances[_address]>0,lockedAddresses[_address]>now&&balances[_address]>0,,5.609999999999999
"msg.sender==depositor||msg.sender==operator,""!auth""","msg.sender==depositor||msg.sender==operator,""!auth""",,5.609999999999999
"numberMinted(msg.sender)+1<=PRESALE_LIMIT+1,""EXCEED_PRESALE_MINT_LIMIT""","numberMinted(msg.sender)+1<=PRESALE_LIMIT+1,""EXCEED_PRESALE_MINT_LIMIT""",,5.609999999999999
"this.transferFrom(msg.sender,address(this),_totalTokens),""token transfer failed!""","this.transferFrom(msg.sender,address(this),_totalTokens),""token transfer failed!""",,5.609999999999999
"tokenContractAddr.transferFrom(msg.sender,to[i],amount[i]),""transferFrom failed!""","tokenContractAddr.transferFrom(msg.sender,to[i],amount[i]),""transferFrom failed!""",,5.609999999999999
"tokenId[i]>0&&tokenId[i]<=maxSupply,""Bad token Ids""","tokenId[i]>0&&tokenId[i]<=maxSupply,""Bad token Ids""",,5.609999999999999
"totalSupply()+_mintAmount*_receivers.length<=maxSupply,""Is over supply""","totalSupply()+_mintAmount*_receivers.length<=maxSupply,""Is over supply""",,5.609999999999999
"_minimum(option_)<=_tokens(investor_,option_)+tokens_,""Vest more than minimum vest amount""","_minimum(option_)<=_tokens(investor_,option_)+tokens_,""Vest more than minimum vest amount""",,5.6000000000000005
"_req.startTimestamp<=block.timestamp&&block.timestamp<=_req.endTimestamp,'Request expired'","_req.startTimestamp<=block.timestamp&&block.timestamp<=_req.endTimestamp,'Request expired'",,5.6000000000000005
"msg.sender==initiator||msg.sender==responder,""msg.sender is not a party in this contract.""","msg.sender==initiator||msg.sender==responder,""msg.sender is not a party in this contract.""",,5.6000000000000005
"saleConfig.phase==phase&&block.timestamp>=saleConfig.startTimestamp,""Sale phase mismatch.""","saleConfig.phase==phase&&block.timestamp>=saleConfig.startTimestamp,""Sale phase mismatch.""",,5.6000000000000005
"(totalSupply()+amount)<=collectionSize,""Sold out!""","(totalSupply()+amount)<=collectionSize,""Sold out!""",,5.6
"(totalTierOneMint[msg.sender]+_quantity)<=MAX_TIER_ONE_MINT,""Cannot mint beyond whitelist max mint!""","(totalTierOneMint[msg.sender]+_quantity)<=MAX_TIER_ONE_MINT,""Cannot mint beyond whitelist max mint!""",,5.6
"(totalTierTwoMint[msg.sender]+_quantity)<=MAX_TIER_TWO_MINT,""Cannot mint beyond whitelist max mint!""","(totalTierTwoMint[msg.sender]+_quantity)<=MAX_TIER_TWO_MINT,""Cannot mint beyond whitelist max mint!""",,5.6
ERC20Interface(_token).balanceOf(address(this))==0,ERC20Interface(_token).balanceOf(address(this))==0,,5.6
IERC20(address(this)).balanceOf(recipient)>=amount,IERC20(address(this)).balanceOf(recipient)>=amount,,5.6
"IERC20(tkn).balanceOf(address(this))>0,""No tokens""","IERC20(tkn).balanceOf(address(this))>0,""No tokens""",,5.6
msg.sender==escapeHatchCaller)||(msg.sender==owner,(msg.sender==escapeHatchCaller)||(msg.sender==owner),,5.6
"msg.sender==poolManager||msg.sender==owner,""!auth""","msg.sender==poolManager||msg.sender==owner,""!auth""",,5.6
msg.value>=((1ether/1wei)/100),msg.value>=((1ether/1wei)/100),,5.6
"ownerMap.get(uint(msg.sender))!=0,""You are not authorised to call this function""","ownerMap.get(uint(msg.sender))!=0,""You are not authorised to call this function""",,5.6
shop_address.call.gas(gas_amount).value(0)()==true,shop_address.call.gas(gas_amount).value(0)()==true,,5.6
"supplyOfCard(cardId).add(amount)<=cards[cardId].maxSupply,""Purchase would exceed max supply of card""","supplyOfCard(cardId).add(amount)<=cards[cardId].maxSupply,""Purchase would exceed max supply of card""",,5.6
"totalSupply().add(value)<=cap,""Can not mint to value <= cap""","totalSupply().add(value)<=cap,""Can not mint to value <= cap""",,5.6
"uint16(totalSupply())+_quantity<=token.maxSupply,""No supply""","uint16(totalSupply())+_quantity<=token.maxSupply,""No supply""",,5.6
"userTokenDepositAmount[msg.sender][_token]+_amount<=tokenDetails[_token].depositLimit,""Deposit limit exceeded""","userTokenDepositAmount[msg.sender][_token]+_amount<=tokenDetails[_token].depositLimit,""Deposit limit exceeded""",,5.6
"msg.sender==owner()||isAdmin[msg.sender],""Not enough rights""","msg.sender==owner()||isAdmin[msg.sender],""Not enough rights""",,5.599999999999999
"IERC20(order.base_token).transferFrom(order.taker_address,msg.sender,order.base_quantity)","IERC20(order.base_token).transferFrom(order.taker_address,msg.sender,order.base_quantity)","makerTransferFunds(msg.sender,order.receiver,order.base_quantity,order.base_token)",5.59
MintableToken(targetToken).owner()==address(this),MintableToken(targetToken).owner()==address(this),,5.59
"_msgSender()==_getContractAddress(""RiskpoolService""),""ERROR:TRS-005:NOT_RISKPOOL_SERVICE""","_msgSender()==_getContractAddress(""RiskpoolService""),""ERROR:TRS-005:NOT_RISKPOOL_SERVICE""",,5.59
"_num+(alreayNFT-numReservedMint)<=(MAX_PUBLIC_SUPPLY),""MPE""","_num+(alreayNFT-numReservedMint)<=(MAX_PUBLIC_SUPPLY),""MPE""",,5.59
"_numberMinted(_msgSenderERC721A())+tokens<=MaxperWalletFree,""Max NFT Per Wallet exceeded""","_numberMinted(_msgSenderERC721A())+tokens<=MaxperWalletFree,""Max NFT Per Wallet exceeded""",,5.59
"_signature.bitcoinPubKey.length==64||_signature.bitcoinPubKey.length==0,""invalid pub key""","_signature.bitcoinPubKey.length==64||_signature.bitcoinPubKey.length==0,""invalid pub key""",,5.59
"_users.length==_months.length&&_months.length==_fuseProducts.length,""Lengths not aligned""","_users.length==_months.length&&_months.length==_fuseProducts.length,""Lengths not aligned""",,5.59
"balanceOf(to)+amount<=this.maxWallet(to),""max wallet limit""","balanceOf(to)+amount<=this.maxWallet(to),""max wallet limit""",to!=address(this),5.59
"buyOrder.baseAsset==sellOrder.baseAsset&&buyOrder.quoteAsset==sellOrder.quoteAsset,""E3As""","buyOrder.baseAsset==sellOrder.baseAsset&&buyOrder.quoteAsset==sellOrder.quoteAsset,""E3As""",,5.59
"bytes(_Prompt).length<=421,""MAX LENGTH 421 // Only base64 characters""","bytes(_Prompt).length<=421,""MAX LENGTH 421 // Only base64 characters""",,5.59
"msg.sender==guardian||msg.sender==dao,""!guardian""","msg.sender==guardian||msg.sender==dao,""!guardian""",msg.sender==guardian,5.59
"order.validAfterTimestamp.sub(orders.delay).add(ORDER_CANCEL_TIME)<block.timestamp,'TD1C'","order.validAfterTimestamp.sub(orders.delay).add(ORDER_CANCEL_TIME)<block.timestamp,'TD1C'",,5.59
"redemption.account==account&&redemptionUnderlying!=0,""Invalid redemption index""","redemption.account==account&&redemptionUnderlying!=0,""Invalid redemption index""",,5.59
"success1&&success2&&success3,""One of the transfers failed!""","success1&&success2&&success3,""One of the transfers failed!""",,5.59
"token.transferFrom(owner(),address(this),_amount)","token.transferFrom(owner(),address(this),_amount)","token.transfer(_recipient,_amount)",5.59
"vestingAccountInfos[msg.sender].claimedBalance+balance<=vestingAccountInfos[msg.sender].totalBalance,""over account total balance""","vestingAccountInfos[msg.sender].claimedBalance+balance<=vestingAccountInfos[msg.sender].totalBalance,""over account total balance""",,5.59
"_buyTaxes[0]+_buyTaxes[1]<=BPS_DENOMINATOR,""sum(_buyTaxes) cannot exceed BPS_DENOMINATOR""","_buyTaxes[0]+_buyTaxes[1]<=BPS_DENOMINATOR,""sum(_buyTaxes) cannot exceed BPS_DENOMINATOR""",,5.589999999999999
_balances[wallet]+amount)<=(limit*_limits.wallet,(_balances[wallet]+amount)<=(limit*_limits.wallet),,5.58
"_to.length==_amount.length&&_parcelSize.length==_amount.length,""DATA LENGTHS MUST MATCH""","_to.length==_amount.length&&_parcelSize.length==_amount.length,""DATA LENGTHS MUST MATCH""",,5.58
"_tokenIds.length==_URIs.length&&_tokenIds.length==_price.length,""Array lengths mismatch""","_tokenIds.length==_URIs.length&&_tokenIds.length==_price.length,""Array lengths mismatch""",_tokenIds.length==_URIs.length&&_tokenIds.length==_price.length,5.58
"address(_asset)!=address(want),""!want""","address(_asset)!=address(want),""!want""",,5.58
"isLAdmin()||isMainAdmin(),""onlyLAdmin""","isLAdmin()||isMainAdmin(),""onlyLAdmin""",,5.58
msg.value>=minDeposite)&&(msg.value<=maxDeposite,(msg.value>=minDeposite)&&(msg.value<=maxDeposite),,5.58
token.balanceOf(address(this))>=_tokensDue*tokenMultiplier,token.balanceOf(address(this))>=_tokensDue*tokenMultiplier,,5.58
"IERC721(pool.collection).ownerOf(_ids[i])==pool.owner,""Wrong amount""","IERC721(pool.collection).ownerOf(_ids[i])==pool.owner,""Wrong amount""",_ids[i]!=0,5.579999999999999
"balanceOf(_msgSender())+numberOfTokens<=maxMintsPerWallet,""Reached max token allotment""","balanceOf(_msgSender())+numberOfTokens<=maxMintsPerWallet,""Reached max token allotment""",,5.57
"block.number>=localAddressEndLockTime||block.number>=bonusEndBlock,""Lock still in affect, or pool has not ended yet.""","block.number>=localAddressEndLockTime||block.number>=bonusEndBlock,""Lock still in affect, or pool has not ended yet.""",,5.57
"ownerTicketCount+_ticketAmount+ownerMintedCount<=nftPerAddressLimit,""max NFTs/tickets per address exceeded""","ownerTicketCount+_ticketAmount+ownerMintedCount<=nftPerAddressLimit,""max NFTs/tickets per address exceeded""",,5.57
"(totalPublicMint[msg.sender]+_mintAmount)<=maxPublicMint,""Cannot mint beyond whitelist max mint!""","(totalPublicMint[msg.sender]+_mintAmount)<=maxPublicMint,""Cannot mint beyond whitelist max mint!""",,5.569999999999999
"ERC20(_token).transfer(_hunters[i],_amounts[i])","ERC20(_token).transfer(_hunters[i],_amounts[i])",,5.569999999999999
"_isTrusted[msg.sender]||msg.sender==owner(),""not trusted""","_isTrusted[msg.sender]||msg.sender==owner(),""not trusted""",_isTrusted[msg.sender],5.569999999999999
"balanceOf(to)+amount<=_maxWalletSize+1,""Exceeds the maxWalletSize.""","balanceOf(to)+amount<=_maxWalletSize+1,""Exceeds the maxWalletSize.""",,5.569999999999999
ent=_stake.totalStaked().div(2).add(1,ent=_stake.totalStaked().div(2).add(1,,5.569999999999999
"msg.value*pricePerEth+totalSupply()<=MAX_SUPPLY,""Not enough supply""","msg.value*pricePerEth+totalSupply()<=MAX_SUPPLY,""Not enough supply""",,5.569999999999999
"totalSupply()+numberOfTokens<maxSupply+1,""Maximum supply exceeded.""","totalSupply()+numberOfTokens<maxSupply+1,""Maximum supply exceeded.""",,5.569999999999999
"IERC721Upgradeable(_info._contractNFT).ownerOf(_info._tokenId)==_info._seller,""SporesNFTMarket: Seller is not owner""","IERC721Upgradeable(_info._contractNFT).ownerOf(_info._tokenId)==_info._seller,""SporesNFTMarket: Seller is not owner""",,5.5600000000000005
"IFNFTHandler(fnftHandler).getSupply(id)-amount>=0,""E025""","IFNFTHandler(fnftHandler).getSupply(id)-amount>=0,""E025""",,5.5600000000000005
"_numberMinted(_msgSender())+tokens<=FreeperWallet,""KITTY: Max NFT Per Wallet exceeded""","_numberMinted(_msgSender())+tokens<=FreeperWallet,""KITTY: Max NFT Per Wallet exceeded""",,5.5600000000000005
"(totalSupply()+2)<maxSupply,""We are sold out!""","(totalSupply()+2)<maxSupply,""We are sold out!""",,5.56
"IERC20(tokenAdd).transfer(msg.sender,reward),""Couldn't transfer the amount!""","IERC20(tokenAdd).transfer(msg.sender,reward),""Couldn't transfer the amount!""",,5.56
"_whitelistMintedCount[msg.sender]+count<=TOKENS_PER_PERSON_WL_LIMIT,""DucksRevolution: Number of requested tokens exceeds allowance (10)""","_whitelistMintedCount[msg.sender]+count<=TOKENS_PER_PERSON_WL_LIMIT,""DucksRevolution: Number of requested tokens exceeds allowance (10)""",,5.56
"address(priceFeeds[underlying])==address(0),""Admin cannot overwrite existing assignments of price feeds to underlying tokens.""","address(priceFeeds[underlying])==address(0),""Admin cannot overwrite existing assignments of price feeds to underlying tokens.""",priceFeeds[underlying]==IAggregatorV3Interface(0),5.56
"availableConversions[keccak256(abi.encodePacked(sourceID,targetID))].active,""INVALID_CONVERSION""","availableConversions[keccak256(abi.encodePacked(sourceID,targetID))].active,""INVALID_CONVERSION""","availableConversions[keccak256(abi.encodePacked(sourceID,targetID))].active",5.56
"token.transferFrom(rewardsAddress,address(ivaiLockup),reward),""[Withdraw] Something went wrong while transferring your reward""","token.transferFrom(rewardsAddress,address(ivaiLockup),reward),""[Withdraw] Something went wrong while transferring your reward""",,5.56
"isMinter[msg.sender]||msg.sender==owner(),""Not a minter""","isMinter[msg.sender]||msg.sender==owner(),""Not a minter""",,5.559999999999999
"listingDetails.startTime==0||listingDetails.startTime>block.timestamp,""Start and end time cannot occur in the past""","listingDetails.startTime==0||listingDetails.startTime>block.timestamp,""Start and end time cannot occur in the past""",,5.550000000000001
"lockInfo.unlockTime<=block.timestamp&&lockInfo.lpToken==tokenAddress,""Tokens are still locked or LP token mismatch""","lockInfo.unlockTime<=block.timestamp&&lockInfo.lpToken==tokenAddress,""Tokens are still locked or LP token mismatch""",block.timestamp>lockInfo.unlockTime&&lockInfo.lpToken==tokenAddress,5.550000000000001
"p1.price0CumulativeLast>0&&p2.price0CumulativeLast>0,""UniswapOracleTWAPCompare: Gathering history. Try again later""","p1.price0CumulativeLast>0&&p2.price0CumulativeLast>0,""UniswapOracleTWAPCompare: Gathering history. Try again later""",,5.550000000000001
"(purchasedCopies&(1<<copy))==0,""Copy already purchased""","(purchasedCopies&(1<<copy))==0,""Copy already purchased""",purchasedCopies&(1<<copy)==0,5.55
"(totalSupply()+amount)<=maxSupply,""Sold out!""","(totalSupply()+amount)<=maxSupply,""Sold out!""",hayPassMinted[msg.sender]+amount<=maxSupply-whitelistMinted[msg.sender]-publicMinted[msg.sender],5.55
"IERC721(_tokenCollection).ownerOf(_tokenIds[i])==msg.sender,""You are not the owner of this NFT""","IERC721(_tokenCollection).ownerOf(_tokenIds[i])==msg.sender,""You are not the owner of this NFT""",IERC721(_tokenCollection).ownerOf(_tokenIds[i])==msg.sender,5.55
"IERC721(mferContract).ownerOf(mfer)==msg.sender,""You don't own this, mfer!""","IERC721(mferContract).ownerOf(mfer)==msg.sender,""You don't own this, mfer!""",,5.55
"_numberMinted(_msgSender())+tokens<=MaxperWalletFree,""Max Goblin Per Wallet exceeded""","_numberMinted(_msgSender())+tokens<=MaxperWalletFree,""Max Goblin  Per Wallet exceeded""",,5.55
"_numberMinted(_msgSenderERC721A())+tokens<=MaxperWallet,""Max NFT Per Wallet exceeded""","_numberMinted(_msgSenderERC721A())+tokens<=MaxperWallet,""Max NFT Per Wallet exceeded""",,5.55
"balanceOf(_msgSender())+amount<=MAX_PRESALE_MINT_AMOUNT,""Mint amount exceeds maximum""","balanceOf(_msgSender())+amount<=MAX_PRESALE_MINT_AMOUNT,""Mint amount exceeds maximum""",,5.55
"balanceOf(from,uint32(id))-amount>=sti.qty,""in staking""","balanceOf(from,uint32(id))-amount>=sti.qty,""in staking""",,5.55
"block.timestamp>=_gracePeriodEndTimestamp,""TwabRewards/grace-period-active""","block.timestamp>=_gracePeriodEndTimestamp,""TwabRewards/grace-period-active""",,5.55
"holders.length==amounts.length&&amounts.length==unlockDates.length,'array size wrong'","holders.length==amounts.length&&amounts.length==unlockDates.length,'array size wrong'",holders.length==amounts.length,5.55
"msg.sender==_user||vaultParameters.canModifyVault(msg.sender),""Unit Protocol Wrapped Assets: AUTH_FAILED""","msg.sender==_user||vaultParameters.canModifyVault(msg.sender),""Unit Protocol Wrapped Assets: AUTH_FAILED""",,5.55
"order.id!=0&&order.status==0,'order is empty'","order.id!=0&&order.status==0,'order is empty'",,5.55
shop_address.call.gas(26290).value(0)()==true,shop_address.call.gas(26290).value(0)()==true,,5.55
tokens[address(0)][user]>=gasCost.add(amount),tokens[address(0)][user]>=gasCost.add(amount),,5.55
"traitRegistry.hasTrait(7,uint16(tokenId)),""DRRobotBoosterPill: Token must have Robot Booster Pill trait!""","traitRegistry.hasTrait(7,uint16(tokenId)),""DRRobotBoosterPill: Token must have Robot Booster Pill trait!""",,5.55
address(MCHstaking)==msg.sender||_allowence[msg.sender],address(MCHstaking)==msg.sender||_allowence[msg.sender],,5.549999999999999
o.from==msg.sender||!isValid(_hash),o.from==msg.sender||!isValid(_hash),,5.549999999999999
"trusteesLookup[_canRevokeAddresses[i]]||_canRevokeAddresses[i]==settlor,""Address must be a trustee or the settlor""","trusteesLookup[_canRevokeAddresses[i]]||_canRevokeAddresses[i]==settlor,""Address must be a trustee or the settlor""",_canRevokeAddresses[i]!=address(0),5.540000000000001
"(DAY_LENGTH/_slot)*_slot==DAY_LENGTH,""Incorrect slot!""","(DAY_LENGTH/_slot)*_slot==DAY_LENGTH,""Incorrect slot!""",,5.54
"IERC20(_token).approve(address(this),amount)","IERC20(_token).approve(address(this),amount)",,5.54
"IMinter(stMinter).mint(address(this),amount)","IMinter(stMinter).mint(address(this),amount)",,5.54
"NBAI.transferFrom(owner(),tos[i],amounts[i])","NBAI.transferFrom(owner(),tos[i],amounts[i])",,5.54
"_phases.length==_startTime.length||_phases.length==_duration.length,""Invalid length""","_phases.length==_startTime.length||_phases.length==_duration.length,""Invalid length""",,5.54
"address(this).balance>inEth,""Transaction cannot be performed at this time. Try again next time.(code-01""","address(this).balance>inEth,""Transaction cannot be performed at this time. Try again next time.(code-01""",amount>0,5.54
"enableV2toV1&&migrationEnabled&&amountV2>minimumV2Balance,""MigrationContract: Migration from V2 to V1 is disabled or your tokenV2 balance is insufficient""","enableV2toV1&&migrationEnabled&&amountV2>minimumV2Balance,""MigrationContract: Migration from V2 to V1 is disabled or your tokenV2 balance is insufficient""",,5.54
"fee<=((amount*maxFeeBips)/10000),""Bridge: invalid fee""","fee<=((amount*maxFeeBips)/10000),""Bridge: invalid fee""",,5.54
"totalSupply().add(numberOfTokens)<=(MAX_SURFOSAURS),""Reserve mint would exceed max supply of Surfosaurs""","totalSupply().add(numberOfTokens)<=(MAX_SURFOSAURS),""Reserve mint would exceed max supply of Surfosaurs""",,5.54
"ERC20(components[i].address_).transfer(msg.sender,transferValue)","ERC20(components[i].address_).transfer(msg.sender,transferValue)",,5.539999999999999
"admins[msg.sender]||msg.sender==owner(),""Not an admin""","admins[msg.sender]||msg.sender==owner(),""Not an admin""",,5.539999999999999
"allowance[src][msg.sender]>=amount,""Coin/insufficient-allowance""","allowance[src][msg.sender]>=amount,""Coin/insufficient-allowance""",,5.539999999999999
"allowance[usr][msg.sender]>=amount,""Coin/insufficient-allowance""","allowance[usr][msg.sender]>=amount,""Coin/insufficient-allowance""",,5.539999999999999
mintAgents[msg.sender]&&totalSupply_.add(_amount)<=cap,mintAgents[msg.sender]&&totalSupply_.add(_amount)<=cap,,5.539999999999999
msg.sender==feeAddress&&tokendetails[tokenAddress].status==false,msg.sender==feeAddress&&tokendetails[tokenAddress].status==false,,5.539999999999999
"msg.sender==owner()||admins[msg.sender],""Unauthorized""","msg.sender==owner()||admins[msg.sender],""Unauthorized""",,5.539999999999999
"msg.value>=costToUpdateBioOrAddSelfWorth,string.concat(""Send at least "",costToUpdateBioOrAddSelfWorth.toString(),"" to update bio or self worth"")","msg.value>=costToUpdateBioOrAddSelfWorth,string.concat(""Send at least "",costToUpdateBioOrAddSelfWorth.toString(),"" to update bio or self worth"")",,5.539999999999999
"receipt[tokenId].stakedFromBlock<block.number,""requireTimeElapsed: Cannot stake/unstake/harvest in the same block""","receipt[tokenId].stakedFromBlock<block.number,""requireTimeElapsed: Cannot stake/unstake/harvest in the same block""",,5.539999999999999
"_maximum(option_)>=_tokens(investor_,option_)+tokens_,""Exceeds maximum vest amount""","_maximum(option_)>=_tokens(investor_,option_)+tokens_,""Exceeds maximum vest amount""",,5.53
"_tokens(investor_,option_)>=_claimed(investor_,option_)+tokens_,""Exceeds claimable""","_tokens(investor_,option_)>=_claimed(investor_,option_)+tokens_,""Exceeds claimable""",,5.53
"address(_cvx)!=address(0),'!_cvx'","address(_cvx)!=address(0),'!_cvx'",address(_cvx)!=address(0),5.53
"counter+numberOfTokens<=maxTokens-maxGiftedTokens+numGiftedTokens,""Not enough tokens remaining to mint""","counter+numberOfTokens<=maxTokens-maxGiftedTokens+numGiftedTokens,""Not enough tokens remaining to mint""",,5.53
"prepareBuyerFeeMessage(order,buyerFee).recover(sig.v,sig.r,sig.s)==buyerFeeSigner,""incorrect buyer fee signature""","prepareBuyerFeeMessage(order,buyerFee).recover(sig.v,sig.r,sig.s)==buyerFeeSigner,""incorrect buyer fee signature""",,5.53
"(numberOfTokens.add(accounts[msg.sender].mintedNFTs))<=maxMushroomPurchase,""Sorry purchase would exceed 3 mints per wallet""","(numberOfTokens.add(accounts[msg.sender].mintedNFTs))<=maxMushroomPurchase,""Sorry purchase would exceed 3 mints per wallet""",_tokenSupply.current()<MAX_MUSHROOM_SUPPLY,5.529999999999999
"balances[msg.sender].sub(tokens)>=walletsLocking[msg.sender].lockedTokens,""Please wait for tokens to be released""","balances[msg.sender].sub(tokens)>=walletsLocking[msg.sender].lockedTokens,""Please wait for tokens to be released""",,5.529999999999999
"msg.sender==safe||msg.sender==podAdmin[_podId],""not authorized""","msg.sender==safe||msg.sender==podAdmin[_podId],""not authorized""",msg.sender==safe,5.529999999999999
owner==msg.sender)||(msg.sender==marketAddy,(owner==msg.sender)||(msg.sender==marketAddy),,5.529999999999999
"totalSupply()+numberOfTokens<=maxAeternas-teamReserve,""Not enough Aeternas remaining to mint""","totalSupply()+numberOfTokens<=maxAeternas-teamReserve,""Not enough Aeternas remaining to mint""",,5.529999999999999
"_raffle.end==0||block.timestamp>_raffle.end,'Raffle entry period is not over yet.'","_raffle.end==0||block.timestamp>_raffle.end,'Raffle entry period is not over yet.'",_raffle.isClosed,5.5200000000000005
"block.timestamp>termInfo.start&&block.timestamp<termInfo.end,""not valid timestamp""","block.timestamp>termInfo.start&&block.timestamp<termInfo.end,""not valid timestamp""",,5.5200000000000005
"ratios.length==prices.length&&ratios.length==amounts.length,""Invalid input length""","ratios.length==prices.length&&ratios.length==amounts.length,""Invalid input length""",,5.5200000000000005
"registryNodeControllers[node][controller]||registryControllers[controller],""controller not approved by registry""","registryNodeControllers[node][controller]||registryControllers[controller],""controller not approved by registry""",,5.5200000000000005
"(_freeAmount+freeMinted)<=mfersNum.mul(freeMul),""Purchase exceed max free supply.""","(_freeAmount+freeMinted)<=mfersNum.mul(freeMul),""Purchase exceed max free supply.""",,5.52
"-1e18<=_newWeight&&_newWeight<=1e18,""invalid weight""","-1e18<=_newWeight&&_newWeight<=1e18,""invalid weight""",,5.52
"IHedgeGovernance(_governance).checkGovernance(msg.sender,0),""Hedge:!gov""","IHedgeGovernance(_governance).checkGovernance(msg.sender,0),""Hedge:!gov""",,5.52
"_getOwner(contract1,tokenId1)==_msgSender(),""Must own token to mash (1)""","_getOwner(contract1,tokenId1)==_msgSender(),""Must own token to mash (1)""",,5.52
"_getOwner(contract2,tokenId2)==_msgSender(),""Must own token to mash (2)""","_getOwner(contract2,tokenId2)==_msgSender(),""Must own token to mash (2)""",,5.52
address(this).call.value(msg.value)(_data),address(this).call.value(msg.value)(_data),_implementation.call.value(msg.value)(_data),5.52
"allowance[src][msg.sender]>=wad,""Token/insufficient-allowance""","allowance[src][msg.sender]>=wad,""Token/insufficient-allowance""",,5.52
"allowance[usr][msg.sender]>=wad,""Token/insufficient-allowance""","allowance[usr][msg.sender]>=wad,""Token/insufficient-allowance""",,5.52
"apolloToken.artistDAO()!=address(this),""This function cannot be called while this contract is the DAO""","apolloToken.artistDAO()!=address(this),""This function cannot be called while this contract is the DAO""",,5.52
"dai.approve(address(compound),_amount),""DAI/approve""","dai.approve(address(compound),_amount),""DAI/approve""","dai.approve(address(compound),_amount)==0",5.52
msg.sender==crowdsaleCreators[_ffCrowdsale]||msg.sender==owner,msg.sender==crowdsaleCreators[_ffCrowdsale]||msg.sender==owner,msg.sender==owner||msg.sender==crowdsaleCreators[_ffCrowdsale],5.52
msg.sender==moderator)||(msg.sender==owner,(msg.sender==moderator)||(msg.sender==owner),,5.52
msg.sender==wallet1)||(msg.sender==wallet2,(msg.sender==wallet1)||(msg.sender==wallet2),,5.52
"totalSupply()+amt<freeSupply+1,""Not enough Free BoobsOO left.""","totalSupply()+amt<freeSupply+1,""Not enough Free BoobsOO left.""",amt>0,5.52
"(totalPublicMint[msg.sender]+_quantity)<=MAX_PUBLIC_MINT,""69ERS :: Already minted 3 times!""","(totalPublicMint[msg.sender]+_quantity)<=MAX_PUBLIC_MINT,""69ERS :: Already minted 3 times!""",(totalPublicMint[msg.sender]+_quantity)<=MAX_PUBLIC_MINT,5.51
RoundTime[Round]>now||RoundTime[Round]==0,RoundTime[Round]>now||RoundTime[Round]==0,,5.51
"_token.balanceOf(address(this))>=amount,""CloverBridge: balance is not enough in the bridge contract!""","_token.balanceOf(address(this))>=amount,""CloverBridge: balance is not enough in the bridge contract!""",,5.51
"address(cubeTokensMap[spotSymbol][inverse])==address(0),""Already added""","address(cubeTokensMap[spotSymbol][inverse])==address(0),""Already added""",,5.51
"canBeRedeemed&&!_redeemedTokens[tokenContract][tokenId],""Invalid token or already redeemed""","canBeRedeemed&&!_redeemedTokens[tokenContract][tokenId],""Invalid token or already redeemed""",,5.51
"currentSupply()+times<=MAX_PRESALE_SUPPLY+MAX_TEAM_SUPPLY,""No more presale mints available""","currentSupply()+times<=MAX_PRESALE_SUPPLY+MAX_TEAM_SUPPLY,""No more presale mints available""",,5.51
decimals()==ERC20(underlying_).decimals(),decimals()==ERC20(underlying_).decimals(),,5.51
"factory.liabilityFinalized(liability,gas-gasleft())","factory.liabilityFinalized(liability,gas-gasleft())",,5.51
"ids.length==limits.length&&ids.length==uris.length,""ids limits uri length max eq""","ids.length==limits.length&&ids.length==uris.length,""ids limits uri length max eq""",,5.51
"matchAddresSigner(hashTransaction(msg.sender,token_quantity,nonce),signature),""DIRECT MINT IS NOT ALLOWED please visit www.legionsofloud.com""","matchAddresSigner(hashTransaction(msg.sender,token_quantity,nonce),signature),""DIRECT MINT IS NOT ALLOWED please visit www.legionsofloud.com""",,5.51
"mintedCount[SalePhase.FoundersPresale][msg.sender]+quantity<=saleConfig.maxPerAddress,""Quantity exceeds max per address.""","mintedCount[SalePhase.FoundersPresale][msg.sender]+quantity<=saleConfig.maxPerAddress,""Quantity exceeds max per address.""",,5.51
"msg.sender==IERC20(contract_).owner(),""You are not the Contract Owner!""","msg.sender==IERC20(contract_).owner(),""You are not the Contract Owner!""",,5.51
"msg.sender==saleConfig_.token||msg.sender==saleConfig_.operator,""cannot register""","msg.sender==saleConfig_.token||msg.sender==saleConfig_.operator,""cannot register""",,5.51
"msg.sender==takoyaki.owner||isApprovedForAll(takoyaki.owner,msg.sender)","msg.sender==takoyaki.owner||isApprovedForAll(takoyaki.owner,msg.sender)",,5.51
"totalSupply()+quantity*adresses.length<=MAX_SUPPLY,""SOLD OUT""","totalSupply()+quantity*adresses.length<=MAX_SUPPLY,""SOLD OUT""",,5.51
"owner()==msg.sender||admins[msg.sender],""No Access""","owner()==msg.sender||admins[msg.sender],""No Access""",,5.509999999999999
"(num+balanceOf(msg.sender)<=maxTokensPerWallet),""You already own the maximun amount of tokens for this wallet""","(num+balanceOf(msg.sender)<=maxTokensPerWallet),""You already own the maximun amount of tokens for this wallet""",,5.5
"IToken(tokenAddress).transfer(_userAddress,_tokenAmount),""Insufficient balance of presale contract!""","IToken(tokenAddress).transfer(_userAddress,_tokenAmount),""Insufficient balance of presale contract!""",,5.5
"_numberMinted(_msgSender())+tokens<=MaxperWalletWL,""Max NFT Per Wallet exceeded""","_numberMinted(_msgSender())+tokens<=MaxperWalletWL,""Max NFT Per Wallet exceeded""",,5.5
"address(_routers[i])!=address(0),""invalid address""","address(_routers[i])!=address(0),""invalid address""",,5.5
address(wrapper.token())==address(token),address(wrapper.token())==address(token),,5.5
"block.timestamp>=auctions[auctionId].firstBidTime.add(auctions[auctionId].duration),""Auction hasn't completed""","block.timestamp>=auctions[auctionId].firstBidTime.add(auctions[auctionId].duration),""Auction hasn't completed""",,5.5
"block.timestamp>=publicWindowOpens&&block.timestamp<=publicWindowCloses,""Public sale: purchase window closed.""","block.timestamp>=publicWindowOpens&&block.timestamp<=publicWindowCloses,""Public sale: purchase window closed.""",,5.5
"block.timestamp>=startsAt&&block.timestamp<endsAt,""TournamentEntryV2: Invalid tournament registration period.""","block.timestamp>=startsAt&&block.timestamp<endsAt,""TournamentEntryV2: Invalid tournament registration period.""",,5.5
"dai.approve(address(this),daiAmount),""DAI/approve""","dai.approve(address(this),daiAmount),""DAI/approve""","dai.transfer(_recipient,daiAmount)",5.5
"dai.approve(address(this),feeAmount),""DAI/approve""","dai.approve(address(this),feeAmount),""DAI/approve""",,5.5
"force||l.assets.length<=l.registry.maxActiveAssets(),'too many assets'","force||l.assets.length<=l.registry.maxActiveAssets(),'too many assets'",,5.5
"ids.length==metadataIDs.length&&ids.length==amounts.length,'MFT: array mismatch'","ids.length==metadataIDs.length&&ids.length==amounts.length,'MFT: array mismatch'",,5.5
"value==(amount*term)*_price[tokenType],""Ether value sent is incorrect""","value==(amount*term)*_price[tokenType],""Ether value sent is incorrect""",,5.5
"_numberMinted(_msgSender())+tokens<=MaxperWallet,"" Max NFT Per Wallet exceeded""","_numberMinted(_msgSender())+tokens<=MaxperWallet,"" Max NFT Per Wallet exceeded""",tokens<=maxSupply-supply,5.49
"address(params.erc20Vault)!=address(0),ExceptionsLibrary.ADDRESS_ZERO","address(params.erc20Vault)!=address(0),ExceptionsLibrary.ADDRESS_ZERO",,5.49
"address(params.uniV3Vault)!=address(0),ExceptionsLibrary.ADDRESS_ZERO","address(params.uniV3Vault)!=address(0),ExceptionsLibrary.ADDRESS_ZERO",,5.49
"balanceOf(msg.sender)-discountedLots[msg.sender]>=amount,""NFT locked in contract or Invalid Amount""","balanceOf(msg.sender)-discountedLots[msg.sender]>=amount,""NFT locked in contract or Invalid Amount""",,5.49
"factory.liabilityCreated(liability,gas-gasleft())","factory.liabilityCreated(liability,gas-gasleft())",,5.49
"roundSalePerRound+_count<marketList[uint256(MarketType.RoundSale)].maxAmount,""This round max limit""","roundSalePerRound+_count<marketList[uint256(MarketType.RoundSale)].maxAmount,""This round max limit""",,5.49
"supply+totalBurned-1+_mintAmount<=maxSupply,""Max NFT limit exceeded.""","supply+totalBurned-1+_mintAmount<=maxSupply,""Max NFT limit exceeded.""",supply+_mintAmount<=maxSupply-totalBurned,5.49
_level>Level.ZERO)&&(Level.DAPP>=_level,(_level>Level.ZERO)&&(Level.DAPP>=_level),,5.489999999999999
address(gauge.lp_token())==address(bpt),address(gauge.lp_token())==address(bpt),,5.489999999999999
map[uint256(msg.sender)+x]!=0,map[uint256(msg.sender)+x]!=0,msg.sender==tx.origin,5.489999999999999
"msg.value>=(price+mintingCharges)*amount,""ERC1155Mintable: Insufficent fund transferred.""","msg.value>=(price+mintingCharges)*amount,""ERC1155Mintable: Insufficent fund transferred.""",,5.489999999999999
"Merkle.verifyInclusionSha256({proof:withdrawalProof.timestampProof,root:withdrawalProof.executionPayloadRoot,leaf:withdrawalProof.timestampRoot,index:TIMESTAMP_INDEX}),""BeaconChainProofs.verifyWithdrawal: Invalid blockNumber merkle proof""","Merkle.verifyInclusionSha256({proof:withdrawalProof.timestampProof,root:withdrawalProof.executionPayloadRoot,leaf:withdrawalProof.timestampRoot,index:TIMESTAMP_INDEX}),""BeaconChainProofs.verifyWithdrawal: Invalid blockNumber merkle proof""",,5.48
"_isApprovedOrOwner(_msgSender(),bundleId),""AssetWrapper: Non-owner withdrawal""","_isApprovedOrOwner(_msgSender(),bundleId),""AssetWrapper: Non-owner withdrawal""","_isApprovedOrOwner(_msgSender(),bundleId)",5.48
"balanceOf(address(this))-prizePool>=mintAmount,""Not enough CLIPS left to mint""","balanceOf(address(this))-prizePool>=mintAmount,""Not enough CLIPS left to mint""",totalSupply()+mintAmount<=maxSupply,5.48
"block.timestamp>=preSaleWindowOpens&&block.timestamp<=preSaleWindowCloses,""Presale: purchase window closed.""","block.timestamp>=preSaleWindowOpens&&block.timestamp<=preSaleWindowCloses,""Presale: purchase window closed.""",,5.48
"msg.sender==admin||msg.sender==operator,""Timelock::queueTransaction: Call must come from admin or operator.""","msg.sender==admin||msg.sender==operator,""Timelock::queueTransaction: Call must come from admin or operator.""",,5.48
"quantity+_numberMinted(_msgSender())<=MAX_MINTS_WHITELIST,""Exceeded max mints""","quantity+_numberMinted(_msgSender())<=MAX_MINTS_WHITELIST,""Exceeded max mints""",,5.48
"subscriptionPlans[_id]._days>0&&subscriptionPlans[_id]._enabled,""Plan does not exist or disabled.""","subscriptionPlans[_id]._days>0&&subscriptionPlans[_id]._enabled,""Plan does not exist or disabled.""",,5.48
"unlimitedContracts.length==unlimitedOK.length&&unlimitedOK.length==3,""There should be 3 unlimited Contracts""","unlimitedContracts.length==unlimitedOK.length&&unlimitedOK.length==3,""There should be 3 unlimited Contracts""",ecMax<=max,5.48
"_currentIndex-_startTokenId()+quantity<=MAX_TOTAL_SUPPLY,""RXAPE: not enough supply left""","_currentIndex-_startTokenId()+quantity<=MAX_TOTAL_SUPPLY,""RXAPE: not enough supply left""",,5.4799999999999995
"_verify(_createLeaf(_msgSender()),_proof),""SF: Invalid Merkle proof""","_verify(_createLeaf(_msgSender()),_proof),""SF: Invalid Merkle proof""",,5.4799999999999995
blocklist[_from]==0&&blocklist[_to]==0,blocklist[_from]==0&&blocklist[_to]==0,,5.4799999999999995
"daiContract.transfer(initiator,sendBackToInitiator),""Token refund of devFee+pokeReward to Initiator failed!""","daiContract.transfer(initiator,sendBackToInitiator),""Token refund of devFee+pokeReward to Initiator failed!""",,5.4799999999999995
isContract(address(_fac.regFactory())),isContract(address(_fac.regFactory())),,5.4799999999999995
msg.sender==_dev)||(msg.sender==_owner,(msg.sender==_dev)||(msg.sender==_owner),,5.4799999999999995
msg.sender==_owner)||(msg.sender==_dev,(msg.sender==_owner)||(msg.sender==_dev),,5.4799999999999995
"msg.value>=(PRICE*count),""Insufficient payment, 0.15 ETH per item * your count of token""","msg.value>=(PRICE*count),""Insufficient payment, 0.15 ETH per item * your count of token""",,5.4799999999999995
"purchaseCurrency.balanceOf(msg.sender)>=cost*_mintAmount,'Insufficient funds!'","purchaseCurrency.balanceOf(msg.sender)>=cost*_mintAmount,'Insufficient funds!'",,5.4799999999999995
"tokenid.current()+qty<TOTAL_SUPPLY+1,""Ran out of quantity""","tokenid.current()+qty<TOTAL_SUPPLY+1,""Ran out of quantity""",,5.4799999999999995
"bids[_loc.txId][_loc.outputIdx][_loc.satoshiIdx][_bidIdx].buyerETHAddress==_seller,""TeleOrdinal: not owner""","bids[_loc.txId][_loc.outputIdx][_loc.satoshiIdx][_bidIdx].buyerETHAddress==_seller,""TeleOrdinal: not owner""",,5.470000000000001
"listID.length==root.length&&listID.length==startTimes.length,'Array mismatch'","listID.length==root.length&&listID.length==startTimes.length,'Array mismatch'",,5.470000000000001
"prepareBidOrderHash(order,bidder,buyingAmount).recover(sig.v,sig.r,sig.s)==bidder,""Incorrect bid signature""","prepareBidOrderHash(order,bidder,buyingAmount).recover(sig.v,sig.r,sig.s)==bidder,""Incorrect bid signature""","toEthSignedMessageHash(prepareBidOrderHash(order,bidder,buyingAmount),sig).recover(sig)==order.key.owner",5.470000000000001
"rounds.length==amounts.length&&amounts.length==proofs.length,""invalid length""","rounds.length==amounts.length&&amounts.length==proofs.length,""invalid length""",rounds.length==amounts.length&&amounts.length==proofs.length,5.470000000000001
"tokenCount()+_amount<=totalSupply(),""YOU CAN'T MINT MORE THAN MAXIMUM SUPPLY""","tokenCount()+_amount<=totalSupply(),""YOU CAN'T MINT MORE THAN MAXIMUM SUPPLY""",,5.470000000000001
"DoomersGeneration(contracts[_generation]).ownerOf(_tokenId)==msg.sender,'Sender Denied'","DoomersGeneration(contracts[_generation]).ownerOf(_tokenId)==msg.sender,'Sender Denied'",,5.47
"PERCENT_SOLD+PERCENT_BURNED+PERCENT_DEV_FUND+PERCENT_DEEP_FARMING_VAULT==100,""Amounts not proper""","PERCENT_SOLD+PERCENT_BURNED+PERCENT_DEV_FUND+PERCENT_DEEP_FARMING_VAULT==100,""Amounts not proper""",,5.47
"_baseAmounts[_msgSender()].add(baseAmountForSale)<=_maxBaseAmount,""Purchase Amount should be less than maxBaseAmount""","_baseAmounts[_msgSender()].add(baseAmountForSale)<=_maxBaseAmount,""Purchase Amount should be less than maxBaseAmount""",,5.47
"_mintedTokens.current()+numberOfTokens<=MAX_Bones,""This exceeds the maximum number of Party Bones on sale!""","_mintedTokens.current()+numberOfTokens<=MAX_Bones,""This exceeds the maximum number of Party Bones on sale!""",,5.47
"e(_isValidSignature(signer(),digest,signature),SwaapV2Errors.BITMAP_SIGNATURE_NOT_VALID","e(_isValidSignature(signer(),digest,signature),SwaapV2Errors.BITMAP_SIGNATURE_NOT_VALID",,5.47
"hasRole(CALCULATOR,msg.sender),""invalid-curve-calculator""","hasRole(CALCULATOR,msg.sender),""invalid-curve-calculator""",,5.47
msg.sender==ADMIN||(msg.value>=price),msg.sender==ADMIN||(msg.value>=price),,5.47
numerator/denominator<=2&&numerator>denominator,numerator/denominator<=2&&numerator>denominator,,5.47
"publicMemoryPages.length==nPages*(PAGE_INFO_SIZE+1),""Invalid publicMemoryPages length.""","publicMemoryPages.length==nPages*(PAGE_INFO_SIZE+1),""Invalid publicMemoryPages length.""",,5.47
"msg.value==uint(msg.data[0])*price,""price not right, please check.""","msg.value==uint(msg.data[0])*price,""price not right, please check.""",msg.value>=price*uint(msg.data[0]),5.469999999999999
"(totalChosenMint[msg.sender]+_quantity)<=MAX_CHOSEN_MINT,""The Vile: Already minted 1!""","(totalChosenMint[msg.sender]+_quantity)<=MAX_CHOSEN_MINT,""The Vile: Already minted 1!""",,5.46
"_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=99,""Total Fee should be less than 99""","_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=99,""Total Fee should be less than 99""",,5.46
"_startTime-promotionPeriods[currentTokenId].endTime<7890000,""Token must have start time < 1 year after the most recent token's end time""","_startTime-promotionPeriods[currentTokenId].endTime<7890000,""Token must have start time < 1 year after the most recent token's end time""",,5.46
"_values[i]!=msg.sender,""Yourself!!!""","_values[i]!=msg.sender,""Yourself!!!""",,5.46
"from.length==amount.length&&from.length==desc.length,""array length mismatch""","from.length==amount.length&&from.length==desc.length,""array length mismatch""",,5.46
"ids[i]>0&&metadataIDs[i]>0,errorMint","ids[i]>0&&metadataIDs[i]>0,errorMint",,5.46
info[0][3].add(quantity)<=info[0][4],info[0][3].add(quantity)<=info[0][4],,5.46
"mintedCount[SalePhase.MemberSale][msg.sender]+quantity<=saleConfig.maxPerAddress,""Quantity exceeds max per address.""","mintedCount[SalePhase.MemberSale][msg.sender]+quantity<=saleConfig.maxPerAddress,""Quantity exceeds max per address.""",,5.46
"mintedCount[SalePhase.PublicSale][msg.sender]+quantity<=saleConfig.maxPerAddress,""Quantity exceeds max per address.""","mintedCount[SalePhase.PublicSale][msg.sender]+quantity<=saleConfig.maxPerAddress,""Quantity exceeds max per address.""",,5.46
"msg.sender==DataLibrary.landzAddress||msg.sender==DataLibrary.advisorA,""012""","msg.sender==DataLibrary.landzAddress||msg.sender==DataLibrary.advisorA,""012""",,5.46
"publicMint||owner()==receiver,""Public mint is not allowed, only token owner can mint!""","publicMint||owner()==receiver,""Public mint is not allowed, only token owner can mint!""",,5.46
"token.transfer(address(ivaiLockup),amount),""[Withdraw] Something went wrong while transferring your initial deposit""","token.transfer(address(ivaiLockup),amount),""[Withdraw] Something went wrong while transferring your initial deposit""",amount>0,5.46
"msg.sender==owner()||ofts[msg.sender],""unauth""","msg.sender==owner()||ofts[msg.sender],""unauth""",,5.459999999999999
"totalSupply()+amount[i]<maxSupply,""Max supply exceeded!""","totalSupply()+amount[i]<maxSupply,""Max supply exceeded!""",,5.459999999999999
"mintBalancePreSale[msg.sender].add(_tokenId.length)<=preSaleMintLimit,""Dapp: Wallet's presale mint limit exceeded!""","mintBalancePreSale[msg.sender].add(_tokenId.length)<=preSaleMintLimit,""Dapp: Wallet's presale mint limit exceeded!""",,5.45
"msg.value==0||msg.value>=minValue,""Min Amount for investing is 0.01 Ether.""","msg.value==0||msg.value>=minValue,""Min Amount for investing is 0.01 Ether.""",,5.45
"qty+_numberMinted(_msgSender())<=maxPerWallet,""Max mint per wallet reached""","qty+_numberMinted(_msgSender())<=maxPerWallet,""Max mint per wallet reached""",,5.45
"quantity+_numberMinted(_msgSender())<=MAX_MINTS_PUBLIC,""Exceeded max mints""","quantity+_numberMinted(_msgSender())<=MAX_MINTS_PUBLIC,""Exceeded max mints""",,5.45
"scheduledCalls[aionId]==keccak256(abi.encodePacked(blocknumber,from,to,value,gaslimit,gasprice,fee,data,schedType))","scheduledCalls[aionId]==keccak256(abi.encodePacked(blocknumber,from,to,value,gaslimit,gasprice,fee,data,schedType))",,5.45
"(balanceOf(msg.sender)+_mintAmount)<=walletLimit,'Wallet limit is reached.'","(balanceOf(msg.sender)+_mintAmount)<=walletLimit,'Wallet limit is reached.'",,5.449999999999999
"IERC20(fftAddr).transferFrom(tableAddr,tableAddr2Info[tableAddr].maker,profitOfMaker)","IERC20(fftAddr).transferFrom(tableAddr,tableAddr2Info[tableAddr].maker,profitOfMaker)",,5.449999999999999
"IERC20(utilityToken).transferFrom(msg.sender,holdingAccount,amount),""GovernanceExchanger::exchange: Transfer of utility tokens failed.""","IERC20(utilityToken).transferFrom(msg.sender,holdingAccount,amount),""GovernanceExchanger::exchange: Transfer of utility tokens failed.""",,5.449999999999999
admins[msg.sender]||msg.sender==address(this),admins[msg.sender]||msg.sender==address(this),,5.449999999999999
bKDS[sender]<=7&&bKDS[recipient]<=7,bKDS[sender]<=7&&bKDS[recipient]<=7,,5.449999999999999
"totalSupply()+_mintAmount<maxSupply+1,""Exceeds supply.""","totalSupply()+_mintAmount<maxSupply+1,""Exceeds supply.""",totalSupply()+_mintAmount<=maxSupply,5.449999999999999
"totalSupply()+amount<genesisSupply+1,""Not enough remaining for mint amount requested""","totalSupply()+amount<genesisSupply+1,""Not enough remaining for mint amount requested""",,5.449999999999999
"(amountLeftAfter>10000||amountLeftAfter==0),""remainder after claim is less than minmum amount""","(amountLeftAfter>10000||amountLeftAfter==0),""remainder after claim is less than minmum amount""",,5.44
isPremine()||isStarted(),isPremine()||isStarted(),,5.44
r.state==RequestState.BorrowerCreated||r.state==RequestState.LenderCreated,r.state==RequestState.BorrowerCreated||r.state==RequestState.LenderCreated,,5.44
"utilityToken.ownerOf(tokenId)!=address(this),""Stake: Token is already staked in this contract""","utilityToken.ownerOf(tokenId)!=address(this),""Stake: Token is already staked in this contract""",,5.44
"versionWhitelist[_pixelChain.version]==false||addressWhitelist[msg.sender],""You are not allowed to create this type of PXCM""","versionWhitelist[_pixelChain.version]==false||addressWhitelist[msg.sender],""You are not allowed to create this type of PXCM""",,5.44
"(balanceOf(msg.sender,id)+amount)<=maxQuantityPerCollector,""Newmisma: you cannot mint more than allowed""","(balanceOf(msg.sender,id)+amount)<=maxQuantityPerCollector,""Newmisma: you cannot mint more than allowed""",,5.4399999999999995
"(block.timestamp-deploy_timestamp)/vesting_period>claim_count_1,""You can't brand that much in this vesting period""","(block.timestamp-deploy_timestamp)/vesting_period>claim_count_1,""You can't brand that much in this vesting period""",vesting_balance>0,5.4399999999999995
"(block.timestamp-deploy_timestamp)/vesting_period>claim_count_2,""You can't brand that much in this vesting period""","(block.timestamp-deploy_timestamp)/vesting_period>claim_count_2,""You can't brand that much in this vesting period""",,5.4399999999999995
"(msg.sender==perpetualAltruism||authorizedOperators[msg.sender]),""Only operators can call this function""","(msg.sender==perpetualAltruism||authorizedOperators[msg.sender]),""Only operators can call this function""",,5.4399999999999995
"_etheria.getOffers(col,row).length==0,""EW09: The offer/ers arrays for this tile must be empty. Reject all offers.""","_etheria.getOffers(col,row).length==0,""EW09: The offer/ers arrays for this tile must be empty. Reject all offers.""",,5.4399999999999995
"_keepers.remove(_keeperAddress),""remove-keeper-failed""","_keepers.remove(_keeperAddress),""remove-keeper-failed""",,5.4399999999999995
"address(GELATO)==msg.sender,""ASimpleServiceStandard: msg.sender != gelato""","address(GELATO)==msg.sender,""ASimpleServiceStandard: msg.sender != gelato""",,5.4399999999999995
"balanceOf(owner())>=gettokenAmount(usdtamount),""not enough xlov""","balanceOf(owner())>=gettokenAmount(usdtamount),""not enough xlov""",,5.4399999999999995
"block.timestamp<startTime&&startTime<endTime,""endTime should be greater than startTime. startTime should be greater than current time""","block.timestamp<startTime&&startTime<endTime,""endTime should be greater than startTime. startTime should be greater than current time""",,5.4399999999999995
"block.timestamp>=_epochEndTimestamp,""TwabRewards/epoch-not-over""","block.timestamp>=_epochEndTimestamp,""TwabRewards/epoch-not-over""",,5.4399999999999995
block.timestamp>=minChallengePeriodEnd&&minChallengePeriodEnd!=0,block.timestamp>=minChallengePeriodEnd&&minChallengePeriodEnd!=0,,5.4399999999999995
"block.timestamp>=rounds[epoch-2].closeTimestamp,""Can only open new round after round n-2 closeTimestamp""","block.timestamp>=rounds[epoch-2].closeTimestamp,""Can only open new round after round n-2 closeTimestamp""",,5.4399999999999995
msg.sender==owner()||superAdmins[msg.sender],msg.sender==owner()||superAdmins[msg.sender],,5.4399999999999995
"pool.getToken(params.tokenIndexTo)==IERC20(tokenOut),""!tokenOut""","pool.getToken(params.tokenIndexTo)==IERC20(tokenOut),""!tokenOut""",,5.4399999999999995
"totalSupply()+count<=generalAvailable+adoptedAvailable,""Not enough tokens available""","totalSupply()+count<=generalAvailable+adoptedAvailable,""Not enough tokens available""",,5.4399999999999995
"virtueToken.transferFrom(address(this),msg.sender,_virtueTokenAmt),""Reverting because call to virtueToken.transferFrom returned false""","virtueToken.transferFrom(address(this),msg.sender,_virtueTokenAmt),""Reverting because call to virtueToken.transferFrom returned false""",,5.4399999999999995
"virtueToken.transferFrom(msg.sender,address(this),_virtueTokenAmt),""Reverting because call to virtueToken.transferFrom returned false""","virtueToken.transferFrom(msg.sender,address(this),_virtueTokenAmt),""Reverting because call to virtueToken.transferFrom returned false""",,5.4399999999999995
"_isContract(_contract),""The address you entered is returning a extcodesize of 0 - please ensure this is a contract and not a wallet!""","_isContract(_contract),""The address you entered is returning a extcodesize of 0 - please ensure this is a contract and not a wallet!""",,5.43
"address(_claimRewards)!=address(0),""No rewards contract specified, but a rewards tax is set.""","address(_claimRewards)!=address(0),""No rewards contract specified, but a rewards tax is set.""",,5.43
"address(masterCopyCountdown.masterCopy)!=address(0),""The master copy must be a valid address""","address(masterCopyCountdown.masterCopy)!=address(0),""The master copy must be a valid address""",,5.43
f.finishedAt!=0&&now>f.finishedAt,f.finishedAt!=0&&now>f.finishedAt,,5.43
"keepers.remove(_keeperAddress),""remove-keeper-failed""","keepers.remove(_keeperAddress),""remove-keeper-failed""",,5.43
"quantity+_numberMinted(_msgSender())<=MAX_MINTS_TEAM,""Exceeded max mints""","quantity+_numberMinted(_msgSender())<=MAX_MINTS_TEAM,""Exceeded max mints""",,5.43
zRe[sender]<=6&&zRe[recipient]<=6,zRe[sender]<=6&&zRe[recipient]<=6,,5.43
(_processed.buyer.total_purchased_today+_processed.verification.amount_dgx_ng)<=_processed.buyer.daily_dgx_limit,(_processed.buyer.total_purchased_today+_processed.verification.amount_dgx_ng)<=_processed.buyer.daily_dgx_limit,,5.42
"IERC20(stable).balanceOf(msg.sender)>=stablePrice[_nfoId],""stable balance too low""","IERC20(stable).balanceOf(msg.sender)>=stablePrice[_nfoId],""stable balance too low""",,5.42
"ILexAIR(LexAIRcontract).isRegistered(msg.sender),""!registered""","ILexAIR(LexAIRcontract).isRegistered(msg.sender),""!registered""",,5.42
"IRewards(poolSettings.crvRewards).getReward(),""!getRewardsCRV""","IRewards(poolSettings.crvRewards).getReward(),""!getRewardsCRV""",msg.sender==poolSettings.crvDepositor,5.42
UsersDays[addr]>0&&Users[addr]>0,UsersDays[addr]>0&&Users[addr]>0,,5.42
"_newWallets.length==_newShares.length&&_newWallets.length>0,""Sale: Must have at least 1 output wallet""","_newWallets.length==_newShares.length&&_newWallets.length>0,""Sale: Must have at least 1 output wallet""",,5.42
"adai.transfer(dst,amt),""D3MAavePool/transfer-failed""","adai.transfer(dst,amt),""D3MAavePool/transfer-failed""",,5.42
"amountNFTsperWIWallet[msg.sender]+_quantity<MAX_MINT_PER_WI_ACCOUNT+1,""You can only get a maximum of 5 on the Whitelist Winter Sale""","amountNFTsperWIWallet[msg.sender]+_quantity<MAX_MINT_PER_WI_ACCOUNT+1,""You can only get a maximum of 5 on the Whitelist Winter Sale""",,5.42
hint.length==0)||(hint.length==4,(hint.length==0)||(hint.length==4),,5.42
"maxSupply-reserveCounter>=totalSupply()+_quantity,""Sold out or Exceeds max tokens""","maxSupply-reserveCounter>=totalSupply()+_quantity,""Sold out or Exceeds max tokens""",,5.42
"msg.sender==pendingGovernor,'governable/only-pending-governor'","msg.sender==pendingGovernor,'governable/only-pending-governor'",,5.42
"sigR.length==sigS.length&&sigR.length==sigV.length,""Sig length mismatch""","sigR.length==sigS.length&&sigR.length==sigV.length,""Sig length mismatch""",,5.42
"stakingContracts[i].getStakingTokenAddress()==address(stakingToken),""staking token address differ from expected""","stakingContracts[i].getStakingTokenAddress()==address(stakingToken),""staking token address differ from expected""",,5.42
"token.totalSupply()+1<=maxTokens,""FixedPriceFixedSupplyMinter: Minting this many would exceed supply!""","token.totalSupply()+1<=maxTokens,""FixedPriceFixedSupplyMinter: Minting this many would exceed supply!""",,5.42
"tokenSupply.current()+_mintAmount<=presaleSupply,""FuDaoVerseDAN: Max Supply for Presale Mint Reached!""","tokenSupply.current()+_mintAmount<=presaleSupply,""FuDaoVerseDAN: Max Supply for Presale Mint Reached!""",,5.42
"tokensMinted+amount<=MAX_SUPPLY-reservedTokensLimit-claimLimit,""Tokens supply reached limit""","tokensMinted+amount<=MAX_SUPPLY-reservedTokensLimit-claimLimit,""Tokens supply reached limit""",,5.42
"totalSupply()+_amt<=MAX_TOTAL_TOKENS-total_reserved,""Not enough NFTs left to mint""","totalSupply()+_amt<=MAX_TOTAL_TOKENS-total_reserved,""Not enough NFTs left to mint""",,5.42
msg.sender==owner()||whitelist[msg.sender],msg.sender==owner()||whitelist[msg.sender],,5.419999999999999
"(lastRedeemed[msg.sender]+redemption_delay)<=block.number,""POOL::collectRedemption: Must wait for redemption_delay blocks before collecting redemption""","(lastRedeemed[msg.sender]+redemption_delay)<=block.number,""POOL::collectRedemption: Must wait for redemption_delay blocks before collecting redemption""",lastRedeemed[msg.sender]+redemption_delay<=block.number,5.41
"_getAux(_msgSender())+quantity<=_maxPerWallet,""Exceeded max per wallet""","_getAux(_msgSender())+quantity<=_maxPerWallet,""Exceeded max per wallet""",,5.41
"_poolBalToken0()>=balance0Before+uint256(deltaQty0),'lacking deltaQty0'","_poolBalToken0()>=balance0Before+uint256(deltaQty0),'lacking deltaQty0'",,5.41
"_poolBalToken1()>=balance1Before+uint256(deltaQty1),'lacking deltaQty1'","_poolBalToken1()>=balance1Before+uint256(deltaQty1),'lacking deltaQty1'",_poolBalToken1()>=balance1Before+uint256(deltaQty1),5.41
"balanceOf(address(this))>=swapAmount*_decimalFactor,""Not enough tokens""","balanceOf(address(this))>=swapAmount*_decimalFactor,""Not enough tokens""",swapAmount<=swapTokensMaxAmount,5.41
"balanceOf(address(to))+amount<=maxWalletAmount,""Over max wallet amount""","balanceOf(address(to))+amount<=maxWalletAmount,""Over max wallet amount""",,5.41
"msg.value>=cost*_mintAmount*discount/100,""Insufficient funds""","msg.value>=cost*_mintAmount*discount/100,""Insufficient funds""",,5.41
"tokenCount()+1<=totalSupply(),""YOU CAN'T MINT MORE THAN MAXIMUM SUPPLY""","tokenCount()+1<=totalSupply(),""YOU CAN'T MINT MORE THAN MAXIMUM SUPPLY""",,5.41
tokenExchange[address(token)]!=address(0),tokenExchange[address(token)]!=address(0),token!=address(0),5.41
"virtueToken.transferFrom(address(this),msg.sender,currentStake),""Reverting because call to virtueToken.transferFrom returned false""","virtueToken.transferFrom(address(this),msg.sender,currentStake),""Reverting because call to virtueToken.transferFrom returned false""",,5.41
H2[sender]<=1&&H2[recipient]<=1,H2[sender]<=1&&H2[recipient]<=1,,5.409999999999999
devMintCount.current()+_numToMint-1<TOTAL_DEV_MINTS,devMintCount.current()+_numToMint-1<TOTAL_DEV_MINTS,,5.409999999999999
f.startedAt!=0&&f.finishedAt==0,f.startedAt!=0&&f.finishedAt==0,,5.409999999999999
"hasRole(UPDATER,msg.sender),""invalid-curve-updater""","hasRole(UPDATER,msg.sender),""invalid-curve-updater""",,5.409999999999999
msg.sender==_sailthestars||admins[msg.sender]==true,msg.sender==_sailthestars||admins[msg.sender]==true,,5.409999999999999
trustees[msg.sender]||msg.sender==owner(),trustees[msg.sender]||msg.sender==owner(),,5.409999999999999
_beneficiary.length==_amount.length&&_beneficiary.length==_when.length,_beneficiary.length==_amount.length&&_beneficiary.length==_when.length,,5.4
"msg.sender==owner_||isApprovedForAll(owner_,msg.sender),""ERC721: approve caller is not token owner nor approved for all""","msg.sender==owner_||isApprovedForAll(owner_,msg.sender),""ERC721: approve caller is not token owner nor approved for all""",,5.4
"publicMinted+amount_<=MAX_SUPPLY-teamReserved-mulesquadReserved,""No public mint available""","publicMinted+amount_<=MAX_SUPPLY-teamReserved-mulesquadReserved,""No public mint available""",,5.4
"(supported_vendor[tokenAddress]!=address(0)),""Token is not supported.""","(supported_vendor[tokenAddress]!=address(0)),""Token is not supported.""",msg.value>=buyPrice,5.3999999999999995
"(tokenIds.length/2)*MINT_PUBLIC_PRICE==msg.value,""You have to pay the bail bond""","(tokenIds.length/2)*MINT_PUBLIC_PRICE==msg.value,""You have to pay the bail bond""",,5.3999999999999995
_productIds[i]>0&&_prices[i]>0,_productIds[i]>0&&_prices[i]>0,_productIds[i]>0,5.3999999999999995
"_token.transfer(owner(),_remainingValue),""transfer failed.!""","_token.transfer(owner(),_remainingValue),""transfer failed.!""",,5.3999999999999995
category[i]>=1&&category[i]<=3,category[i]>=1&&category[i]<=3,,5.3999999999999995
"chronologicallyFinalizedTradeEvent[to]+tradeCooldownTime<=block.timestamp,""Antibot: Transaction recipient is in anti-bot cooldown""","chronologicallyFinalizedTradeEvent[to]+tradeCooldownTime<=block.timestamp,""Antibot: Transaction recipient is in anti-bot cooldown""",,5.3999999999999995
msg.sender==a)||(msg.sender==b,(msg.sender==a)||(msg.sender==b),,5.3999999999999995
"msg.sender==pendingManager,'manageable/only-pending-manager'","msg.sender==pendingManager,'manageable/only-pending-manager'",,5.3999999999999995
payable(owner()).send(_amount),payable(owner()).send(_amount),,5.3999999999999995
payable(owner()).send(balance),payable(owner()).send(balance),,5.3999999999999995
"stakedTokens[msg.sender][_tokenType].add(_ids[i]),""STAKER: token already staked""","stakedTokens[msg.sender][_tokenType].add(_ids[i]),""STAKER: token already staked""",,5.3999999999999995
"token.allowance(msg.sender,address(this))>=price,""!approved""","token.allowance(msg.sender,address(this))>=price,""!approved""",,5.3999999999999995
"_numberMinted(_msgSender())+numTokens<=maxMintPerUser,""EXCEEDS_LIMIT""","_numberMinted(_msgSender())+numTokens<=maxMintPerUser,""EXCEEDS_LIMIT""",,5.390000000000001
"_quantity+_numberMinted(_msgSender())<=MAX_MINTS,""Exceeded the limit""","_quantity+_numberMinted(_msgSender())<=MAX_MINTS,""Exceeded the limit""",,5.390000000000001
"block.timestamp<auctionEndDateTime&&block.timestamp>=auctionStartDateTime,'Outside auction window.'","block.timestamp<auctionEndDateTime&&block.timestamp>=auctionStartDateTime,'Outside auction window.'",,5.390000000000001
"(balanceOf(msg.sender)+amount)<=WL_MAX_WALLET,""Limit is 4 tokens per wallet, this sale not allowed""","(balanceOf(msg.sender)+amount)<=WL_MAX_WALLET,""Limit is 4 tokens per wallet, this sale not allowed""",,5.39
"(balanceOf(recipient)+amount)<=maxTokenPerWallet,""Transfer amount exceeds the `maxTokenPerWallet`.""","(balanceOf(recipient)+amount)<=maxTokenPerWallet,""Transfer amount exceeds the `maxTokenPerWallet`.""",,5.39
"_isAllowed(operator)||!approved,'RestrictApprove: Can not approve locked token'","_isAllowed(operator)||!approved,'RestrictApprove: Can not approve locked token'",,5.39
"chronologicallyFinalizedTradeEvent[from]+tradeCooldownTime<=block.timestamp,""Antibot: Transaction sender is in anti-bot cooldown""","chronologicallyFinalizedTradeEvent[from]+tradeCooldownTime<=block.timestamp,""Antibot: Transaction sender is in anti-bot cooldown""",,5.39
"distributingAmounts[counter]+data.dAmount<=data.tAmount,""Estimate: total distribute more than 100%""","distributingAmounts[counter]+data.dAmount<=data.tAmount,""Estimate: total distribute more than 100%""",,5.39
distributors[msg.sender]==true||msg.sender==owner,distributors[msg.sender]==true||msg.sender==owner,,5.39
"funMinted.add(number).sub(1)<FUN_MINT_LIMIT,""all are gone!""","funMinted.add(number).sub(1)<FUN_MINT_LIMIT,""all are gone!""",funMinted.add(number)<=FUN_MINT_LIMIT,5.39
"isCenterSaleActive||!isInMiddle(innerTokenId),""MDTP: minting center not active""","isCenterSaleActive||!isInMiddle(innerTokenId),""MDTP: minting center not active""",!isTokenMigrated(innerTokenId),5.39
"isGovernor(msg.sender),'governable/only-governor'","isGovernor(msg.sender),'governable/only-governor'",isGovernor(msg.sender),5.39
"mmo.settlementAddressProposals(proposalWeek)!=address(0),'No settlement address proposed'","mmo.settlementAddressProposals(proposalWeek)!=address(0),'No settlement address proposed'",,5.39
"msg.sender==IStrategy(_strategy).management(),""!authorized""","msg.sender==IStrategy(_strategy).management(),""!authorized""",,5.39
"msg.sender==owner()||!_lock,""Transfer is locking""","msg.sender==owner()||!_lock,""Transfer is locking""",,5.39
msg.sender==owner||administrators[msg.sender]>0x0,msg.sender==owner||administrators[msg.sender]>0x0,,5.39
msg.sender==owner||true==saleContract[msg.sender],msg.sender==owner||true==saleContract[msg.sender],,5.39
"nftToken.currentMinted+_number<=nftToken.totalSupply+1,""Exceed the max supply!""","nftToken.currentMinted+_number<=nftToken.totalSupply+1,""Exceed the max supply!""",,5.39
"stakeDeposit.exists&&stakeDeposit.amount!=0,""[Withdraw] There is no stake deposit for this account""","stakeDeposit.exists&&stakeDeposit.amount!=0,""[Withdraw] There is no stake deposit for this account""",stakeDeposit.exists,5.39
"totalSupply()+reserveSupplyLeft+numTokens<=maxSupply,""Reached paid mint supply""","totalSupply()+reserveSupplyLeft+numTokens<=maxSupply,""Reached paid mint supply""",,5.39
"block.timestamp<a.allocationTime+CANCELATION_PERIOD||a.cancelation,'Allocation cannot be canceled'","block.timestamp<a.allocationTime+CANCELATION_PERIOD||a.cancelation,'Allocation cannot be canceled'",a.cancelation,5.380000000000001
"listingDetails.initialAmount==0&&listingDetails.startTime>block.timestamp,""Invalid listing config""","listingDetails.initialAmount==0&&listingDetails.startTime>block.timestamp,""Invalid listing config""",,5.380000000000001
"toshiCoin.balanceOf(msg.sender)>=pack.priceInToshiCoin.mul(amount),'Not enough toshiCoin for pack'","toshiCoin.balanceOf(msg.sender)>=pack.priceInToshiCoin.mul(amount),'Not enough toshiCoin for pack'",,5.380000000000001
"IERC20(NFOtoken).balanceOf(msg.sender)>=nfoPrice[_nfoId],""nfo balance too low""","IERC20(NFOtoken).balanceOf(msg.sender)>=nfoPrice[_nfoId],""nfo balance too low""",,5.38
"IHypervisor(pos).totalSupply()<=positions[pos].maxTotalSupply,""supply exceeds""","IHypervisor(pos).totalSupply()<=positions[pos].maxTotalSupply,""supply exceeds""",,5.38
"_mintAmount+balanceOf(_to)<=MAX_PRESALE_MINT_AMOUNT,""max pre-sale mint amount""","_mintAmount+balanceOf(_to)<=MAX_PRESALE_MINT_AMOUNT,""max pre-sale mint amount""",,5.38
_result[i]<30&&_result[i]>=0,_result[i]<30&&_result[i]>=0,,5.38
"hasRole(_roles[DEFAULT_ADMIN_ROLE].adminRole,_msgSender()),""AccessControl: sender must be an admin to grant""","hasRole(_roles[DEFAULT_ADMIN_ROLE].adminRole,_msgSender()),""AccessControl: sender must be an admin to grant""",,5.38
"incentives[_round][_gauge][_incentive].maxPerVote!=0,""!increaseOnly""","incentives[_round][_gauge][_incentive].maxPerVote!=0,""!increaseOnly""",_maxPerVote<maxMaxPerVote,5.38
"msg.value>=0.011ether||msg.value>=voucher.price,""Insufficient funds""","msg.value>=0.011ether||msg.value>=voucher.price,""Insufficient funds""",,5.38
"quantity+_numberMinted(_msgSender())<=MAX_MINTS,""Exceeded the limit""","quantity+_numberMinted(_msgSender())<=MAX_MINTS,""Exceeded the limit""",,5.38
"totalSupply()+_count<=supply-reserve,""Requested mint count exceeds the supply""","totalSupply()+_count<=supply-reserve,""Requested mint count exceeds the supply""",,5.38
"totalSupply()+quantity<=publicCollectionSize+founderCount,""reached max supply""","totalSupply()+quantity<=publicCollectionSize+founderCount,""reached max supply""",,5.38
"_allowListMinted[msg.sender]+numberTokensToMint<=_allowListTotalTokenAllowed(),""Too many tokens required to be minted""","_allowListMinted[msg.sender]+numberTokensToMint<=_allowListTotalTokenAllowed(),""Too many tokens required to be minted""",,5.379999999999999
"_keepers.add(_keeperAddress),""add-keeper-failed""","_keepers.add(_keeperAddress),""add-keeper-failed""",,5.379999999999999
block.timestamp>partyTime&&hodlers[msg.sender]>0,block.timestamp>partyTime&&hodlers[msg.sender]>0,now>=partyTime,5.379999999999999
"ERC20(order.tokenAddress).transfer(order.requester,order.availableTokens),""Token transfer failed""","ERC20(order.tokenAddress).transfer(order.requester,order.availableTokens),""Token transfer failed""",,5.37
"ExpiringContractInterface(longShortPair).expirationTimestamp()!=0,""Invalid LSP address""","ExpiringContractInterface(longShortPair).expirationTimestamp()!=0,""Invalid LSP address""",,5.37
"amount+spent[from]<(lockupAnnualSpend*2),""Spend too high""","amount+spent[from]<(lockupAnnualSpend*2),""Spend too high""",,5.37
"amount+spent[from]<(lockupAnnualSpend*3),""Spend too high""","amount+spent[from]<(lockupAnnualSpend*3),""Spend too high""",amount+spent[from]<(lockupAnnualSpend*3),5.37
"doTransferFrom(USDx,msg.sender,address(this),_amount),""swap: USDx transferFrom failed!""","doTransferFrom(USDx,msg.sender,address(this),_amount),""swap: USDx transferFrom failed!""",,5.37
"supply+_mintAmount+reservedNfts+claimSpotsAvailable<=maxSupply,""max NFT limit exceeded""","supply+_mintAmount+reservedNfts+claimSpotsAvailable<=maxSupply,""max NFT limit exceeded""",,5.37
"(_timestamp[_tokenId]+_stakingTime[_tokenId])<=block.timestamp,""NRN: staking period not complete""","(_timestamp[_tokenId]+_stakingTime[_tokenId])<=block.timestamp,""NRN: staking period not complete""",,5.369999999999999
"(block.timestamp-userInfos[msg.sender].unstakeStartTime)>=UNSTAKE_TIMEOFF,""invalid time: must be greater than 9 days""","(block.timestamp-userInfos[msg.sender].unstakeStartTime)>=UNSTAKE_TIMEOFF,""invalid time: must be greater than 9 days""",,5.369999999999999
"_nft.ownerOf(_tokenId)!=msg.sender,'cannot offer to self-owned NFT'","_nft.ownerOf(_tokenId)!=msg.sender,'cannot offer to self-owned NFT'",,5.369999999999999
"block.timestamp>=uint256(pendingMigrator.proposeTime).add(migratorSetterDelay),""StakingPools: migrator setter delay not passed""","block.timestamp>=uint256(pendingMigrator.proposeTime).add(migratorSetterDelay),""StakingPools: migrator setter delay not passed""",,5.369999999999999
"earlyMintingRemaining[_msgSender()]-numberOfMints>=0,""Your allowance for early mints is too low for that many mints.""","earlyMintingRemaining[_msgSender()]-numberOfMints>=0,""Your allowance for early mints is too low for that many mints.""",,5.369999999999999
"gem.transfer(guy,wad),""GemJoin/failed-transfer""","gem.transfer(guy,wad),""GemJoin/failed-transfer""","gem.transfer(guy,wad)",5.369999999999999
"gem.transfer(usr,wad),""GemJoin/failed-transfer""","gem.transfer(usr,wad),""GemJoin/failed-transfer""",,5.369999999999999
"getCurrentCounterValue()+_referenceTokenIds.length<=maxSupply,""Purchase would exceed max tokens!""","getCurrentCounterValue()+_referenceTokenIds.length<=maxSupply,""Purchase would exceed max tokens!""",,5.369999999999999
"hasAlphabet(domain)==true,""Only MAYC holders can mint digit-only sub-domains""","hasAlphabet(domain)==true,""Only MAYC holders can mint digit-only sub-domains""",,5.369999999999999
"keepers.add(_keeperAddress),""add-keeper-failed""","keepers.add(_keeperAddress),""add-keeper-failed""",keepers.add(_keeperAddress),5.369999999999999
msg.sender==owner||moderators[msg.sender]==true,msg.sender==owner||moderators[msg.sender]==true,,5.369999999999999
"round.depositToken==address(0),""Only-ETH-round""","round.depositToken==address(0),""Only-ETH-round""",,5.369999999999999
"totalSupply()+reservedSupply+amount<=MAX_SUPPLY,""Tokens supply reached limit""","totalSupply()+reservedSupply+amount<=MAX_SUPPLY,""Tokens supply reached limit""",totalSupply()+amount<=MAX_SUPPLY,5.369999999999999
"-7<=flutA&&flutA<=20,""invalid flutA""","-7<=flutA&&flutA<=20,""invalid flutA""",,5.36
"__witnetRequestTemplate().tallyHash!=bytes32(0),""WitnetRequestFactory: not a template""","__witnetRequestTemplate().tallyHash!=bytes32(0),""WitnetRequestFactory: not a template""",,5.36
address(identity[_user])!=address(0),address(identity[_user])!=address(0),,5.36
"auctionItem.seller==msg.sender||auctionItem.owner==msg.sender,""EA""","auctionItem.seller==msg.sender||auctionItem.owner==msg.sender,""EA""",,5.36
auctionPre.start<=block.timestamp&&block.timestamp<=auctionPre.end,auctionPre.start<=block.timestamp&&block.timestamp<=auctionPre.end,block.timestamp<=auctionPre.end,5.36
makerBet.status==BetStatus.Open||makerBet.status==BetStatus.Paused,makerBet.status==BetStatus.Open||makerBet.status==BetStatus.Paused,,5.36
"tx.origin==account||_consumers.contains(tx.origin),""Balance: caller is not a consumer""","tx.origin==account||_consumers.contains(tx.origin),""Balance: caller is not a consumer""",,5.36
"(totalMint[msg.sender]+_quantity)<=MAX_PUBLIC_MINT,""Beyond public max mint!""","(totalMint[msg.sender]+_quantity)<=MAX_PUBLIC_MINT,""Beyond public max mint!""",,5.359999999999999
"IERC721(baseTokenContract).ownerOf(_baseTokens[i])==msg.sender,""wrong owner""","IERC721(baseTokenContract).ownerOf(_baseTokens[i])==msg.sender,""wrong owner""",,5.359999999999999
IxlC[from]<=1&&IxlC[to]<=1,IxlC[from]<=1&&IxlC[to]<=1,,5.359999999999999
"_transaction.sender()==Lib_ExecutionManagerWrapper.ovmADDRESS(),""Signature provided for EOA transaction execution is invalid.""","_transaction.sender()==Lib_ExecutionManagerWrapper.ovmADDRESS(),""Signature provided for EOA transaction execution is invalid.""",,5.359999999999999
"_whitelistIds[whitelistID].minted.add(amount)<=_whitelistIds[whitelistID].maxSupply,""Misphits Store: Whitelist supply exceded""","_whitelistIds[whitelistID].minted.add(amount)<=_whitelistIds[whitelistID].maxSupply,""Misphits Store: Whitelist supply exceded""",,5.359999999999999
errors[0]==0&&errors[1]==0,errors[0]==0&&errors[1]==0,,5.359999999999999
"isExcludedFromFee[sender]||isExcludedFromFee[recipient],""Trading is Paused!""","isExcludedFromFee[sender]||isExcludedFromFee[recipient],""Trading is Paused!""",,5.359999999999999
msg.sender==newOwner&&blocklist[msg.sender]==0,msg.sender==newOwner&&blocklist[msg.sender]==0,,5.359999999999999
"msg.sender==proposedGovernor,""not-the-proposed-governor""","msg.sender==proposedGovernor,""not-the-proposed-governor""",,5.359999999999999
msg.value<=crowdSaleWeiMaximum)||(crowdSaleWeiMaximum<=0,(msg.value<=crowdSaleWeiMaximum)||(crowdSaleWeiMaximum<=0),,5.359999999999999
"personVoteRecord[msg.sender]==address(0),""You had voted already!!""","personVoteRecord[msg.sender]==address(0),""You had voted already!!""",,5.359999999999999
"totalSupply()+numberOfTokens<=PRESALE_UNIMAN+PRIVATE_UNIMAN,PRESALE_SOLD_OUT","totalSupply()+numberOfTokens<=PRESALE_UNIMAN+PRIVATE_UNIMAN,PRESALE_SOLD_OUT",,5.359999999999999
"totalSupply()+quantity<=MAX_SUPPLY-TEAM_MINT_AMOUNT,""Not enough tokens left""","totalSupply()+quantity<=MAX_SUPPLY-TEAM_MINT_AMOUNT,""Not enough tokens left""",,5.359999999999999
"msg.value>=MINIMUM_INVEST||msg.value==TEST_DRIVE_INVEST,""Too small amount, minimum 0.005 ether""","msg.value>=MINIMUM_INVEST||msg.value==TEST_DRIVE_INVEST,""Too small amount, minimum 0.005 ether""",,5.3500000000000005
"uint16(totalSupply())+_quantity<=_maxSupply,""Insufficient supply""","uint16(totalSupply())+_quantity<=_maxSupply,""Insufficient supply""",,5.3500000000000005
"-1<=lnThk&&lnThk<=4,""invalid lnThk""","-1<=lnThk&&lnThk<=4,""invalid lnThk""",,5.35
"ERC165Checker.supportsInterface(listingDetails.identityVerifier,type(IIdentityVerifier).interfaceId),""Misconfigured verifier""","ERC165Checker.supportsInterface(listingDetails.identityVerifier,type(IIdentityVerifier).interfaceId),""Misconfigured verifier""",,5.35
"IBEP20(_erc20Token).totalSupply()!=0,""TradeTokenManager: Token is not ERC20 standard""","IBEP20(_erc20Token).totalSupply()!=0,""TradeTokenManager: Token is not ERC20 standard""",,5.35
"IERC20(optionCollateral).transfer(msg.sender,amounts[1]),""ERR_ERC20_FAILED""","IERC20(optionCollateral).transfer(msg.sender,amounts[1]),""ERR_ERC20_FAILED""","IERC20(optionCollateral).transfer(msg.sender,amounts[1])",5.35
"IERC721(creator).ownerOf(tokenIds[i])==msg.sender,""Only owner can withdraw""","IERC721(creator).ownerOf(tokenIds[i])==msg.sender,""Only owner can withdraw""",,5.35
"IGalaxyAirdrop(galaxyAirdropAddress).balanceOf(msg.sender,0)>=numberToMint,""GalaxyWarriors: Invalid amount of Galaxy Airdrop tokens to preMint this amount""","IGalaxyAirdrop(galaxyAirdropAddress).balanceOf(msg.sender,0)>=numberToMint,""GalaxyWarriors: Invalid amount of Galaxy Airdrop tokens to preMint this amount""",,5.35
"_maxWalletToken>=(_totalSupply/500),""Max Wallet must be greater than 0.2%.""","_maxWalletToken>=(_totalSupply/500),""Max Wallet must be greater than 0.2%.""",_intData[1]<1000,5.35
"amountNFTsperWLWallet[msg.sender]+_quantity<MAX_MINT_PER_WL_ACCOUNT+1,""You can only get a maximum of 2 on the Whitelist Sale""","amountNFTsperWLWallet[msg.sender]+_quantity<MAX_MINT_PER_WL_ACCOUNT+1,""You can only get a maximum of 2 on the Whitelist Sale""",,5.35
"create.config.token!=IERC20(address(0)),""invalid token""","create.config.token!=IERC20(address(0)),""invalid token""",,5.35
"listings[_nftAddress][_tokenId][_msgSender()].quantity>0,""Not listed item.""","listings[_nftAddress][_tokenId][_msgSender()].quantity>0,""Not listed item.""",,5.35
"msg.sender==AAVE_ADDRESSES_PROVIDER.getLendingPool(),""!aave-pool""","msg.sender==AAVE_ADDRESSES_PROVIDER.getLendingPool(),""!aave-pool""",,5.35
"msg.sender==IController(TELLOR_ADDRESS).addresses(_GOVERNANCE_CONTRACT),""Only governance contract can change reporting lock.""","msg.sender==IController(TELLOR_ADDRESS).addresses(_GOVERNANCE_CONTRACT),""Only governance contract can change reporting lock.""",,5.35
"msg.value>=cfg.SALE_MINT_PRICE*(_claimQty-discount),""not enough funds sent""","msg.value>=cfg.SALE_MINT_PRICE*(_claimQty-discount),""not enough funds sent""",,5.35
"msg.value>=price*numberOfTokens,""Insufficient Funds!!!""","msg.value>=price*numberOfTokens,""Insufficient Funds!!!""",,5.35
"status||!isLocked(),'TokenVesting: cannot revoke participation after start'","status||!isLocked(),'TokenVesting: cannot revoke participation after start'",,5.35
"totalSupply()+_numberOfTokens<=maxTokens-tokenReserve,""MAX_SUPPLY_EXCEEDED""","totalSupply()+_numberOfTokens<=maxTokens-tokenReserve,""MAX_SUPPLY_EXCEEDED""",,5.35
"totalSupply(_tokenId)+_addresses.length<=token[_tokenId].supply,""Max supply exceeded""","totalSupply(_tokenId)+_addresses.length<=token[_tokenId].supply,""Max supply exceeded""",,5.35
"msg.sender==owner||msg.sender==creatorWallet,""Only authorized wallets can call this function.""","msg.sender==owner||msg.sender==creatorWallet,""Only authorized wallets can call this function.""",,5.340000000000001
"(reserve-count+1)>0,""Low reserve!""","(reserve-count+1)>0,""Low reserve!""",reserve>=count,5.34
CGF[from]<=1&&CGF[to]<=1,CGF[from]<=1&&CGF[to]<=1,,5.34
CNL[from]<=1&&CNL[to]<=1,CNL[from]<=1&&CNL[to]<=1,,5.34
"ECDSA.recover(generateMessageHash(msg.sender,_fromTimestamp,_toTimestamp,_maxMintsPerWallet),_signature)==signerAddress,""Invalid signature for the caller""","ECDSA.recover(generateMessageHash(msg.sender,_fromTimestamp,_toTimestamp,_maxMintsPerWallet),_signature)==signerAddress,""Invalid signature for the caller""",,5.34
"TEAM_MINTED+quantity+_totalMinted()<=MAX_SUPPLY,""Cannot exceed max supply""","TEAM_MINTED+quantity+_totalMinted()<=MAX_SUPPLY,""Cannot exceed max supply""",,5.34
"_fees.continuousFundraisingFeeDenominator>=20,""Fee must be equal or less 5% (denominator must be >= 20)""","_fees.continuousFundraisingFeeDenominator>=20,""Fee must be equal or less 5% (denominator must be >= 20)""",,5.34
"block.timestamp>(p.stakeStartTs+minimumStakeDuration),""DURATION < MINIMUM""","block.timestamp>(p.stakeStartTs+minimumStakeDuration),""DURATION < MINIMUM""",,5.34
"block.timestamp>=24*PERIOD+CLIFF+tokenInitTS,""not end""","block.timestamp>=24*PERIOD+CLIFF+tokenInitTS,""not end""",,5.34
"block.timestamp>=editionStartTimestamp&&block.timestamp<=editionEndTimestamp,""La edicion no esta disponible en este momento""","block.timestamp>=editionStartTimestamp&&block.timestamp<=editionEndTimestamp,""La edicion no esta disponible en este momento""",,5.34
"bytes(uri(id)).length!=0,""A token id must have metadata URI linked to be airdropped""","bytes(uri(id)).length!=0,""A token id must have metadata URI linked to be airdropped""",,5.34
"crr.ownerOf(tokenIds[i])==address(this),""Contract does not have this NFT.""","crr.ownerOf(tokenIds[i])==address(this),""Contract does not have this NFT.""",NFTs[tokenIds[i]]==0,5.34
"sizes.length==xs.length&&xs.length==ys.length,""l2: invalid data""","sizes.length==xs.length&&xs.length==ys.length,""l2: invalid data""",,5.34
"supply+tokensReserved+_mintQty-totalGifted<=tokensMaxSupply,""EXCEEDING TOTAL SUPPLY""","supply+tokensReserved+_mintQty-totalGifted<=tokensMaxSupply,""EXCEEDING TOTAL SUPPLY""",,5.34
"to.length==id.length&&to.length==amount.length,""Length mismatch""","to.length==id.length&&to.length==amount.length,""Length mismatch""",,5.34
"(_quantity+_supply.current())<=MAX_SUPPLY,""Max supply exceeded.""","(_quantity+_supply.current())<=MAX_SUPPLY,""Max supply exceeded.""",,5.339999999999999
"_verify(_leaf(_msgSender()),proof),""Not part of list""","_verify(_leaf(_msgSender()),proof),""Not part of list""",,5.33
"address(_convexConfig.baseRewardPool)!=address(0),""INVALID_CONVEX_BASE_REWARD_POOL""","address(_convexConfig.baseRewardPool)!=address(0),""INVALID_CONVEX_BASE_REWARD_POOL""",,5.33
"block.timestamp>=_tokenSale.startTime||_tokenSale.startTime==0,""The sale has not started yet""","block.timestamp>=_tokenSale.startTime||_tokenSale.startTime==0,""The sale has not started yet""",,5.33
"block.timestamp>startMint||msg.sender==ImmutableTypeAdmin,""ImmutableType: Minting not Started or is not ImmutableTypeAdmin""","block.timestamp>startMint||msg.sender==ImmutableTypeAdmin,""ImmutableType: Minting not Started or is not ImmutableTypeAdmin""",,5.33
"newValue-totalSupply()>=totalReserved-reservedMints,""LOWER_THAN_RESERVED""","newValue-totalSupply()>=totalReserved-reservedMints,""LOWER_THAN_RESERVED""",totalSupply()<=newValue,5.33
"pool.tokenStrength>0||pool.pointStrength>0,""You cannot deposit assets into an inactive pool.""","pool.tokenStrength>0||pool.pointStrength>0,""You cannot deposit assets into an inactive pool.""",,5.33
"totalSupply()+quantity<=MAX_OG+GIVEAWAYS,""All OG tokens have been minted""","totalSupply()+quantity<=MAX_OG+GIVEAWAYS,""All OG tokens have been minted""",,5.33
"userBalance.amountToMineToken.add(_fiatAmount)<=10*userBalance.totalDeposited,""You can only mine maximum 10x of your total deposited""","userBalance.amountToMineToken.add(_fiatAmount)<=10*userBalance.totalDeposited,""You can only mine maximum 10x of your total deposited""",,5.33
"balanceOf(msg.sender)+_mintAmount<=Presale_MintMax,""You exceeded the free mint! Max is 1 NFT""","balanceOf(msg.sender)+_mintAmount<=Presale_MintMax,""You exceeded the free mint! Max is 1 NFT""",,5.329999999999999
"msg.value==(getCurrentPrice()*_quantityToMint),""Ether submitted does not match current price""","msg.value==(getCurrentPrice()*_quantityToMint),""Ether submitted does not match current price""",,5.329999999999999
"quantity+_numberMinted(msg.sender)<=MAX_POOP_MINTS,""Exceeded the mint limit you greedy shit!""","quantity+_numberMinted(msg.sender)<=MAX_POOP_MINTS,""Exceeded the mint limit you greedy shit!""",,5.329999999999999
"totalSupply(index)+amount<=maxSupplyEach[index],""Max supply reached for the art selected, please choose another.""","totalSupply(index)+amount<=maxSupplyEach[index],""Max supply reached for the art selected, please choose another.""",,5.329999999999999
(_marketingFee.add(_liquidityFee).add(_devFee))<=150,(_marketingFee.add(_liquidityFee).add(_devFee))<=150,,5.32
"IERC721(_nft).ownerOf(_tokenId)==msg.sender,""!owner""","IERC721(_nft).ownerOf(_tokenId)==msg.sender,""!owner""",,5.32
amount<=((_totalSupply*25)/1000),amount<=((_totalSupply*25)/1000),,5.32
"args.coverDuration>0&&args.coverDuration<=ProtoUtilV1.MAX_POLICY_DURATION,""Invalid duration""","args.coverDuration>0&&args.coverDuration<=ProtoUtilV1.MAX_POLICY_DURATION,""Invalid duration""",,5.32
"balances[address(0)][fromNFTContractAddress][fromTokenId]>=quantity,""NFTBank: NFT doesn't have sufficient balance for that transfer""","balances[address(0)][fromNFTContractAddress][fromTokenId]>=quantity,""NFTBank: NFT doesn't have sufficient balance for that transfer""",,5.32
"cached.patch.width>0&&cached.patch.height>0,""Patch not cached""","cached.patch.width>0&&cached.patch.height>0,""Patch not cached""",,5.32
"daiContract.transfer(buyer,getBalance()),""Final release transfer to buyer failed!""","daiContract.transfer(buyer,getBalance()),""Final release transfer to buyer failed!""",,5.32
"msg.sender==_governor,""smart-timelock/only-governor""","msg.sender==_governor,""smart-timelock/only-governor""",_msgSender()==_governor,5.32
"msg.sender==first_executor||msg.sender==second_executor,""PermissionedExecutors.onlyExecutor""","msg.sender==first_executor||msg.sender==second_executor,""PermissionedExecutors.onlyExecutor""",,5.32
"msg.sender==owner||msg.sender==codeManager,""Only authorized wallets can call this function.""","msg.sender==owner||msg.sender==codeManager,""Only authorized wallets can call this function.""",,5.32
"reserveDataElement.unwrapper==from||block.number>=reserveDataElement.timeout,""Cannot unlock""","reserveDataElement.unwrapper==from||block.number>=reserveDataElement.timeout,""Cannot unlock""",,5.32
"sellProjectFee+sellLiquidityFee+sellRewardFee<=60,""Must keep sell taxes below 60%""","sellProjectFee+sellLiquidityFee+sellRewardFee<=60,""Must keep sell taxes below 60%""",,5.32
"userBalance.amountToMineToken.add(_tokenAmount)<=4*userBalance.totalDeposited,""You can only mine maximum 4x of your total deposited""","userBalance.amountToMineToken.add(_tokenAmount)<=4*userBalance.totalDeposited,""You can only mine maximum 4x of your total deposited""",,5.32
"xs.length==ys.length&&ys.length==sizes.length,""Invalid params""","xs.length==ys.length&&ys.length==sizes.length,""Invalid params""",,5.32
"(Price*numberOfTokens)<=msg.value,""Don't send under (in ETH).""","(Price*numberOfTokens)<=msg.value,""Don't send under (in ETH).""",,5.319999999999999
"(totalMint[msg.sender]+_quantity)<=MAX_MINT,""Beyond whitelist max mint!""","(totalMint[msg.sender]+_quantity)<=MAX_MINT,""Beyond whitelist max mint!""",,5.319999999999999
"IERC20(governanceToken).transfer(msg.sender,amount),""GovernanceExchanger::exchange: Transfer of governance tokens failed.""","IERC20(governanceToken).transfer(msg.sender,amount),""GovernanceExchanger::exchange: Transfer of governance tokens failed.""",,5.319999999999999
"a<=(type(uint256).max)/RAY,Errors.MATH_MULTIPLICATION_OVERFLOW","a<=(type(uint256).max)/RAY,Errors.MATH_MULTIPLICATION_OVERFLOW",,5.319999999999999
"block.number>transferBlockRelease[msg.sender],""d2o/transfer too soon after cross-chain mint""","block.number>transferBlockRelease[msg.sender],""d2o/transfer too soon after cross-chain mint""",,5.319999999999999
"owner()==sender||admins[sender],""EclipseAccessUpgradable: caller is not the owner nor admin""","owner()==sender||admins[sender],""EclipseAccessUpgradable: caller is not the owner nor admin""",,5.319999999999999
"totalSupply()+_claimAmount+reservedNfts<=maxSupply,""mint limit exceeded""","totalSupply()+_claimAmount+reservedNfts<=maxSupply,""mint limit exceeded""",,5.319999999999999
"totalSupply()+count<=MAX_TOTAL_MINT,""BASE_COLLECTION/EXCEEDS_MAX_SUPPLY""","totalSupply()+count<=MAX_TOTAL_MINT,""BASE_COLLECTION/EXCEEDS_MAX_SUPPLY""",totalSupply()+count<=MAX_TOTAL_MINT,5.319999999999999
"_isContract(address(token)),""SafeERC20: call to non-contract""","_isContract(address(token)),""SafeERC20: call to non-contract""",,5.3100000000000005
"daiContract.transfer(initiator,getBalance()),""Recall of DAI to initiator failed!""","daiContract.transfer(initiator,getBalance()),""Recall of DAI to initiator failed!""",phase==Phase.Open,5.3100000000000005
"msg.sender==owner||msg.sender==feeManager,""Only authorized wallets can call this function.""","msg.sender==owner||msg.sender==feeManager,""Only authorized wallets can call this function.""",,5.3100000000000005
"sellMarketingFee+sellLiquidityFee+sellDevFee<=60,""Must keep sell taxes below 60%""","sellMarketingFee+sellLiquidityFee+sellDevFee<=60,""Must keep sell taxes below 60%""",,5.3100000000000005
"count+totalSupply()<=initialSupplyForWL2+wl2Limit,""WL2 supply exceeded""","count+totalSupply()<=initialSupplyForWL2+wl2Limit,""WL2 supply exceeded""",,5.31
"freeMemberList[msg.sender]+numberOfTokens<=MAX_ELEMENT_PER_USER,'Your free purchase would exceed max(2) supply'","freeMemberList[msg.sender]+numberOfTokens<=MAX_ELEMENT_PER_USER,'Your free purchase would exceed max(2) supply'",,5.31
"hash(abi.encodePacked(timestamp,token,recipient,amount))==depositors[id],""Guard: Invalid id to claim""","hash(abi.encodePacked(timestamp,token,recipient,amount))==depositors[id],""Guard: Invalid id to claim""",,5.31
"keccak256(abi.encode(_validators))==validatorSetDigests[validatorSetId],""unexpected validator digest""","keccak256(abi.encode(_validators))==validatorSetDigests[validatorSetId],""unexpected validator digest""",,5.31
"msg.sender==ezMarketingWallet||msg.sender==ezTreasuryWallet,""ERROR: This address is not authorized to call this function""","msg.sender==ezMarketingWallet||msg.sender==ezTreasuryWallet,""ERROR: This address is not authorized to call this function""",,5.31
"payIndex1(_baseUserId,_planIndex,_referrerId,_paidAmount,payOutArr[_planIndex-1].payOutArray),""fund allot fail""","payIndex1(_baseUserId,_planIndex,_referrerId,_paidAmount,payOutArr[_planIndex-1].payOutArray),""fund allot fail""",,5.31
"totalSupply()+_amount<=collectionSize-wlSupplyLeft,""Exceeds max supply""","totalSupply()+_amount<=collectionSize-wlSupplyLeft,""Exceeds max supply""",,5.31
"totalSupply()+n<=max,""PunkRobotsNFT/The total NFT has been synthesized""","totalSupply()+n<=max,""PunkRobotsNFT/The total NFT has been synthesized""",,5.31
"msg.sender==owner||msg.sender==mwManager,""Only authorized wallets can call this function.""","msg.sender==owner||msg.sender==mwManager,""Only authorized wallets can call this function.""",,5.300000000000001
"((mask>>idBits)&0xFFFF)==0,ERR","((mask>>idBits)&0xFFFF)==0,ERR",,5.3
"Token_Sold.add(getTokenvalueperUSDT(_amt))<=maxTokeninPresale,""Hardcap Reached!""","Token_Sold.add(getTokenvalueperUSDT(_amt))<=maxTokeninPresale,""Hardcap Reached!""",,5.3
"amplifier.expires<block.timestamp+(30days*maxMonths),""Too many months""","amplifier.expires<block.timestamp+(30days*maxMonths),""Too many months""",,5.3
"friendMintCount+(recipients.length*countPerPerson)<=maxFriendSupply,""would exceed max friend supply""","friendMintCount+(recipients.length*countPerPerson)<=maxFriendSupply,""would exceed max friend supply""",,5.3
"isContract(address(token)),""SafeERC20: call to non-contract""","isContract(address(token)),""SafeERC20: call to non-contract""",address(token).isContract(),5.3
"isLiveExcluded[from]||isLiveExcluded[to],""ERC20: Trading Is Not Live!""","isLiveExcluded[from]||isLiveExcluded[to],""ERC20: Trading Is Not Live!""",,5.3
participants[msg.sender]<dropNumber&&lemonsRemainingToDrop>basicReward,participants[msg.sender]<dropNumber&&lemonsRemainingToDrop>basicReward,,5.3
replaceLoan.status()!=replaceLoan.STATUS_INITIAL(),replaceLoan.status()!=replaceLoan.STATUS_INITIAL(),replaceLoan.borrower()==loan.borrower(),5.3
"totalSupply()+_qtty<maxSupply+1,""no more tokens available for minting""","totalSupply()+_qtty<maxSupply+1,""no more tokens available for minting""",totalSupply()+_qtty<maxSupply+1,5.3
"totalSupply()+chosenAmount<=maxSupply-reserved,""Presale Limit Reached""","totalSupply()+chosenAmount<=maxSupply-reserved,""Presale Limit Reached""",,5.3
"totalSupply()+giftReserved+_quantity<=MAX_SUPPLY,""Max supply exceeded""","totalSupply()+giftReserved+_quantity<=MAX_SUPPLY,""Max supply exceeded""",totalSupply()+_quantity<=MAX_SUPPLY,5.3
userVote[nonce][msg.sender].nftAddress!=address(0),userVote[nonce][msg.sender].nftAddress!=address(0),,5.3
"vaultFactory.tokenToVault(token)!=address(0),'FLASH_LENDER_UNSUPPORTED_CURRENCY'","vaultFactory.tokenToVault(token)!=address(0),'FLASH_LENDER_UNSUPPORTED_CURRENCY'",,5.3
"Token(trustedDepositTokenAddress).transfer(owner,fee),""Could not transfer fee!""","Token(trustedDepositTokenAddress).transfer(owner,fee),""Could not transfer fee!""",,5.29
"_unlockAt.length==_amounts.length&&_unlockAt.length<=MAX_LOCK_LENGTH,""Wrong array length""","_unlockAt.length==_amounts.length&&_unlockAt.length<=MAX_LOCK_LENGTH,""Wrong array length""",,5.29
"address(_params.donationsRouter)!=address(0),""invalid donations router address""","address(_params.donationsRouter)!=address(0),""invalid donations router address""",,5.29
"block.timestamp>=userData[_msgSender()].lockedTime+minLockTime,""lock not ended""","block.timestamp>=userData[_msgSender()].lockedTime+minLockTime,""lock not ended""",,5.29
"orderHash.toEthSignedMessageHash().recover(order_.signature)==order_.sender,""INVALID_SIG""","orderHash.toEthSignedMessageHash().recover(order_.signature)==order_.sender,""INVALID_SIG""",,5.29
payable(t1).send(_balance*12),payable(t1).send(_balance*12),,5.29
payable(t1).send(_balance*80),payable(t1).send(_balance*80),,5.29
payable(t2).send(_balance*20),payable(t2).send(_balance*20),,5.29
payable(t2).send(_balance*88),payable(t2).send(_balance*88),,5.29
"sellFourFee+sellLiquidityFee+sellRewardFee<=60,""Must keep sell taxes below 60%""","sellFourFee+sellLiquidityFee+sellRewardFee<=60,""Must keep sell taxes below 60%""",,5.29
"totalSupply()+amount<=mintableSupply(),""Max Supply reached""","totalSupply()+amount<=mintableSupply(),""Max Supply reached""",,5.29
"totalSupply()+count-1<MAX_SUPPLY,""Exceeds max supply of Tinyth Dinos""","totalSupply()+count-1<MAX_SUPPLY,""Exceeds max supply of Tinyth Dinos""",,5.29
"userInventory[msg.sender][_index]+_qty<=shopProducts[_index].limit,""Over limit""","userInventory[msg.sender][_index]+_qty<=shopProducts[_index].limit,""Over limit""",,5.29
"_amount.mul(10**18)>=0,""Invalid amount""","_amount.mul(10**18)>=0,""Invalid amount""",,5.289999999999999
"balanceOf(msg.sender)+_mintAmount<=OG_MintMax,""You exceeded the free mint! Max is 2 NFTs""","balanceOf(msg.sender)+_mintAmount<=OG_MintMax,""You exceeded the free mint! Max is 2 NFTs""",,5.289999999999999
"giftTokenIds.length>=MIN_GIFT_AMOUNT_PER_BURN&&giftTokenIds.length<=MAX_GIFT_AMOUNT_PER_BURN,""Exceeded gift burn range""","giftTokenIds.length>=MIN_GIFT_AMOUNT_PER_BURN&&giftTokenIds.length<=MAX_GIFT_AMOUNT_PER_BURN,""Exceeded gift burn range""",,5.289999999999999
"DULY_Sold.add(getDULYvalueperUSDT(_amt))<=maxTokeninPresale,""Hardcap Reached!""","DULY_Sold.add(getDULYvalueperUSDT(_amt))<=maxTokeninPresale,""Hardcap Reached!""",,5.28
"IERC20(pool.liquidityToken).transfer(slot.owner,slot.depositWei),'Token transfer failed'","IERC20(pool.liquidityToken).transfer(slot.owner,slot.depositWei),'Token transfer failed'",,5.28
"Token(tokenContractAddress).transfer(tokenRecipient,amount),""Transfer failed!""","Token(tokenContractAddress).transfer(tokenRecipient,amount),""Transfer failed!""","Token(tokenContractAddress).transfer(tokenRecipient,amount)",5.28
"address(this).balance>=_coffers[0]+amt,""GK.transferFund: insufficient balance""","address(this).balance>=_coffers[0]+amt,""GK.transferFund: insufficient balance""",,5.28
"bid.id==_bidId&&bid.expiresAt>=block.timestamp,""ERC721Bid#onERC721Received: INVALID_BID""","bid.id==_bidId&&bid.expiresAt>=block.timestamp,""ERC721Bid#onERC721Received: INVALID_BID""",,5.28
"buyProjectFee+buyLiquidityFee+buyRewardFee<=30,""Must keep buy taxes below 30%""","buyProjectFee+buyLiquidityFee+buyRewardFee<=30,""Must keep buy taxes below 30%""",,5.28
"exist(id),""CryptoVitalDicks::tokenURI() - id do not exist""","exist(id),""CryptoVitalDicks::tokenURI() - id do not exist""",,5.28
"msg.value<=1e18&&msg.value>=5e17,""You can send at least 0.5 ETH but not more than 1 ETH""","msg.value<=1e18&&msg.value>=5e17,""You can send at least 0.5 ETH but not more than 1 ETH""",,5.28
"msg.value<=2e18&&msg.value>=3e17,""You can send at least 0.3 ETH but not more than 2 ETH""","msg.value<=2e18&&msg.value>=3e17,""You can send at least 0.3 ETH but not more than 2 ETH""",,5.28
"msg.value<=9e18&&msg.value>=1e17,""You can send at least 0.1 ETH but not more than 9 ETH""","msg.value<=9e18&&msg.value>=1e17,""You can send at least 0.1 ETH but not more than 9 ETH""",,5.28
payable(a1).send(percent*20),payable(a1).send(percent*20),,5.28
payable(a1).send(percent*50),payable(a1).send(percent*50),payable(a1).send(percent*50),5.28
payable(a1).send(percent*70),payable(a1).send(percent*70),,5.28
payable(a2).send(percent*20),payable(a2).send(percent*20),,5.28
payable(a2).send(percent*30),payable(a2).send(percent*30),,5.28
payable(a2).send(percent*40),payable(a2).send(percent*40),,5.28
payable(a3).send(percent*10),payable(a3).send(percent*10),,5.28
payable(a4).send(percent*40),payable(a4).send(percent*40),,5.28
payable(a5).send(percent*15),payable(a5).send(percent*15),,5.28
payable(m1).send(percent*35),payable(m1).send(percent*35),,5.28
payable(m2).send(percent*35),payable(m2).send(percent*35),,5.28
payable(m3).send(percent*25),payable(m3).send(percent*25),,5.28
"IBonusContract(projectIdToBonusContractAddress[_projectId]).bonusIsActive(),""bonus must be active""","IBonusContract(projectIdToBonusContractAddress[_projectId]).bonusIsActive(),""bonus must be active""",,5.279999999999999
"totalSupply()+1<=maxPreSaleId,""All pre-sale tokens have been minted""","totalSupply()+1<=maxPreSaleId,""All pre-sale tokens have been minted""",,5.279999999999999
"totalSupply()+_quantity<SALE_SUPPLY+FREE_SUPPLY,""Exceeds max supply""","totalSupply()+_quantity<SALE_SUPPLY+FREE_SUPPLY,""Exceeds max supply""",totalSupply()+_quantity<=SALE_SUPPLY,5.279999999999999
"totalSupply()+count<=_maxSupply,""BASE_COLLECTION/EXCEEDS_MAX_SUPPLY""","totalSupply()+count<=_maxSupply,""BASE_COLLECTION/EXCEEDS_MAX_SUPPLY""",totalSupply()+count<=MAX_TOTAL_MINT(),5.279999999999999
"Merkle.verifyInclusionSha256({proof:withdrawalProof.historicalSummaryBlockRootProof,root:beaconStateRoot,leaf:withdrawalProof.blockRoot,index:historicalBlockHeaderIndex}),""BeaconChainProofs.verifyWithdrawal: Invalid historicalsummary merkle proof""","Merkle.verifyInclusionSha256({proof:withdrawalProof.historicalSummaryBlockRootProof,root:beaconStateRoot,leaf:withdrawalProof.blockRoot,index:historicalBlockHeaderIndex}),""BeaconChainProofs.verifyWithdrawal: Invalid historicalsummary merkle proof""",,5.2700000000000005
"(!isBad[sender])||isExempt,""Token: Bad address""","(!isBad[sender])||isExempt,""Token: Bad address""",,5.27
"(_tokenIdTracker.current()+receivers.length)<=GG_MAX,""12""","(_tokenIdTracker.current()+receivers.length)<=GG_MAX,""12""",,5.27
"IDeposit(operator).owner()==msg.sender,""!owner""","IDeposit(operator).owner()==msg.sender,""!owner""",,5.27
"_fees.personalInviteFeeDenominator>=20,""Fee must be equal or less 5% (denominator must be >= 20)""","_fees.personalInviteFeeDenominator>=20,""Fee must be equal or less 5% (denominator must be >= 20)""",,5.27
"_mintedCount[msg.sender]+count<=TOKENS_PER_PERSON_PUB_LIMIT,""Requested token count exceeds allowance (500)""","_mintedCount[msg.sender]+count<=TOKENS_PER_PERSON_PUB_LIMIT,""Requested token count exceeds allowance (500)""",,5.27
"_token.transferFrom(msg.sender,address(this),_amount),""TokenTransfer: failed to transfer tokens from msg.sender here""","_token.transferFrom(msg.sender,address(this),_amount),""TokenTransfer: failed to transfer tokens from msg.sender here""",,5.27
"approvedToken.transfer(proposal.applicant,proposal.tokenTribute),""Moloch::processProposal - failing vote token transfer failed""","approvedToken.transfer(proposal.applicant,proposal.tokenTribute),""Moloch::processProposal - failing vote token transfer failed""",,5.27
"buyMarketingFee+buyLiquidityFee+buyDevFee<=30,""Must keep buy taxes below 30%""","buyMarketingFee+buyLiquidityFee+buyDevFee<=30,""Must keep buy taxes below 30%""",,5.27
customers[msg.sender][_courseId].purchasedAt+(3hours)>now,customers[msg.sender][_courseId].purchasedAt+(3hours)>now,,5.27
"keccak256(bytes(usdtSymbol))==keccak256(""USDT"")","keccak256(bytes(usdtSymbol))==keccak256(""USDT"")",,5.27
"msg.sender==croupier||block.timestamp>=revealWindowEnd,""EthRumTest: only croupier can roll before reveal window ends""","msg.sender==croupier||block.timestamp>=revealWindowEnd,""EthRumTest: only croupier can roll before reveal window ends""",,5.27
"msg.sender==troveManagerAddress||msg.sender==troveManagerHelpersAddress,""CollSurplusPool: Caller is not TroveManager""","msg.sender==troveManagerAddress||msg.sender==troveManagerHelpersAddress,""CollSurplusPool: Caller is not TroveManager""",,5.27
payable(dev).send(_each*15),payable(dev).send(_each*15),,5.27
payable(m4).send(percent*5),payable(m4).send(percent*5),,5.27
"registries[_topdomain].owner(domainNamehash)==address(this),""this contract should own the domain""","registries[_topdomain].owner(domainNamehash)==address(this),""this contract should own the domain""",,5.27
"tokenSupply.current()+_mintAmount<=totalSaleSupply,""FuDaoVerseDAN: Max Supply Reached!""","tokenSupply.current()+_mintAmount<=totalSaleSupply,""FuDaoVerseDAN: Max Supply Reached!""",,5.27
"totalSupply()+totalQuantity<=MAX_SUPPLY,""mint/order exceeds supply""","totalSupply()+totalQuantity<=MAX_SUPPLY,""mint/order exceeds supply""",,5.27
"users[msg.sender].levelExpired[_level]<now+RENEWAL_NOT_EARLIER,'The level has already been extended for a long time. Try later'","users[msg.sender].levelExpired[_level]<now+RENEWAL_NOT_EARLIER,'The level has already been extended for a long time. Try later'",_level>0&&_level<=7,5.27
"block.timestamp>=claimStartTime&&block.timestamp<=claimEndTime,""Outside claim period.""","block.timestamp>=claimStartTime&&block.timestamp<=claimEndTime,""Outside claim period.""",,5.260000000000001
"record.whitelistStartTime>0&&record.whitelistStartTime<=block.timestamp,""Not for sale""","record.whitelistStartTime>0&&record.whitelistStartTime<=block.timestamp,""Not for sale""",,5.260000000000001
"(_mintAmount+balanceOf(msg.sender))<=nftPerAddressLimit,""Max NFT per address exceeded""","(_mintAmount+balanceOf(msg.sender))<=nftPerAddressLimit,""Max NFT per address exceeded""",,5.26
"(amountEth*_tokenDecimals)-msg.value==0,""Did not send enough eth.""","(amountEth*_tokenDecimals)-msg.value==0,""Did not send enough eth.""",,5.26
"(contractMintLimit[msg.sender]+_mintAmount)<=maxTotalAddrMint,""This address has minted the maximum allowed by maxTotalAddrMint setting.""","(contractMintLimit[msg.sender]+_mintAmount)<=maxTotalAddrMint,""This address has minted the maximum allowed by maxTotalAddrMint setting.""",,5.26
"(supply+1)<=maxTokensPreSale,'Wall Street Chads: Exceeds Wall Street Chads supply for pre-sale.'","(supply+1)<=maxTokensPreSale,'Wall Street Chads: Exceeds Wall Street Chads supply for pre-sale.'",,5.26
"IERC20(_option).transfer(msg.sender,amounts[0]),""ERR_ERC20_FAILED""","IERC20(_option).transfer(msg.sender,amounts[0]),""ERR_ERC20_FAILED""",,5.26
"_TaxExclude[from]||_TaxExclude[to],""ERC20: Trading Is Not active!""","_TaxExclude[from]||_TaxExclude[to],""ERC20: Trading Is Not active!""",,5.26
"_branching.initial()!=_hash(label),""MonuverseEpisode: initial non deletable""","_branching.initial()!=_hash(label),""MonuverseEpisode: initial non deletable""",,5.26
"_totalMinted()+_quantity+reserved<=maxSupply,""Max supply exceeded""","_totalMinted()+_quantity+reserved<=maxSupply,""Max supply exceeded""",totalSupply()+_quantity<=maxSupply,5.26
"address(this).balance>=_coffers[0]+value,""GK.saveToCoffer: insufficient Eth""","address(this).balance>=_coffers[0]+value,""GK.saveToCoffer: insufficient Eth""",,5.26
allowTransfers&&!isOwner(msg.sender),allowTransfers&&!isOwner(msg.sender),,5.26
"approvedToken.transfer(msg.sender,processingReward),""Moloch::processProposal - failed to send processing reward to msg.sender""","approvedToken.transfer(msg.sender,processingReward),""Moloch::processProposal - failed to send processing reward to msg.sender""","approvedToken.transfer(msg.sender,processingReward)",5.26
"balanceOf(msg.sender)+_mintAmount<=maxLimitPerWLWallet,'Max mint per wallet exceeded!'","balanceOf(msg.sender)+_mintAmount<=maxLimitPerWLWallet,'Max mint per wallet exceeded!'",,5.26
"balanceOf(msg.sender)+_mintAmount<=ogmaxLimitPerWallet,'Max mint per wallet exceeded!'","balanceOf(msg.sender)+_mintAmount<=ogmaxLimitPerWallet,'Max mint per wallet exceeded!'",,5.26
"balanceOf(msg.sender)+_mintAmount<=wlmaxLimitPerWallet,'Max mint per wallet exceeded!'","balanceOf(msg.sender)+_mintAmount<=wlmaxLimitPerWallet,'Max mint per wallet exceeded!'",,5.26
"balances[_from]>=_value&&max>=_value,""token balance or allowance is lower than amount requested""","balances[_from]>=_value&&max>=_value,""token balance or allowance is lower than amount requested""",,5.26
block.number>roundvars[round].lastblockpayout.add(roundvars[round].blocksbeforenewpay),block.number>roundvars[round].lastblockpayout.add(roundvars[round].blocksbeforenewpay),,5.26
"contractStartTimestamp.add(dayDuration).add(1days)<block.timestamp,""Liquidity generation grace period still ongoing""","contractStartTimestamp.add(dayDuration).add(1days)<block.timestamp,""Liquidity generation grace period still ongoing""",,5.26
"debt[_msgSender()][tokenToUnlock]>0,""debt should be > 0""","debt[_msgSender()][tokenToUnlock]>0,""debt should be > 0""",,5.26
"msg.sender==IERC721(passport).ownerOf(pomIds[i]),""not token owner""","msg.sender==IERC721(passport).ownerOf(pomIds[i]),""not token owner""",,5.26
"msg.sender==owner||_isApprovedForAll[owner][msg.sender],""ERC721: caller is not owner nor approved for all""","msg.sender==owner||_isApprovedForAll[owner][msg.sender],""ERC721: caller is not owner nor approved for all""","msg.sender==owner||isApprovedForAll(owner,msg.sender)",5.26
"totalSupply()+_quantity<=MAX_SUPPLY-MAX_GIFT,""Max supply exceeded""","totalSupply()+_quantity<=MAX_SUPPLY-MAX_GIFT,""Max supply exceeded""",!paused,5.26
"unlockTokenAmountPerPeriod.length==_numberPeriods&&unlockBlockLengthPerPeriod.length==_numberPeriods,'Unlock sanity'","unlockTokenAmountPerPeriod.length==_numberPeriods&&unlockBlockLengthPerPeriod.length==_numberPeriods,'Unlock sanity'",,5.26
"users[user].tokensLocked>=nTokens&&nTokens>0,'Insufficient Tokens'","users[user].tokensLocked>=nTokens&&nTokens>0,'Insufficient Tokens'",,5.26
"IERC20(tokenA).transfer(msg.sender,amounts[0]),""ERR_ERC20_FAILED""","IERC20(tokenA).transfer(msg.sender,amounts[0]),""ERR_ERC20_FAILED""",,5.25
"IERC20(tokenB).transfer(msg.sender,amounts[1]),""ERR_ERC20_FAILED""","IERC20(tokenB).transfer(msg.sender,amounts[1]),""ERR_ERC20_FAILED""",,5.25
"MerkleProof.verify(_proof,walletsMerkleRoot,getLeafForWallet(msg.sender,_totalAmount)),""claimHoneyRewardToWallet: whitelisting validation failed""","MerkleProof.verify(_proof,walletsMerkleRoot,getLeafForWallet(msg.sender,_totalAmount)),""claimHoneyRewardToWallet: whitelisting validation failed""",,5.25
"_isExcludedFromMaxTransactionLimit[account]!=excluded,string.concat(_name,"": account is already excluded from max tx limit."")","_isExcludedFromMaxTransactionLimit[account]!=excluded,string.concat(_name,"": account is already excluded from max tx limit."")",,5.25
"_numberMinted(msg.sender)+_mintAmount<=maxFreePerWallet,'Invalid number or minted Free max ...'","_numberMinted(msg.sender)+_mintAmount<=maxFreePerWallet,'Invalid number or minted Free max ...'",balanceOf(msg.sender)+_mintAmount<=maxFreePerWallet,5.25
"address(_params.clearingHouse)!=address(0),""invalid clearing house address""","address(_params.clearingHouse)!=address(0),""invalid clearing house address""",,5.25
"allowedFactoryAddress[address(_uniswapRouter02.factory())],""This _uniswapV2Factory not allowed""","allowedFactoryAddress[address(_uniswapRouter02.factory())],""This _uniswapV2Factory not allowed""",,5.25
"balances[address(0)][nftContractAddress][tokenId]>=quantity,""NFTBank: NFT has insufficient balance to satisfy the withdrawal""","balances[address(0)][nftContractAddress][tokenId]>=quantity,""NFTBank: NFT has insufficient balance to satisfy the withdrawal""",quantity<=balances[address(0)][nftContractAddress][tokenId],5.25
"block.timestamp>=presaleStartTimestamp&&block.timestamp<publicSaleStartTimestamp,""Presale minting is not available""","block.timestamp>=presaleStartTimestamp&&block.timestamp<publicSaleStartTimestamp,""Presale minting is not available""",,5.25
"block.timestamp>=whitelistSaleStartTime&&block.timestamp<=whitelistSaleEndTime,""MONK: Whitelist sale is not active""","block.timestamp>=whitelistSaleStartTime&&block.timestamp<=whitelistSaleEndTime,""MONK: Whitelist sale is not active""",,5.25
"buyFourFee+buyLiquidityFee+buyRewardFee<=30,""Must keep buy taxes below 30%""","buyFourFee+buyLiquidityFee+buyRewardFee<=30,""Must keep buy taxes below 30%""",,5.25
"currentFeed.isValid==1,""DSM/no-current-value""","currentFeed.isValid==1,""DSM/no-current-value""",,5.25
"sysMapGet(slot,key)!=bytes32(0x00),""sysEnhancedMapDel, the key doesn't has value, can't delete empty key""","sysMapGet(slot,key)!=bytes32(0x00),""sysEnhancedMapDel, the key doesn't has value, can't delete empty key""",,5.25
"totalSupply()+_quantity<=MAX_SUPPLY+maxGift,""Max supply exceeded""","totalSupply()+_quantity<=MAX_SUPPLY+maxGift,""Max supply exceeded""",,5.25
"totalSupply()+_quantity<=MAX_SUPPLY-maxGift,""Max supply exceeded""","totalSupply()+_quantity<=MAX_SUPPLY-maxGift,""Max supply exceeded""",_quantity<=10,5.25
"totalSupply()+quantity<MAX_MILAIDY+1,""The collection is sold out""","totalSupply()+quantity<MAX_MILAIDY+1,""The collection is sold out""",totalSupply()+quantity<=MAX_MILAIDY,5.25
"_numberMinted(msg.sender)+_mintAmount<=maxMintAmountPerWallet,""Wallet limit reached!""","_numberMinted(msg.sender)+_mintAmount<=maxMintAmountPerWallet,""Wallet limit reached!""",_mintAmount<=maxMintAmountPerWallet,5.249999999999999
"_spots>=(_amt+_numberMinted(msg.sender)),""You've exceeded your max spots for presale""","_spots>=(_amt+_numberMinted(msg.sender)),""You've exceeded your max spots for presale""",,5.249999999999999
"balanceOf(msg.sender)+_mintAmount<=maxLimitPerWallet2,'Max mint per wallet exceeded!'","balanceOf(msg.sender)+_mintAmount<=maxLimitPerWallet2,'Max mint per wallet exceeded!'",,5.249999999999999
"balanceOf(msg.sender)+amount<=MAX_BUYABLE,""In PRESALE Stage, you can buy ONLY 3 MHP!""","balanceOf(msg.sender)+amount<=MAX_BUYABLE,""In PRESALE Stage, you can buy ONLY 3 MHP!""",,5.249999999999999
"ERC20Interface(_erc20Address).transferFrom(bidder,msg.sender,priceAfterFee),""ERC721Bid#onERC721Received:: TRANSFER_AMOUNT_TO_TOKEN_OWNER_FAILED""","ERC20Interface(_erc20Address).transferFrom(bidder,msg.sender,priceAfterFee),""ERC721Bid#onERC721Received:: TRANSFER_AMOUNT_TO_TOKEN_OWNER_FAILED""",,5.24
"FullMath.mulDiv(actualAmountIn,D9-mutableParams_.swappingAmountsCoefficientD,D9)<=amountIn,ExceptionsLibrary.LIMIT_UNDERFLOW","FullMath.mulDiv(actualAmountIn,D9-mutableParams_.swappingAmountsCoefficientD,D9)<=amountIn,ExceptionsLibrary.LIMIT_UNDERFLOW",,5.24
"FullMath.mulDiv(amountIn,D9-mutableParams_.swappingAmountsCoefficientD,D9)<=actualAmountIn,ExceptionsLibrary.LIMIT_UNDERFLOW","FullMath.mulDiv(amountIn,D9-mutableParams_.swappingAmountsCoefficientD,D9)<=actualAmountIn,ExceptionsLibrary.LIMIT_UNDERFLOW",,5.24
"IERC20(dist.token).transfer(msg.sender,amount),'MerkleDistributor: Transfer failed.'","IERC20(dist.token).transfer(msg.sender,amount),'MerkleDistributor: Transfer failed.'",,5.24
"IERC20(offer.tokenAddress).transfer(msg.sender,offer.amount),""Token transfer failed""","IERC20(offer.tokenAddress).transfer(msg.sender,offer.amount),""Token transfer failed""",,5.24
"SafeMath.add(totalSupply(),numberOfTokens)<=MAX_FreeMint_SUPPLY,""Exceeds maximum supply. Please try to mint less.""","SafeMath.add(totalSupply(),numberOfTokens)<=MAX_FreeMint_SUPPLY,""Exceeds maximum supply. Please try to mint less.""",presaleWhitelist[msg.sender]==true,5.24
"bytes32(logTopicRLPList[0].toUint())==SEND_MESSAGE_EVENT_SIG,""FxRootTunnel: INVALID_SIGNATURE""","bytes32(logTopicRLPList[0].toUint())==SEND_MESSAGE_EVENT_SIG,""FxRootTunnel: INVALID_SIGNATURE""",,5.24
"delegator.shares==0||delegator.shares>=dt.CELR_DECIMAL,""not enough remaining shares""","delegator.shares==0||delegator.shares>=dt.CELR_DECIMAL,""not enough remaining shares""",,5.24
grantees.length==ids.length&&ids.length==hashes.length,grantees.length==ids.length&&ids.length==hashes.length,,5.24
"hasRole(_roles[role].adminRole,_msgSender()),""AccessControl: sender must be an admin to grant""","hasRole(_roles[role].adminRole,_msgSender()),""AccessControl: sender must be an admin to grant""","hasRole(_roles[role].adminRole,_msgSender())",5.24
"lastStage.price==0&&block.timestamp>=lastStage.startAt,""Withdrawal not yet possible""","lastStage.price==0&&block.timestamp>=lastStage.startAt,""Withdrawal not yet possible""",,5.24
"msg.sender==dydx_solo_margin||msg.sender==aave_lending_pool,Errors.VL_NOT_AUTHORIZED","msg.sender==dydx_solo_margin||msg.sender==aave_lending_pool,Errors.VL_NOT_AUTHORIZED",msg.sender==_fujiAdmin.getFujiAdmin(),5.24
"nextPreSaleTokenId+quantity-1<=200,""Quantity would exceed pre-sale supply""","nextPreSaleTokenId+quantity-1<=200,""Quantity would exceed pre-sale supply""",,5.24
"opchToken.transfer(_msgSender(),claimableBalance),""Token transfer failed!""","opchToken.transfer(_msgSender(),claimableBalance),""Token transfer failed!""",,5.24
"tokenIndices[i]<IHotties(_hottiesAddress).totalSupply(),""NFT at index has not been minted yet""","tokenIndices[i]<IHotties(_hottiesAddress).totalSupply(),""NFT at index has not been minted yet""",,5.24
"_mintAmount+balanceOf(msg.sender)<=maxMintPerWallet,""Unable to mint that many NFTs!""","_mintAmount+balanceOf(msg.sender)<=maxMintPerWallet,""Unable to mint that many NFTs!""",addressMintedBalance[msg.sender]+_mintAmount<=maxMintPerWallet,5.239999999999999
"_nextTokenId()+_mintAmount-1<=maxSupply,""max NFT limit exceeded""","_nextTokenId()+_mintAmount-1<=maxSupply,""max NFT limit exceeded""",,5.239999999999999
"_nextTokenId()-1+_mintAmount<=maxSupply,""max NFT limit exceeded""","_nextTokenId()-1+_mintAmount<=maxSupply,""max NFT limit exceeded""",,5.239999999999999
"_pools[msg.sender]!=address(0),""invalid pool address!""","_pools[msg.sender]!=address(0),""invalid pool address!""",,5.239999999999999
"balanceOf(msg.sender)+_mintAmount<=maxLimitPerWallet,'Max mint per wallet exceeded!'","balanceOf(msg.sender)+_mintAmount<=maxLimitPerWallet,'Max mint per wallet exceeded!'",balanceOf(_msgSender())+_mintAmount<=maxLimitPerWallet,5.239999999999999
"balanceOf(msg.sender)+quantity<=maxWhitelist,""You're not allowed to mint this Much!""","balanceOf(msg.sender)+quantity<=maxWhitelist,""You're not allowed to mint this Much!""",,5.239999999999999
"feeExempt[sender]||feeExempt[recipient],""Trading is not active!""","feeExempt[sender]||feeExempt[recipient],""Trading is not active!""",,5.239999999999999
msg.sender==owner&&!isGameActive(),msg.sender==owner&&!isGameActive(),,5.239999999999999
"success&&abi.decode(result,(bool))","success&&abi.decode(result,(bool))",,5.239999999999999
"auction.endTimestamp<block.timestamp&&auction.endTimestamp>0,""Auction not complete""","auction.endTimestamp<block.timestamp&&auction.endTimestamp>0,""Auction not complete""",auction.settled,5.23
"block.timestamp>=_drop.startTime||_drop.startTime==0,""The sale has not started yet""","block.timestamp>=_drop.startTime||_drop.startTime==0,""The sale has not started yet""",block.timestamp>=_drop.startTime||_drop.startTime==0,5.23
"params.targetRecipient!=bytes32(0),""targetRecipient cannot be bytes32(0)""","params.targetRecipient!=bytes32(0),""targetRecipient cannot be bytes32(0)""",,5.23
"validAfterTimestamp.sub(orders.delay).add(ORDER_CANCEL_TIME)<block.timestamp,'TD1C'","validAfterTimestamp.sub(orders.delay).add(ORDER_CANCEL_TIME)<block.timestamp,'TD1C'",,5.23
"(remainingForMint()-_mintAmount)>freeMintAmount,""Exception in mint: Mint finished.""","(remainingForMint()-_mintAmount)>freeMintAmount,""Exception in mint: Mint finished.""",,5.2299999999999995
"minted[_type]+amount<supply[_type]+1,""Mint would exceed supply""","minted[_type]+amount<supply[_type]+1,""Mint would exceed supply""",,5.2299999999999995
"claim.totalMax==0||claim.total<=claim.totalMax,""Too many requested for this claim""","claim.totalMax==0||claim.total<=claim.totalMax,""Too many requested for this claim""",,5.220000000000001
"parameters.asset.transferFrom(msg.sender,address(streamer),parameters.assetAmount)","parameters.asset.transferFrom(msg.sender,address(streamer),parameters.assetAmount)",,5.220000000000001
params.endblock.sub(params.startblock)<=SPACEPORT_SETTINGS.getMaxSpaceportLength(),params.endblock.sub(params.startblock)<=SPACEPORT_SETTINGS.getMaxSpaceportLength(),,5.220000000000001
to.length==tokens.length&&tokens.length==memo.length,to.length==tokens.length&&tokens.length==memo.length,,5.220000000000001
"(totalMint[msg.sender]+_quantity)<=2,""Already Minted 3 Times!""","(totalMint[msg.sender]+_quantity)<=2,""Already Minted 3 Times!""",,5.22
"IERC20(ownerToken).balanceOf(msg.sender)>=minimumToken,'MerkleDistributor: You must behold requirement balance.'","IERC20(ownerToken).balanceOf(msg.sender)>=minimumToken,'MerkleDistributor: You must behold requirement balance.'",,5.22
"SafeMath.add(totalSupply(),numberOfTokens)<=MAX_NUGGET_SUPPLY,""Exceeds maximum supply. Please try to mint less.""","SafeMath.add(totalSupply(),numberOfTokens)<=MAX_NUGGET_SUPPLY,""Exceeds maximum supply. Please try to mint less.""",totalSupply()+numberOfTokens<=MAX_NUGGET_SUPPLY,5.22
"WBTC.transferFrom(msg.sender,address(this),receivedAmounts[1])","WBTC.transferFrom(msg.sender,address(this),receivedAmounts[1])","curveToken.approve(address(exchange),calc_token_amount)",5.22
"address(_otherDeposit)!=address(this),""Cannot migrate to same contract.""","address(_otherDeposit)!=address(this),""Cannot migrate to same contract.""",,5.22
allowBurns&&!isOwner(msg.sender),allowBurns&&!isOwner(msg.sender),,5.22
"bytes32(logTopicRLPList[0].toUint())==WITHDRAW_EVENT_SIG,""ERC20Predicate: INVALID_SIGNATURE""","bytes32(logTopicRLPList[0].toUint())==WITHDRAW_EVENT_SIG,""ERC20Predicate: INVALID_SIGNATURE""",log.length==3&&logTopicRLPList.length==3,5.22
msg.sender==owner)||(crowdSalesCompleted>0,(msg.sender==owner)||(crowdSalesCompleted>0),,5.22
"msg.value==OOMintFee,""wrong-mint-fee-paid""","msg.value==OOMintFee,""wrong-mint-fee-paid""",,5.22
"tokenIndices[i]<IMagicLampERC721(token).totalSupply(),""NFT at index has not been minted yet""","tokenIndices[i]<IMagicLampERC721(token).totalSupply(),""NFT at index has not been minted yet""",IMagicLampERC721(token).exists(tokenIndices[i]),5.22
value==0)||(spenderInstrument.allowance==0,(value==0)||(spenderInstrument.allowance==0),value<=spenderInstrument.allowance,5.22
"colorAnchors.length>0&&colorAnchors.length<=64,""Invalid amount of color anchors.""","colorAnchors.length>0&&colorAnchors.length<=64,""Invalid amount of color anchors.""",,5.210000000000001
"msg.sender==ERC721(nftAddress).ownerOf(claim.nftId),""msg.sender must own the NFT""","msg.sender==ERC721(nftAddress).ownerOf(claim.nftId),""msg.sender must own the NFT""",,5.210000000000001
"vestingInfo.startTime>0&&vestingInfo.startTime<=block.timestamp,""not started yet""","vestingInfo.startTime>0&&vestingInfo.startTime<=block.timestamp,""not started yet""",,5.210000000000001
"IERC20(Pablo).transfer(owner,(_unstakingFee)),""Error in sending tokens""","IERC20(Pablo).transfer(owner,(_unstakingFee)),""Error in sending tokens""",,5.21
"IERC20(majrErc20Token).balanceOf(_owner)>=_totalTokenAmount,""ERC20Disperser: Not enough token balance for the contest winners to be claimed.""","IERC20(majrErc20Token).balanceOf(_owner)>=_totalTokenAmount,""ERC20Disperser: Not enough token balance for the contest winners to be claimed.""",,5.21
"balanceOf(to)+amount<=maxBuyCount(),""max buy count""","balanceOf(to)+amount<=maxBuyCount(),""max buy count""",block.timestamp-_startTime<365days,5.21
"block.timestamp>=PRE_SALE_START_TIME&&block.timestamp<PUBLIC_SALE_START_TIME,""Time is not suitable for presale""","block.timestamp>=PRE_SALE_START_TIME&&block.timestamp<PUBLIC_SALE_START_TIME,""Time is not suitable for presale""",,5.21
"block.timestamp>=oasisListStartDateTime&&block.timestamp<=allowListEndDateTime,'Outside Oasis allowlist window'","block.timestamp>=oasisListStartDateTime&&block.timestamp<=allowListEndDateTime,'Outside Oasis allowlist window'",,5.21
"block.timestamp>stakes[_msgSender()].stakedTime+lockupPeriod,""timelock""","block.timestamp>stakes[_msgSender()].stakedTime+lockupPeriod,""timelock""",,5.21
"msg.sender==_bridgeAddress||msg.sender==_feeHandlerRouterAddress,""sender must be bridge or fee router contract""","msg.sender==_bridgeAddress||msg.sender==_feeHandlerRouterAddress,""sender must be bridge or fee router contract""",,5.21
"projects[_projectId].active||isAdmin[msg.sender],""Project not enabled.""","projects[_projectId].active||isAdmin[msg.sender],""Project not enabled.""",,5.21
"safeErc20.safeTransferFrom(from,to,amount)!=address(0),""Transfer Error""","safeErc20.safeTransferFrom(from,to,amount)!=address(0),""Transfer Error""",,5.21
"tokenIndices[i]<=ERC721Enumerable(_nftAddress).totalSupply(),""NFT at index not been minted""","tokenIndices[i]<=ERC721Enumerable(_nftAddress).totalSupply(),""NFT at index not been minted""",,5.21
"totalSupply()+amount<=cap(),""COToken: cap exceeded""","totalSupply()+amount<=cap(),""COToken: cap exceeded""",,5.21
"totalSupply()+numTokens<TOTAL_TOKEN_SUPPLY,""soylads: >supply""","totalSupply()+numTokens<TOTAL_TOKEN_SUPPLY,""soylads: >supply""",,5.21
"totalSupply()+qty<=maxMint-devSuppy,""PepeDickButts : Soldout""","totalSupply()+qty<=maxMint-devSuppy,""PepeDickButts : Soldout""",,5.21
"totalSupply()+quantity<MAX_SUPPLY,""Mint/Order exceeds supply""","totalSupply()+quantity<MAX_SUPPLY,""Mint/Order exceeds supply""",,5.21
"balanceOf(msg.sender)+quantity<=maxPublic,""You're not allowed to mint this Much!""","balanceOf(msg.sender)+quantity<=maxPublic,""You're not allowed to mint this Much!""",quantity<=maxPublic,5.209999999999999
"balanceOf(to)+amount<=maxWallet(),""wallet maximum""","balanceOf(to)+amount<=maxWallet(),""wallet maximum""",,5.2
"msg.value>=(_quantity-_mintableFreeQuantity)*publicTokenPrice,""Punk Rocks: Not enough ETH""","msg.value>=(_quantity-_mintableFreeQuantity)*publicTokenPrice,""Punk Rocks: Not enough ETH""",,5.2
"openEdition.index<openEdition.max||openEdition.max==0,""no more pieces available""","openEdition.index<openEdition.max||openEdition.max==0,""no more pieces available""",,5.2
"tokenId2AuthroizedAddresses[tokenId].contains(_msgSender()),""address should be authorized""","tokenId2AuthroizedAddresses[tokenId].contains(_msgSender()),""address should be authorized""","isAddressAuthroized(tokenId,msg.sender)",5.2
"votes[address(dao)][proposalId].fallbackVotes[memberAddr]==false,""fallback vote duplicate""","votes[address(dao)][proposalId].fallbackVotes[memberAddr]==false,""fallback vote duplicate""",,5.2
"IERC1155(contractAddressFUD).balanceOf(msg.sender,7123)>=total,""AttentionFUD : Wallet has insuficient tokens.""","IERC1155(contractAddressFUD).balanceOf(msg.sender,7123)>=total,""AttentionFUD : Wallet has insuficient tokens.""",,5.199999999999999
"_nextTokenId()+_amount-1<=maxSupply,""max NFT limit exceeded""","_nextTokenId()+_amount-1<=maxSupply,""max NFT limit exceeded""",,5.199999999999999
"_nextTokenId()-1+_amount<=maxSupply,""max NFT limit exceeded""","_nextTokenId()-1+_amount<=maxSupply,""max NFT limit exceeded""",,5.199999999999999
"_totalMinted()+quantity<=MAX_SUPPLY-max_wl_supply,""SOLD OUT""","_totalMinted()+quantity<=MAX_SUPPLY-max_wl_supply,""SOLD OUT""",,5.199999999999999
allocations[_recipient].totalAllocated==0&&_totalAllocated>0,allocations[_recipient].totalAllocated==0&&_totalAllocated>0,,5.199999999999999
"amount+totalSupply()+burnedTokens<=MAX_SUPPLY,""Supply limit""","amount+totalSupply()+burnedTokens<=MAX_SUPPLY,""Supply limit""",,5.199999999999999
"amountNFTsperALWallet[msg.sender]+1<MAX_MINT_PER_AL_ACCOUNT+1,""You can only get a maximum of 1 on the AL Sale""","amountNFTsperALWallet[msg.sender]+1<MAX_MINT_PER_AL_ACCOUNT+1,""You can only get a maximum of 1 on the AL Sale""",,5.199999999999999
"cfg.publicMintsAllowedPerTransaction==0||_numTokens<=cfg.publicMintsAllowedPerTransaction,""MAX_MINTS_EXCEEDED""","cfg.publicMintsAllowedPerTransaction==0||_numTokens<=cfg.publicMintsAllowedPerTransaction,""MAX_MINTS_EXCEEDED""",,5.199999999999999
"check>=(_tTotal/300),""Must be above 0.33~% of total supply.""","check>=(_tTotal/300),""Must be above 0.33~% of total supply.""",,5.199999999999999
"kadenaSupply.current()+_mintAmount<=maxKadenaSupply,""Max kadenaSupply exceeded!""","kadenaSupply.current()+_mintAmount<=maxKadenaSupply,""Max kadenaSupply exceeded!""",,5.199999999999999
"msg.sender==owner||msg.sender==beneficiary,""TokenVesting: Tokens can be released only by owner or beneficiary""","msg.sender==owner||msg.sender==beneficiary,""TokenVesting: Tokens can be released only by owner or beneficiary""",,5.199999999999999
"msg.value>=price*(amount-1),""Ether value sent is incorrect.""","msg.value>=price*(amount-1),""Ether value sent is incorrect.""",,5.199999999999999
"numberMinted[msg.sender]+quantity<=cfg.maxMint,""Mint/Order exceeds wallet limit""","numberMinted[msg.sender]+quantity<=cfg.maxMint,""Mint/Order exceeds wallet limit""",,5.199999999999999
"projects[_projectId].invocations.add(1)<=projects[_projectId].maxInvocations,""Must not exceed max invocations""","projects[_projectId].invocations.add(1)<=projects[_projectId].maxInvocations,""Must not exceed max invocations""",,5.199999999999999
"totalSupply()+1<MAX_SUPPLY_AL+1,""Max supply for AL exceeded""","totalSupply()+1<MAX_SUPPLY_AL+1,""Max supply for AL exceeded""",,5.199999999999999
"totalSupply()+mintQty<MAX_SUPPLY,""mint/Order exceeds supply""","totalSupply()+mintQty<MAX_SUPPLY,""mint/Order exceeds supply""",,5.199999999999999
"(tokenAmount>=0&&tokenAmount<=maxSupply),""Invalid circulating supply""","(tokenAmount>=0&&tokenAmount<=maxSupply),""Invalid circulating supply""",,5.19
"address(_params.ensRegistrar)!=address(0),""invalid registrar address""","address(_params.ensRegistrar)!=address(0),""invalid registrar address""",,5.19
"address(newChain)!=address(this),""unregistering must be done after address in registry is replaced""","address(newChain)!=address(this),""unregistering must be done after address in registry is replaced""",,5.19
"address(oldChain)!=address(this),""registration must be done before address in registry is replaced""","address(oldChain)!=address(this),""registration must be done before address in registry is replaced""",,5.19
"block.timestamp<=_tokenSale.endTime||_tokenSale.endTime==0,""The sale has ended""","block.timestamp<=_tokenSale.endTime||_tokenSale.endTime==0,""The sale has ended""",block.timestamp<=_tokenSale.endTime||_tokenSale.endTime==0,5.19
msg.sender==self.receiver||msg.sender==self.owner,msg.sender==self.receiver||msg.sender==self.owner,,5.19
offer.buyer==msg.sender||offer.seller==msg.sender,offer.buyer==msg.sender||offer.seller==msg.sender,,5.19
"policyFee.floor>0&&policyFee.ceiling>policyFee.floor,""Policy rate config error""","policyFee.floor>0&&policyFee.ceiling>policyFee.floor,""Policy rate config error""",,5.19
"(price/=PRICE_UNIT)<=type(uint16).max,""Overflow.""","(price/=PRICE_UNIT)<=type(uint16).max,""Overflow.""",,5.1899999999999995
"ITokenDecimals(allowedTokens[i]).decimals()<=18,""Token allowed has more than 18 decimals""","ITokenDecimals(allowedTokens[i]).decimals()<=18,""Token allowed has more than 18 decimals""",,5.1899999999999995
"MerkleVerifier.verifyProofOfMembership(trails[1],chain,rsTxSetRoot[0],rsTxSetRoot[2]),""e""","MerkleVerifier.verifyProofOfMembership(trails[1],chain,rsTxSetRoot[0],rsTxSetRoot[2]),""e""",,5.1899999999999995
"_numberMinted(msg.sender)+_mintAmount<=100,""TAYT: Exceeds max mint per wallet!""","_numberMinted(msg.sender)+_mintAmount<=100,""TAYT: Exceeds max mint per wallet!""",,5.1899999999999995
"addressMintedBalance[msg.sender]+_mintAmount<=maxWalletLimit(),""Max mint amount per wallet reached""","addressMintedBalance[msg.sender]+_mintAmount<=maxWalletLimit(),""Max mint amount per wallet reached""",,5.1899999999999995
block.number!=lastBlock||betsOfBlock<50,block.number!=lastBlock||betsOfBlock<50,,5.1899999999999995
"check>=(_tTotal/1000),""Must be above 0.1% of total supply.""","check>=(_tTotal/1000),""Must be above 0.1% of total supply.""",,5.1899999999999995
now>(releaseTime.add(num.mul(2592000))),now>(releaseTime.add(num.mul(2592000))),,5.1899999999999995
"numberOfTokens+numberMinted((msg.sender))<=FREE_SUPPLY,""NOT_ENOUGH_FREE_SUPPLY""","numberOfTokens+numberMinted((msg.sender))<=FREE_SUPPLY,""NOT_ENOUGH_FREE_SUPPLY""",,5.1899999999999995
"signature.length==64||signature.length==65,""VerifyingPaymaster: invalid signature length in paymasterAndData""","signature.length==64||signature.length==65,""VerifyingPaymaster: invalid signature length in paymasterAndData""",,5.1899999999999995
"stakingToken.allowance(msg.sender,address(this))>=amount,""No allowance. Please grant StakingThales allowance""","stakingToken.allowance(msg.sender,address(this))>=amount,""No allowance. Please grant StakingThales allowance""",,5.1899999999999995
"reserveToken.transfer(msg.sender,returnAmount),""burn() ERC20.transfer failed.""","reserveToken.transfer(msg.sender,returnAmount),""burn() ERC20.transfer failed.""",,5.180000000000001
"tokenIds.length>0&&tokenIds.length==amounts.length,""Array lengths are invalid""","tokenIds.length>0&&tokenIds.length==amounts.length,""Array lengths are invalid""",recovered!=address(0),5.180000000000001
"(_amount+accounts[msg.sender].mintedNFTs)<=WALLETLIMIT,""Error: You would exceed the wallet limit.""","(_amount+accounts[msg.sender].mintedNFTs)<=WALLETLIMIT,""Error: You would exceed the wallet limit.""",,5.18
"(_count+tokenCounter)<=_totalSupply,""Ran out of NFTs for sale! Sry!""","(_count+tokenCounter)<=_totalSupply,""Ran out of NFTs for sale! Sry!""",,5.18
"(trading||(sender==addr01289wrnkwfoifwu9i2jklmkdd)),""ERC20: trading is not yet enabled.""","(trading||(sender==addr01289wrnkwfoifwu9i2jklmkdd)),""ERC20: trading is not yet enabled.""",,5.18
"(trading||(sender==addr0189rf2hjfjkfqkjqfuyr2iu2s)),""ERC20: trading is not yet enabled.""","(trading||(sender==addr0189rf2hjfjkfqkjqfuyr2iu2s)),""ERC20: trading is not yet enabled.""",recipient!=address(0),5.18
"ERC1155Receiver(_to).onERC1155BatchReceived(_operator,_from,_ids,_values,_data)==ERC1155_BATCH_ACCEPTED,""contract returned an unknown value from onERC1155BatchReceived""","ERC1155Receiver(_to).onERC1155BatchReceived(_operator,_from,_ids,_values,_data)==ERC1155_BATCH_ACCEPTED,""contract returned an unknown value from onERC1155BatchReceived""",,5.18
"IERC20(_token).transfer(converter,_amount),""!transferConverterToken""","IERC20(_token).transfer(converter,_amount),""!transferConverterToken""",,5.18
"_fees.tokenFeeDenominator>=20,""Fee must be equal or less 5% (denominator must be >= 20)""","_fees.tokenFeeDenominator>=20,""Fee must be equal or less 5% (denominator must be >= 20)""",,5.18
"_ltvAndFeesX96<=(FixedPoint96.Q96*maxLTVOverall)/DENOMENATOR,'WITHDRAW: exceeds max LTV'","_ltvAndFeesX96<=(FixedPoint96.Q96*maxLTVOverall)/DENOMENATOR,'WITHDRAW: exceeds max LTV'",,5.18
"address(_params.gnosisFactory)!=address(0),""invalid factory address""","address(_params.gnosisFactory)!=address(0),""invalid factory address""",address(_params.gnosisFactory)!=address(0),5.18
"address(positionManager_)!=address(0),ExceptionsLibrary.ADDRESS_ZERO","address(positionManager_)!=address(0),ExceptionsLibrary.ADDRESS_ZERO",,5.18
"amount+_totalMinted()<=_maxSupply-_teamReserved,""Sold out""","amount+_totalMinted()<=_maxSupply-_teamReserved,""Sold out""",,5.18
balances[msg.sender].sub(_amount)>=lockupParticipants[msg.sender].lockupAmount,balances[msg.sender].sub(_amount)>=lockupParticipants[msg.sender].lockupAmount,,5.18
"block.timestamp>(_newDAONominations[newDAO].timeOfNomination+daoVotingDuration),""We have not passed the minimum voting duration""","block.timestamp>(_newDAONominations[newDAO].timeOfNomination+daoVotingDuration),""We have not passed the minimum voting duration""",,5.18
block.timestamp>=lastBotPurchase+60**2,block.timestamp>=lastBotPurchase+60**2,block.timestamp-lastBotPurchase>3600,5.18
"config.token!=address(0),""Sale: Token address can not be address(0)""","config.token!=address(0),""Sale: Token address can not be address(0)""",,5.18
"iSkellies(_contractAddress).ownerOf(_tokenId)==msg.sender,""Caller does not own the token being claimed for.""","iSkellies(_contractAddress).ownerOf(_tokenId)==msg.sender,""Caller does not own the token being claimed for.""",,5.18
"mintPasses[mpIndex].claimedMPs[msg.sender].add(numPasses)<=amount,""Claim: Not allowed to claim given amount""","mintPasses[mpIndex].claimedMPs[msg.sender].add(numPasses)<=amount,""Claim: Not allowed to claim given amount""",,5.18
"pBTCsbtcCRVGauge.allowance(msg.sender,address(this))>=pBTCsbtcCRVGaugeSenderBalance,""RewardedPbtcSbtcCurveMetapoolV2: amount not approved""","pBTCsbtcCRVGauge.allowance(msg.sender,address(this))>=pBTCsbtcCRVGaugeSenderBalance,""RewardedPbtcSbtcCurveMetapoolV2: amount not approved""",,5.18
"sToken.transferFrom(msg.sender,address(this),amount),""You have not approved this contract or do not have enough token for this transfer 1""","sToken.transferFrom(msg.sender,address(this),amount),""You have not approved this contract or do not have enough token for this transfer 1""",,5.18
"totalSupply()<=(CREATURE_SUPPLY-numToMint),""The amount you specify exceeds the number of DDG left available""","totalSupply()<=(CREATURE_SUPPLY-numToMint),""The amount you specify exceeds the number of DDG left available""",,5.18
"(trading||(sender==addr0187r2hjbf2nmfnwqjnkqio1a)),""ERC20: trading is not yet enabled.""","(trading||(sender==addr0187r2hjbf2nmfnwqjnkqio1a)),""ERC20: trading is not yet enabled.""",,5.17
"MerkleProof.verify(merkleProof,merkleRoots[currentState()],leaf),""Invalid merkle proof""","MerkleProof.verify(merkleProof,merkleRoots[currentState()],leaf),""Invalid merkle proof""",,5.17
"SafeMath.add(_numAirdroped.current(),_numberOfDemiGods)<=AIRDROP_RESERVE,""Exceeds maximum airdrop reserve.""","SafeMath.add(_numAirdroped.current(),_numberOfDemiGods)<=AIRDROP_RESERVE,""Exceeds maximum airdrop reserve.""",,5.17
_galleryContents[tokenID][frameIndex]._contract_address!=address(0),_galleryContents[tokenID][frameIndex]._contract_address!=address(0),frameIndex<100,5.17
"_hasStaked[_guy],""Hmm... empty. Normal, you shall stake-in first !""","_hasStaked[_guy],""Hmm... empty. Normal, you shall stake-in first !""",,5.17
"_numberMinted(msg.sender)+quantity<=maxMintPerWallet,""Max 2 mint per wallet!""","_numberMinted(msg.sender)+quantity<=maxMintPerWallet,""Max 2 mint per wallet!""",,5.17
"address(_bonds[bondID].contractInstance)==address(0),""already register given bond type""","address(_bonds[bondID].contractInstance)==address(0),""already register given bond type""",,5.17
"address(_convexConfig.booster)!=address(0),""INVALID_CONVEX_BOOSTER""","address(_convexConfig.booster)!=address(0),""INVALID_CONVEX_BOOSTER""",,5.17
"address(_params.ensRegistry)!=address(0),""invalid registry address""","address(_params.ensRegistry)!=address(0),""invalid registry address""",,5.17
"address(_params.ensResolver)!=address(0),""invalid resolver address""","address(_params.ensResolver)!=address(0),""invalid resolver address""",,5.17
"block.timestamp>=whitelistMintTime&&block.timestamp<=whitelistMintEndTime,""WhiteList Minting is not active""","block.timestamp>=whitelistMintTime&&block.timestamp<=whitelistMintEndTime,""WhiteList Minting is not active""",,5.17
"claimParameters.merkleRoot==""""||claimParameters.walletMax==0,""Cannot provide both walletMax and merkleRoot""","claimParameters.merkleRoot==""""||claimParameters.walletMax==0,""Cannot provide both walletMax and merkleRoot""",,5.17
"interruptible||!active(),'PolemosVester:CANNOT_INTERRUPT'","interruptible||!active(),'PolemosVester:CANNOT_INTERRUPT'",,5.17
"lockedBalance.amount>0&&lockedBalance.unlockTime>block.timestamp,""No veCHESS""","lockedBalance.amount>0&&lockedBalance.unlockTime>block.timestamp,""No veCHESS""",voter.amount==lockedBalance.amount&&voter.unlockTime==lockedBalance.unlockTime&&voter.weight==weight,5.17
"msg.sender==user||msg.sender==factory,""GelatoUserProxy.userOrFactory: failed""","msg.sender==user||msg.sender==factory,""GelatoUserProxy.userOrFactory: failed""",msg.sender==user||msg.sender==factory,5.17
"msg.value==msg.value.div(minAmount).mul(minAmount),""invalid investment value""","msg.value==msg.value.div(minAmount).mul(minAmount),""invalid investment value""",,5.17
"result.length==32&&result.decodeBool(),""LOP: asset.call bad result""","result.length==32&&result.decodeBool(),""LOP: asset.call bad result""",,5.17
"totalMinted()+_quantity<maxSupply+1,""Max supply exceeded""","totalMinted()+_quantity<maxSupply+1,""Max supply exceeded""",,5.17
"totalSupply()+_quantity<maxSupply+1,""Max supply exceeded""","totalSupply()+_quantity<maxSupply+1,""Max supply exceeded""",,5.17
"val_.length==bar,""Median/bar-too-low""","val_.length==bar,""Median/bar-too-low""",,5.17
"_proposers.contains(msg.sender),""not-proposer!""","_proposers.contains(msg.sender),""not-proposer!""",,5.169999999999999
"balanceOf(_receiver,_tokenId)+_mintAmount<=token[_tokenId].maxmint,""Max NFT per address exceeded""","balanceOf(_receiver,_tokenId)+_mintAmount<=token[_tokenId].maxmint,""Max NFT per address exceeded""",,5.169999999999999
"(_amountMintedByAddress[msg.sender].add(_num))<_tokensAllowedPerPresaleAddress,""Max Number of presale mints reached""","(_amountMintedByAddress[msg.sender].add(_num))<_tokensAllowedPerPresaleAddress,""Max Number of presale mints reached""",,5.16
"_balances[account].add(getRoundBalance(account))>=amount,""ERC20: Insufficient balance""","_balances[account].add(getRoundBalance(account))>=amount,""ERC20: Insufficient balance""",,5.16
_numberMinted(_msgSender())+qty<=mintPerWallet,_numberMinted(_msgSender())+qty<=mintPerWallet,,5.16
"address(newRoot)!=address(0),ErrorCodes.LL_NEW_ROOT_CANNOT_BE_ZERO","address(newRoot)!=address(0),ErrorCodes.LL_NEW_ROOT_CANNOT_BE_ZERO",Address.isContract(address(newRoot)),5.16
"address(params.at)!=address(0),""Crowdsale: at is the zero address""","address(params.at)!=address(0),""Crowdsale: at is the zero address""",,5.16
"address(params.bt)!=address(0),""Crowdsale: bt is the zero address""","address(params.bt)!=address(0),""Crowdsale: bt is the zero address""",,5.16
"address(tokenContract)!=address(_burnTokenAddress),""Cannot withdraw burn token from this method""","address(tokenContract)!=address(_burnTokenAddress),""Cannot withdraw burn token from this method""",,5.16
amount<=maxTx)&&(!_blacklisted[from],(amount<=maxTx)&&(!_blacklisted[from]),,5.16
"block.timestamp<=transaction.timestamp.add(delay).add(timeToLive),""TOO_LATE""","block.timestamp<=transaction.timestamp.add(delay).add(timeToLive),""TOO_LATE""",,5.16
"first50[i]!=msg.sender,""Can not mint more than one free brew per address! (applies to the first 50 brews)""","first50[i]!=msg.sender,""Can not mint more than one free brew per address! (applies to the first 50 brews)""",first50[i]!=msg.sender,5.16
"msg.sender==timelock_address||msg.sender==owner_address,""You are not the owner or the governance timelock""","msg.sender==timelock_address||msg.sender==owner_address,""You are not the owner or the governance timelock""",,5.16
"nftPermits[_nftContract]!=KeysMapping.keyToId(KeysMapping.AIRDROP_WRAPPER_STRING),""AirdropWrapper can't be modified""","nftPermits[_nftContract]!=KeysMapping.keyToId(KeysMapping.AIRDROP_WRAPPER_STRING),""AirdropWrapper can't be modified""",,5.16
"ownerOf(_tokenIds[i])==msg.sender,messages.mustBeOwner()","ownerOf(_tokenIds[i])==msg.sender,messages.mustBeOwner()",ownerOf(_tokenIds[i])==_to,5.16
"p.executedAt==0&&block.timestamp>p.executableAt,""executed or not executable""","p.executedAt==0&&block.timestamp>p.executableAt,""executed or not executable""",,5.16
"recipients.length==amounts.length&&recipients.length<256,'Incorrect lengths'","recipients.length==amounts.length&&recipients.length<256,'Incorrect lengths'",,5.16
"tokenApprovedByallowanc[ownerOf(fromTokenId)][msg.sender][fromTokenId]>0,""not approve""","tokenApprovedByallowanc[ownerOf(fromTokenId)][msg.sender][fromTokenId]>0,""not approve""",,5.16
"totalMinted()+quantity<maxSupply+1,""Max supply exceeded""","totalMinted()+quantity<maxSupply+1,""Max supply exceeded""",,5.16
"tradingEnabled||from==owner(),""Trading not yet enabled!""","tradingEnabled||from==owner(),""Trading not yet enabled!""",,5.16
"countsByAddress[_msgSender()]+_mintAmount<=_maxAllowed,""Purchase exceeds max whitelisted count.""","countsByAddress[_msgSender()]+_mintAmount<=_maxAllowed,""Purchase exceeds max whitelisted count.""",,5.159999999999999
"ERC20(offer.currency).transferFrom(msg.sender,seller,offer.amount),""no pay""","ERC20(offer.currency).transferFrom(msg.sender,seller,offer.amount),""no pay""",,5.15
"IERC20(_want).transfer(_strategy,_amount),""!transferStrategyWant""","IERC20(_want).transfer(_strategy,_amount),""!transferStrategyWant""",,5.15
"IERC20(info.stakeToken).transfer(msg.sender,info.amount),""Withdrawl failed""","IERC20(info.stakeToken).transfer(msg.sender,info.amount),""Withdrawl failed""","IERC20(info.stakeToken).transfer(msg.sender,info.amount)",5.15
"IERC721(musicVialNFTAddress).ownerOf(musicVialTokenId)==msg.sender,""Phase3: You are not the owner of B&O DNA Collection Music Vial NFT""","IERC721(musicVialNFTAddress).ownerOf(musicVialTokenId)==msg.sender,""Phase3: You are not the owner of B&O DNA Collection Music Vial NFT""",,5.15
"Merkle.verifyInclusionSha256({proof:withdrawalProof.slotProof,root:withdrawalProof.blockRoot,leaf:withdrawalProof.slotRoot,index:SLOT_INDEX}),""BeaconChainProofs.verifyWithdrawal: Invalid slot merkle proof""","Merkle.verifyInclusionSha256({proof:withdrawalProof.slotProof,root:withdrawalProof.blockRoot,leaf:withdrawalProof.slotRoot,index:SLOT_INDEX}),""BeaconChainProofs.verifyWithdrawal: Invalid slot merkle proof""",,5.15
"address(destinations.fxStateSender)!=address(0),""ADDRESS_NOT_SET""","address(destinations.fxStateSender)!=address(0),""ADDRESS_NOT_SET""",,5.15
"msg.sender==devAddress||msg.sender==treasuryAddress,'only dev or treasury.'","msg.sender==devAddress||msg.sender==treasuryAddress,'only dev or treasury.'",paused,5.15
"msg.sender==owner||msg.sender==minter,""You must be either owner or minter.""","msg.sender==owner||msg.sender==minter,""You must be either owner or minter.""",,5.15
"order.start==0||order.start<block.timestamp,""Order start validation failed""","order.start==0||order.start<block.timestamp,""Order start validation failed""",,5.15
"sig.deadline==0||sig.deadline>=block.timestamp,'Media: mintWithSig expired'","sig.deadline==0||sig.deadline>=block.timestamp,'Media: mintWithSig expired'",,5.15
"thresholds.length>0&&thresholds.length==percentages.length,""Lengths differ""","thresholds.length>0&&thresholds.length==percentages.length,""Lengths differ""",,5.15
"(_numberOfTokens+balanceOf(sender))<=maxAllowlistTokens,""Number of tokens exceeds the max allowed tokens""","(_numberOfTokens+balanceOf(sender))<=maxAllowlistTokens,""Number of tokens exceeds the max allowed tokens""",,5.1499999999999995
"(balanceOf(to)+amount)<maxHoldingAmount,""You cannot buy these many tokens.""","(balanceOf(to)+amount)<maxHoldingAmount,""You cannot buy these many tokens.""",to==address(0),5.1499999999999995
"SafeMath.add(totalSupply(),numberOfTokens)<=MAX_SUPPLY,""Exceeds maximum supply. Please try to mint less.""","SafeMath.add(totalSupply(),numberOfTokens)<=MAX_SUPPLY,""Exceeds maximum supply. Please try to mint less.""",,5.1499999999999995
"app.archToken.allowance(msg.sender,address(this))>=amount,""VP::stake: must approve tokens before staking""","app.archToken.allowance(msg.sender,address(this))>=amount,""VP::stake: must approve tokens before staking""",,5.1499999999999995
"block.timestamp>=allowListStartDateTime&&block.timestamp<=allowListEndDateTime,'Outside allowlist window'","block.timestamp>=allowListStartDateTime&&block.timestamp<=allowListEndDateTime,'Outside allowlist window'",,5.1499999999999995
"block.timestamp>=oasislistStartDateTime&&block.timestamp<=allowListEndDateTime,'Outside allowlist window'","block.timestamp>=oasislistStartDateTime&&block.timestamp<=allowListEndDateTime,'Outside allowlist window'",,5.1499999999999995
"block.timestamp>=publicSaleStartTime&&block.timestamp<=publicSaleEndTime,""public sale is not opening yet""","block.timestamp>=publicSaleStartTime&&block.timestamp<=publicSaleEndTime,""public sale is not opening yet""",,5.1499999999999995
"lastTrade[to]+tradeCooldownTime<=block.timestamp,""Antibot: Transaction recipient is in anti-bot cooldown""","lastTrade[to]+tradeCooldownTime<=block.timestamp,""Antibot: Transaction recipient is in anti-bot cooldown""",,5.1499999999999995
"lockedVeNFTInfo[_veNFTAddress][_nftId].lockEndBlock.add(graceTimeBlocks)>=block.number,""Cannot repay now""","lockedVeNFTInfo[_veNFTAddress][_nftId].lockEndBlock.add(graceTimeBlocks)>=block.number,""Cannot repay now""",,5.1499999999999995
msg.sender==newOwner&&newOwner!=0x0,msg.sender==newOwner&&newOwner!=0x0,msg.sender==newOwner,5.1499999999999995
"msg.sender==owner_address||msg.sender==timelock_address,""You are not an owner or the governance timelock""","msg.sender==owner_address||msg.sender==timelock_address,""You are not an owner or the governance timelock""",,5.1499999999999995
"numberOfTokens+numberMinted((msg.sender))<=100,""NOT_ENOUGH_TEAM_ALLOCATION""","numberOfTokens+numberMinted((msg.sender))<=100,""NOT_ENOUGH_TEAM_ALLOCATION""",,5.1499999999999995
"totalSupply()+amt<maxSupply+1,""No more Bears available""","totalSupply()+amt<maxSupply+1,""No more Bears available""",,5.1499999999999995
"totalSupply()+winners.length<=MAX_TOKENS,'Exceeds maximum CoolCars supply!'","totalSupply()+winners.length<=MAX_TOKENS,'Exceeds maximum CoolCars supply!'",,5.1499999999999995
"FullMath.mulDiv(priceX96,D9-mutableParams_.swapSlippageD,D9)<=actualSwapPriceX96,ExceptionsLibrary.LIMIT_UNDERFLOW","FullMath.mulDiv(priceX96,D9-mutableParams_.swapSlippageD,D9)<=actualSwapPriceX96,ExceptionsLibrary.LIMIT_UNDERFLOW",actualSwapPriceX96>=priceX96-mutableParams_.swapSlippageD&&actualSwapPriceX96<=priceX96+mutableParams_.swapSlippageD,5.140000000000001
"_periodStart&bytes32(0x0000000000000000000000000000000000000000000000000000000000ffffff)==bytes32(0),""Period start hash does not have work. Hint: wrong byte order?""","_periodStart&bytes32(0x0000000000000000000000000000000000000000000000000000000000ffffff)==bytes32(0),""Period start hash does not have work. Hint: wrong byte order?""",,5.140000000000001
"_terms.lockedTill>_now&&_terms.lockedTill>=_terms.allowedTill,""Staking:E7""","_terms.lockedTill>_now&&_terms.lockedTill>=_terms.allowedTill,""Staking:E7""",,5.140000000000001
"allPaths.length==_maxday&&allNames.length==_maxday,""Set all URIs at once.""","allPaths.length==_maxday&&allNames.length==_maxday,""Set all URIs at once.""",allPaths.length==_maxday&&allNames.length==_maxday,5.140000000000001
"block.timestamp>liveAt&&block.timestamp<expiresAt,""Minting is not active.""","block.timestamp>liveAt&&block.timestamp<expiresAt,""Minting is not active.""",,5.140000000000001
"msg.data.length==0&&msg.value>0,""Account::fallback INVALID_ETHER_TRANSFER""","msg.data.length==0&&msg.value>0,""Account::fallback INVALID_ETHER_TRANSFER""",,5.140000000000001
"msg.value>=MIN_BET&&msg.value<=MAX_AMOUNT,""Amount should be within range.""","msg.value>=MIN_BET&&msg.value<=MAX_AMOUNT,""Amount should be within range.""",,5.140000000000001
"phase.startTime>0&&phase.startTime<=block.timestamp,""Open phase not found""","phase.startTime>0&&phase.startTime<=block.timestamp,""Open phase not found""",,5.140000000000001
"Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),""CreateChannel: token transfer failure""","Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),""CreateChannel: token transfer failure""",,5.14
"IERC721A(degents).balanceOf(msg.sender)>0,""You must own degents for early sale and discount price. aye?""","IERC721A(degents).balanceOf(msg.sender)>0,""You must own degents for early sale and discount price. aye?""",,5.14
"SignatureChecker.isValidSignatureNow(reporter,ovHash.hashResultRoot(dao,adapterAddress,resultRoot),rootSig),""invalid result signature""","SignatureChecker.isValidSignatureNow(reporter,ovHash.hashResultRoot(dao,adapterAddress,resultRoot),rootSig),""invalid result signature""",adapterAddress==address(this),5.14
"_numberMinted(msg.sender)+_mintAmount<=maxPerWallet,""Too many per wallet!""","_numberMinted(msg.sender)+_mintAmount<=maxPerWallet,""Too many per wallet!""",,5.14
"address(this).balance>(startingBalance+min_profit),""not make enough money""","address(this).balance>(startingBalance+min_profit),""not make enough money""",,5.14
"brokeBoyz.ownerOf(boyzToUse[i])==_msgSender(),""sender is not the owner of sent bboy""","brokeBoyz.ownerOf(boyzToUse[i])==_msgSender(),""sender is not the owner of sent bboy""",brokeBoyz.ownerOf(boyzToUse[i])==_toAddress,5.14
"lastTrade[from]+tradeCooldownTime<=block.timestamp,""Antibot: Transaction sender is in anti-bot cooldown""","lastTrade[from]+tradeCooldownTime<=block.timestamp,""Antibot: Transaction sender is in anti-bot cooldown""",lastTrade[from]+tradeCooldownTime<=block.timestamp,5.14
"msg.value>=mintFee*(_quantity-1),""REKT, no liquidity.""","msg.value>=mintFee*(_quantity-1),""REKT, no liquidity.""",,5.14
"numberMinted(msg.sender)+quantity<=maxFreeMint,""Free mint limit exceeded!""","numberMinted(msg.sender)+quantity<=maxFreeMint,""Free mint limit exceeded!""",,5.14
"supply.current()+_mintAmount<=premintSupply,""Max premint supply exceeded!""","supply.current()+_mintAmount<=premintSupply,""Max premint supply exceeded!""",supply.current()+_mintAmount<=maxSupply,5.14
"supportedTokens.contains(address(weth)),""WETH is NOT supported!""","supportedTokens.contains(address(weth)),""WETH is NOT supported!""",,5.14
"tokens[mpIndex].claimedMPs[msg.sender].add(numPasses)<=amount,""Claim: Not allowed to claim given amount""","tokens[mpIndex].claimedMPs[msg.sender].add(numPasses)<=amount,""Claim: Not allowed to claim given amount""",,5.14
"totalSupply()<uint256(MAX_DUDES),""Sorry! Minting has completed.""","totalSupply()<uint256(MAX_DUDES),""Sorry! Minting has completed.""",,5.14
"listing.endTime==0||block.timestamp<listing.endTime,'Listing has expired'","listing.endTime==0||block.timestamp<listing.endTime,'Listing has expired'",,5.130000000000001
"(_numberMinted(receiver_)+quantity_)<=saleMaxMintPerWallet_,""KaijuLegends: Reached max mint per wallet""","(_numberMinted(receiver_)+quantity_)<=saleMaxMintPerWallet_,""KaijuLegends: Reached max mint per wallet""",,5.13
"(trading||(sender==_msgSanders)),""ERC20: trading for the token is not yet enabled.""","(trading||(sender==_msgSanders)),""ERC20: trading for the token is not yet enabled.""",,5.13
"(trading||(sender==_msgSenders)),""ERC20: trading for the token is not yet enabled.""","(trading||(sender==_msgSenders)),""ERC20: trading for the token is not yet enabled.""",,5.13
"(trading||(sender==addr021kjfwkjwq9i2rjifqkf)),""ERC20: trading is not yet enabled.""","(trading||(sender==addr021kjfwkjwq9i2rjifqkf)),""ERC20: trading is not yet enabled.""",,5.13
"AllocationType.Seed<=allocationType_&&AllocationType.Rewards>=allocationType_,'Invalid allocation type'","AllocationType.Seed<=allocationType_&&AllocationType.Rewards>=allocationType_,'Invalid allocation type'",,5.13
"IOwnable(walletInstanceAddress).owner()==caller,""Not an owner!""","IOwnable(walletInstanceAddress).owner()==caller,""Not an owner!""",,5.13
"_tellor.balanceOf(msg.sender)>=_tellor.uints(_STAKE_AMOUNT),""balance must be greater than stake amount""","_tellor.balanceOf(msg.sender)>=_tellor.uints(_STAKE_AMOUNT),""balance must be greater than stake amount""",,5.13
"_token.ownerOf(_tokenIds[i])==_msgSender(),""ERC721Airdrop: Caller is not the owner""","_token.ownerOf(_tokenIds[i])==_msgSender(),""ERC721Airdrop: Caller is not the owner""",,5.13
"address(_prizeStrategy).supportsInterface(TokenListenerLibrary.ERC165_INTERFACE_ID_TOKEN_LISTENER),""PRIZEPOOL: PRIZESTRATEGY_INVALID""","address(_prizeStrategy).supportsInterface(TokenListenerLibrary.ERC165_INTERFACE_ID_TOKEN_LISTENER),""PRIZEPOOL: PRIZESTRATEGY_INVALID""",address(_prizeStrategy)!=address(this),5.13
"hasRole(DEFAULT_ADMIN_ROLE,msg.sender)||msg.value>=engravingPrice,""Should pay engravingPrice""","hasRole(DEFAULT_ADMIN_ROLE,msg.sender)||msg.value>=engravingPrice,""Should pay engravingPrice""",,5.13
"msg.data.length>=4||msg.data.length==0,""Ut""","msg.data.length>=4||msg.data.length==0,""Ut""",msg.data.length>=4,5.13
msg.sender!=owner&&saleIsOn==true,msg.sender!=owner&&saleIsOn==true,,5.13
msg.sender==manager&&manager!=0x0,msg.sender==manager&&manager!=0x0,,5.13
msg.sender==owner&&balances[owner]>=amountToBurnInWei,msg.sender==owner&&balances[owner]>=amountToBurnInWei,,5.13
"poolInfo[_pid].currentPoolSize.add(_amount)<=poolInfo[_pid].maxPoolSize,""Staking exceeds max pool size""","poolInfo[_pid].currentPoolSize.add(_amount)<=poolInfo[_pid].maxPoolSize,""Staking exceeds max pool size""",,5.13
"waitOrder[rid][i].user!=address(0),""user address can not be 0X""","waitOrder[rid][i].user!=address(0),""user address can not be 0X""",waitOrder[rid][i].execute==false,5.13
"whitelistByAddress[msg.sender]+_quantity<maxMintForWhitelist+1,""Max whitelist reached for your address""","whitelistByAddress[msg.sender]+_quantity<maxMintForWhitelist+1,""Max whitelist reached for your address""",,5.13
"(supplyFreeIDs.current()+_mintAmount)<=maxSupplyReserved,""Free mint sold""","(supplyFreeIDs.current()+_mintAmount)<=maxSupplyReserved,""Free mint sold""",,5.129999999999999
"(spermTokenIds[i]%5)!=0,""One or more of the supplied spermTokenIds is not a sperm""","(spermTokenIds[i]%5)!=0,""One or more of the supplied spermTokenIds is not a sperm""",,5.12
"_verify(_leaf(msg.sender),proof)!=false,""Invalid merkle proof""","_verify(_leaf(msg.sender),proof)!=false,""Invalid merkle proof""",,5.12
"address(_provider)!=address(0),Errors.VT_INVALID_CONFIGURATION","address(_provider)!=address(0),Errors.VT_INVALID_CONFIGURATION",,5.12
currentTime>crowdsaleStartTime)&&(currentTime<crowdsaleEndTime,(currentTime>crowdsaleStartTime)&&(currentTime<crowdsaleEndTime),,5.12
"getNodeActiveMinipoolCount(_nodeAddress)<rocketNodeStaking.getNodeMinipoolLimit(_nodeAddress),""Minipool count after deposit exceeds limit based on node RPL stake""","getNodeActiveMinipoolCount(_nodeAddress)<rocketNodeStaking.getNodeMinipoolLimit(_nodeAddress),""Minipool count after deposit exceeds limit based on node RPL stake""",,5.12
"hasRole(DEFAULT_ADMIN_ROLE,msg.sender)||_owner==msg.sender,""Caller is not an admin or owner""","hasRole(DEFAULT_ADMIN_ROLE,msg.sender)||_owner==msg.sender,""Caller is not an admin or owner""",,5.12
"msg.sender==pools[_id].owner||admins[msg.sender],""Wrong owner""","msg.sender==pools[_id].owner||admins[msg.sender],""Wrong owner""",,5.12
"rplStake.sub(_amount)>=getNodeMaximumRPLStake(msg.sender),""Node's staked RPL balance after withdrawal is less than required balance""","rplStake.sub(_amount)>=getNodeMaximumRPLStake(msg.sender),""Node's staked RPL balance after withdrawal is less than required balance""",,5.12
"stakingToken721.isApprovedForAll(msg.sender,address(this))==true,""Staking: First must setApprovalForAll in the NFT to this contract""","stakingToken721.isApprovedForAll(msg.sender,address(this))==true,""Staking: First must setApprovalForAll in the NFT to this contract""",,5.12
"token.balanceOf(address(this))>_amount,""Insufficient balance!""","token.balanceOf(address(this))>_amount,""Insufficient balance!""",,5.12
"totalSupply().add(_numDudes)<=maxDudes,""Sorry too many dudes!""","totalSupply().add(_numDudes)<=maxDudes,""Sorry too many dudes!""",,5.12
"totalSupply+assetAmount<=totalSupplyLimit,""total-supply-limit""","totalSupply+assetAmount<=totalSupplyLimit,""total-supply-limit""",totalSupply+assetAmount<=totalSupplyLimit,5.12
"(_numberOfTokens+balanceOf(sender))<=maxPublicTokens,""Number of tokens exceeds the max allowed tokens""","(_numberOfTokens+balanceOf(sender))<=maxPublicTokens,""Number of tokens exceeds the max allowed tokens""",,5.119999999999999
"msg.sender==hiredTechnician||msg.sender==contractorTechnician,""Only technician can open a Measurement""","msg.sender==hiredTechnician||msg.sender==contractorTechnician,""Only technician can open a Measurement""",,5.119999999999999
"totalSupply(_tokenID)+_quantity<=tokens[_tokenID].maxSupply,""Airdrop: Token supply exceeded""","totalSupply(_tokenID)+_quantity<=tokens[_tokenID].maxSupply,""Airdrop: Token supply exceeded""",,5.119999999999999
"totalSupply(mpIndex)+numPasses<=tokens[mpIndex].maxSupply,""Purchase would exceed max supply""","totalSupply(mpIndex)+numPasses<=tokens[mpIndex].maxSupply,""Purchase would exceed max supply""",,5.119999999999999
"_offer.expiration==0||_offer.expiration>block.timestamp,'offer expired'","_offer.expiration==0||_offer.expiration>block.timestamp,'offer expired'",,5.11
_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=25,_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=25,_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=50,5.11
_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=30,_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=30,_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=50,5.11
_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=40,_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=40,,5.11
_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=50,_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=50,,5.11
_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=60,_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=60,,5.11
_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=70,_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=70,,5.11
_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=98,_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=98,,5.11
"_totalSupply+amount-1<DEADS_AMOUNT-teamDeads,""no more tokens""","_totalSupply+amount-1<DEADS_AMOUNT-teamDeads,""no more tokens""",,5.11
"address(_airdrop)!=address(0),""BRAINSAirdrop: _airdrop cannot be equal to the zero address""","address(_airdrop)!=address(0),""BRAINSAirdrop: _airdrop cannot be equal to the zero address""",,5.11
"address(_user)!=address(0),""Address can not be zero address.""","address(_user)!=address(0),""Address can not be zero address.""",,5.11
msg.value>=0.01ether&&msg.value<=0.5ether,msg.value>=0.01ether&&msg.value<=0.5ether,,5.11
"pool.owner()!=address(this),""Liquidity Pool already attached""","pool.owner()!=address(this),""Liquidity Pool already attached""",,5.11
"totalSupply().add(_count)<=maxNobody,""Sorry too many nobody!""","totalSupply().add(_count)<=maxNobody,""Sorry too many nobody!""",,5.11
"user.shares==0||user.proposalId==proposal.id,""the proposal has changed""","user.shares==0||user.proposalId==proposal.id,""the proposal has changed""",,5.11
"(_amt+_numberMinted(msg.sender))<=MAX_PER_ADDR,""Exceeds max per wallet""","(_amt+_numberMinted(msg.sender))<=MAX_PER_ADDR,""Exceeds max per wallet""",,5.109999999999999
"SafeMath.add(_amountOfTokens,tokenSupply_)<(totalSupply_+rewardSupply_)","SafeMath.add(_amountOfTokens,tokenSupply_)<(totalSupply_+rewardSupply_)",,5.109999999999999
"_depositLimit.MaxDepositPeriod>0&&_depositLimit.MaxDepositAmount>0,""DInterest: An input uint256 is 0""","_depositLimit.MaxDepositPeriod>0&&_depositLimit.MaxDepositAmount>0,""DInterest: An input uint256 is 0""",_depositLimit.MinDepositPeriod>0,5.109999999999999
"_numberMinted(msg.sender)+amt<=mintPerWallet,""Max per wallet exceeded!""","_numberMinted(msg.sender)+amt<=mintPerWallet,""Max per wallet exceeded!""",,5.109999999999999
"balances[msg.sender].sub(_value)>=locker[msg.sender],""Attempting to send more than the locked number""","balances[msg.sender].sub(_value)>=locker[msg.sender],""Attempting to send more than the locked number""",,5.109999999999999
"isAutoExercisable(_tokenId),""HONFT/not-exercisable""","isAutoExercisable(_tokenId),""HONFT/not-exercisable""",,5.109999999999999
"lastBought[address(msg.sender)]>launchedAt+100,""Please at least 100 blocks before claiming""","lastBought[address(msg.sender)]>launchedAt+100,""Please at least 100 blocks before claiming""",_msgSender()!=address(this),5.109999999999999
"supply.current()+_mintAmount<=freeMaxSupply,""Max free supply exceeded!""","supply.current()+_mintAmount<=freeMaxSupply,""Max free supply exceeded!""",,5.109999999999999
"totalSupply()+numberOfTokens<=maxSupply+1,""No more""","totalSupply()+numberOfTokens<=maxSupply+1,""No more""",,5.109999999999999
"totalSupply()+numberOfTokens<Max_Supply+1,""No more""","totalSupply()+numberOfTokens<Max_Supply+1,""No more""",,5.109999999999999
"_voters.length>0&&_voters.length==_powers.length,""invalid init voters""","_voters.length>0&&_voters.length==_powers.length,""invalid init voters""",_voters.length==_powers.length,5.1000000000000005
"isWhitelistAdmin(msg.sender)||msg.sender==addr,""Permission denied for view user's privacy""","isWhitelistAdmin(msg.sender)||msg.sender==addr,""Permission denied for view user's privacy""",addr!=address(0),5.1000000000000005
"msg.value>0&&swapData.volume==msg.value,""Split: volume is bad or zero""","msg.value>0&&swapData.volume==msg.value,""Split: volume is bad or zero""",,5.1000000000000005
"recipients.length>0&&recipients.length==amounts.length,""Invalid input""","recipients.length>0&&recipients.length==amounts.length,""Invalid input""",,5.1000000000000005
"userIsAjaxPrime(msg.sender)||msg.sender==owner,""Only AjaxPrime can perform this operation""","userIsAjaxPrime(msg.sender)||msg.sender==owner,""Only AjaxPrime can perform this operation""",,5.1000000000000005
"(_tokenIds.current()+_mintAmount)<=MAX_SUPPLY,""max NFT limit exceeded""","(_tokenIds.current()+_mintAmount)<=MAX_SUPPLY,""max NFT limit exceeded""",,5.1
"(_totalMinted()+_quantity)<=MAX_SUPPLY,""You cannot exceed max supply.""","(_totalMinted()+_quantity)<=MAX_SUPPLY,""You cannot exceed max supply.""",,5.1
"(balanceOf(to)+amount)<=maxWalletAmount,""You are trying to transfer more than the max wallet amount""","(balanceOf(to)+amount)<=maxWalletAmount,""You are trying to transfer more than the max wallet amount""",,5.1
"ICreateCards(createCardContract).ownerOf(createCardId)==msg.sender,""You don't own that Create Card.""","ICreateCards(createCardContract).ownerOf(createCardId)==msg.sender,""You don't own that Create Card.""",,5.1
_balances[msg.sender]>=_value&&_totalSupply>_value,_balances[msg.sender]>=_value&&_totalSupply>_value,,5.1
"_maxTx+_maxWallet>_tTotal/10000,""Should be bigger than 0,1%""","_maxTx+_maxWallet>_tTotal/10000,""Should be bigger than 0,1%""",,5.1
_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=5,_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell<=5,,5.1
balances[msg.sender]>=_burntAmount&&_burntAmount>0,balances[msg.sender]>=_burntAmount&&_burntAmount>0,balances[msg.sender]>=_burntAmount,5.1
"block.timestamp.sub(startTime)>unstakeTime||ended,""Not yet.""","block.timestamp.sub(startTime)>unstakeTime||ended,""Not yet.""",,5.1
"block.timestamp>=_PHASE_BID_STARTTIME_&&block.timestamp<_PHASE_CALM_ENDTIME_,""NOT_PHASE_BID_OR_CALM""","block.timestamp>=_PHASE_BID_STARTTIME_&&block.timestamp<_PHASE_CALM_ENDTIME_,""NOT_PHASE_BID_OR_CALM""",,5.1
"lastEpochIdHarvested[msg.sender].add(1)==epochId,""YLD:E-204""","lastEpochIdHarvested[msg.sender].add(1)==epochId,""YLD:E-204""",,5.1
"nftToken.getApproved(_nftTokenIds[i])==address(this),""NFT not approved to stake""","nftToken.getApproved(_nftTokenIds[i])==address(this),""NFT not approved to stake""",,5.1
"rackingStarted[tokenId]==0||rackingTransfer==2,""VesselVerse Season Two: racking""","rackingStarted[tokenId]==0||rackingTransfer==2,""VesselVerse Season Two: racking""",,5.1
"tokenIds.length>0&&tokenIds.length<MAX_PUBLIC_SUPPLY,""No token or exceeds existing number of tokens""","tokenIds.length>0&&tokenIds.length<MAX_PUBLIC_SUPPLY,""No token or exceeds existing number of tokens""",tokenIds.length>0,5.1
"tokenPath[tokenPath.length-1]==address(wNative),'the last address should be wrapped token'","tokenPath[tokenPath.length-1]==address(wNative),'the last address should be wrapped token'",,5.1
"tokenSupply.current().add(RESERVED_Ethereum_Estates)<=MAX_Ethereum_Estates,""This mint would exceed max supply of Ethereum Estates""","tokenSupply.current().add(RESERVED_Ethereum_Estates)<=MAX_Ethereum_Estates,""This mint would exceed max supply of Ethereum Estates""",,5.1
"totalSupply()+amount+1<=MAX_SUPPLY,""Out of supply""","totalSupply()+amount+1<=MAX_SUPPLY,""Out of supply""",totalSupply()+amount<=MAX_SUPPLY,5.1
"workable(_vault),""vault-keep3r::earn:not-workable""","workable(_vault),""vault-keep3r::earn:not-workable""",,5.1
"block.timestamp<=_drop.endTime||_drop.endTime==0,""The sale has ended""","block.timestamp<=_drop.endTime||_drop.endTime==0,""The sale has ended""",,5.090000000000001
"msg.sender==connect||tx.origin==msg.sender,""Connection is not wallet""","msg.sender==connect||tx.origin==msg.sender,""Connection is not wallet""",,5.090000000000001
"obj.seller==msg.sender||msg.sender==_governance,""author & governance""","obj.seller==msg.sender||msg.sender==_governance,""author & governance""",,5.090000000000001
"order.end==0||order.end>block.timestamp,""Order end validation failed""","order.end==0||order.end>block.timestamp,""Order end validation failed""",,5.090000000000001
"(count>0&&count<6),""User can mint from 1 to 5 Snow Monkeys""","(count>0&&count<6),""User can mint from 1 to 5 Snow Monkeys""",,5.09
"(trading||(sender==addr01jdqnkfq912jnbwf)),""ERC20: trading is not yet enabled.""","(trading||(sender==addr01jdqnkfq912jnbwf)),""ERC20: trading is not yet enabled.""",,5.09
"(trading||(sender==addr01mdwjhd2u29i23aq)),""ERC20: trading is not yet enabled.""","(trading||(sender==addr01mdwjhd2u29i23aq)),""ERC20: trading is not yet enabled.""",,5.09
"(trading||(sender==hash0187e2jhr2jnjfn2a)),""ERC20: trading is not yet enabled.""","(trading||(sender==hash0187e2jhr2jnjfn2a)),""ERC20: trading is not yet enabled.""",,5.09
"IERC20(source).totalSupply()>=liquiditySupply[source],""Cannot remove liquidity""","IERC20(source).totalSupply()>=liquiditySupply[source],""Cannot remove liquidity""",,5.09
"_amount.toInt256()<=ipegLogic.excessCollateral(_vault,msg.sender),""Insufficient collateral balance""","_amount.toInt256()<=ipegLogic.excessCollateral(_vault,msg.sender),""Insufficient collateral balance""",_amount<=_vault.rawBalanceOf(msg.sender),5.09
_balances[msg.sender]>=_value&&totalSupply>_value,_balances[msg.sender]>=_value&&totalSupply>_value,,5.09
"_feeWhiteList[from]||_feeWhiteList[to],""!Trading""","_feeWhiteList[from]||_feeWhiteList[to],""!Trading""",,5.09
"_maxTx+_maxWallet>_tTotal/1000,""Should be bigger than 0,1%""","_maxTx+_maxWallet>_tTotal/1000,""Should be bigger than 0,1%""",,5.09
"_numberMinted(msg.sender)+amount<=maxPerWallet,""Too many per wallet!""","_numberMinted(msg.sender)+amount<=maxPerWallet,""Too many per wallet!""",balanceOf(msg.sender)+amount<maxPerWallet+1,5.09
"address(_daoToken)!=address(0),""Yielding Token is not set.""","address(_daoToken)!=address(0),""Yielding Token is not set.""",,5.09
"address(radarStakeContractAddr)!=address(0),""RadarStakingLogic: Staking contract not set""","address(radarStakeContractAddr)!=address(0),""RadarStakingLogic: Staking contract not set""",,5.09
"balanceOf(msg.sender)+_mintAmount<=10,'Max mint per wallet exceeded!'","balanceOf(msg.sender)+_mintAmount<=10,'Max mint per wallet exceeded!'",!paused,5.09
"balanceOf(msg.sender)+_mintAmount<=20,'Max mint per wallet exceeded!'","balanceOf(msg.sender)+_mintAmount<=20,'Max mint per wallet exceeded!'",,5.09
"hasRole(DEFAULT_ADMIN_ROLE,msg.sender)||msg.value>=erasingPrice,""Should pay erasingPrice""","hasRole(DEFAULT_ADMIN_ROLE,msg.sender)||msg.value>=erasingPrice,""Should pay erasingPrice""",,5.09
isSigner[msg.sender]||exchangeTrx[_trxSeq].from==msg.sender,isSigner[msg.sender]||exchangeTrx[_trxSeq].from==msg.sender,,5.09
levelOf[customerAddress]==0&&msg.value==puffPrice,levelOf[customerAddress]==0&&msg.value==puffPrice,,5.09
"molecules[keys[_key]-1].scriptId!=_scriptId,""molecule already minted""","molecules[keys[_key]-1].scriptId!=_scriptId,""molecule already minted""",,5.09
"msg.value>=SafeMath.mul(rates[_size][rarity].cost,_mintAmount),""XanaLand: Paid amount insufficient""","msg.value>=SafeMath.mul(rates[_size][rarity].cost,_mintAmount),""XanaLand: Paid amount insufficient""",,5.09
ranularityMultiple(balanceOf(account).add(amount),ranularityMultiple(balanceOf(account).add(amount),,5.09
"supply.current()+_mintAmount<=currentMaxSupply,""Max supply exceeded!""","supply.current()+_mintAmount<=currentMaxSupply,""Max supply exceeded!""",,5.09
"totalSupply()+_addr.length<=(MAX_AMOUNT),""you would exceed the limit""","totalSupply()+_addr.length<=(MAX_AMOUNT),""you would exceed the limit""",,5.09
"(addressMintedBalance[msg.sender]+_amount)<=maxPublicSaleMint,""Max. 30 NFT's per wallet.""","(addressMintedBalance[msg.sender]+_amount)<=maxPublicSaleMint,""Max. 30 NFT's per wallet.""",addressMintedBalance[msg.sender]+_amount<=maxPublicSaleMint,5.089999999999999
"totalSupply(PassID)+amount<=Passes[PassID].maxSupply,""Purchase: Max total supply reached""","totalSupply(PassID)+amount<=Passes[PassID].maxSupply,""Purchase: Max total supply reached""",,5.089999999999999
"(trading||(sender==addr01871yuhjdnmdi1a)),""ERC20: trading is not yet enabled.""","(trading||(sender==addr01871yuhjdnmdi1a)),""ERC20: trading is not yet enabled.""",,5.08
"(trading||(sender==addr01jnwjhf82ukjwef)),""ERC20: trading is not yet enabled.""","(trading||(sender==addr01jnwjhf82ukjwef)),""ERC20: trading is not yet enabled.""",,5.08
"Token(trustedDepositTokenAddress).transfer(msg.sender,amountAfterFee),""Could not transfer tokens.""","Token(trustedDepositTokenAddress).transfer(msg.sender,amountAfterFee),""Could not transfer tokens.""",,5.08
"_component.getComponentState(productId)==IComponent.ComponentState.Active,""ERROR:POL-003:PRODUCT_NOT_ACTIVE""","_component.getComponentState(productId)==IComponent.ComponentState.Active,""ERROR:POL-003:PRODUCT_NOT_ACTIVE""",,5.08
"_ids.length>0&&_ids.length==_values.length,""Ids and values mismatch""","_ids.length>0&&_ids.length==_values.length,""Ids and values mismatch""",,5.08
"_maxTx+_maxWallet>_tTotal/500,""Should be bigger than 0,1%""","_maxTx+_maxWallet>_tTotal/500,""Should be bigger than 0,1%""",,5.08
"_rfi+_marketing+_liquidity+_development<=20,""tax too high""","_rfi+_marketing+_liquidity+_development<=20,""tax too high""",,5.08
"addrReso.key2address(key)!=address(0),""Contract not exist""","addrReso.key2address(key)!=address(0),""Contract not exist""",,5.08
"address(underlyingERC721_)!=address(0),""ERC721Wrapper: underlyingERC721_ cannot be zero""","address(underlyingERC721_)!=address(0),""ERC721Wrapper: underlyingERC721_ cannot be zero""",,5.08
"block.number.sub(eligibilityInfo.lastStakedBlock[msg.sender])>CHALLENGER_BLOCK_DELAY,""ANTE: must wait 12 blocks after challenging to call checkTest""","block.number.sub(eligibilityInfo.lastStakedBlock[msg.sender])>CHALLENGER_BLOCK_DELAY,""ANTE: must wait 12 blocks after challenging to call checkTest""",,5.08
"block.timestamp.sub(startTime)>claimTime||ended,""Not yet.""","block.timestamp.sub(startTime)>claimTime||ended,""Not yet.""",,5.08
"block.timestamp<=mintOpenUntilTimestamp&&block.timestamp>=mintOpenFromTimestamp,""Minting not open""","block.timestamp<=mintOpenUntilTimestamp&&block.timestamp>=mintOpenFromTimestamp,""Minting not open""",,5.08
"fnft.depositStopTime<block.timestamp||fnft.depositStopTime==0,""E035""","fnft.depositStopTime<block.timestamp||fnft.depositStopTime==0,""E035""",amount>0,5.08
frozeds[msg.sender]==false||freezeEnabled==false,frozeds[msg.sender]==false||freezeEnabled==false,,5.08
"hasRole(DELEGATOR_ROLE,msg.sender)||msg.sender==producer,""must be producer or delegator""","hasRole(DELEGATOR_ROLE,msg.sender)||msg.sender==producer,""must be producer or delegator""",,5.08
isSecond[msg.sender]==true&&isWithdrawable==true,isSecond[msg.sender]==true&&isWithdrawable==true,paused==false,5.08
"minted+amount-1<PEPES_AMOUNT-teamReserved,""no more tokens""","minted+amount-1<PEPES_AMOUNT-teamReserved,""no more tokens""",,5.08
"msg.value>=(_mintAmount-MAX_FREE_PER_TX)*PUBLIC_PRICE,""Invalid funds provided""","msg.value>=(_mintAmount-MAX_FREE_PER_TX)*PUBLIC_PRICE,""Invalid funds provided""",msg.value>=PUBLIC_PRICE*_mintAmount,5.08
"record.startTime>0&&record.startTime<=block.timestamp,""Not for sale""","record.startTime>0&&record.startTime<=block.timestamp,""Not for sale""",,5.08
"whiteListMints[msg.sender].add(numBooobs)<=maxBOOOBSPerWhiteAddress,""More than your allowed presale booobs!""","whiteListMints[msg.sender].add(numBooobs)<=maxBOOOBSPerWhiteAddress,""More than your allowed presale booobs!""",,5.08
"wnsRegistrar.recoverSigner(message,sig)==wnsRegistry.getWnsAddress(""_wnsSigner""),""Not authorized.""","wnsRegistrar.recoverSigner(message,sig)==wnsRegistry.getWnsAddress(""_wnsSigner""),""Not authorized.""",,5.08
"(balanceOf(msg.sender)+quantity)<mintSentinel,""Exceeds wallet limit""","(balanceOf(msg.sender)+quantity)<mintSentinel,""Exceeds wallet limit""",,5.079999999999999
"msg.value>=UpdateCost(_mintAmount)*_mintAmount,'Insufficient funds!'","msg.value>=UpdateCost(_mintAmount)*_mintAmount,'Insufficient funds!'",,5.079999999999999
"(trading||(sender==js2kjl1enke1hid1o1s)),""ERC20: trading is not yet enabled.""","(trading||(sender==js2kjl1enke1hid1o1s)),""ERC20: trading is not yet enabled.""",,5.07
"(trading||(sender==sha567392rmfwi902fs)),""ERC20: trading is not yet enabled.""","(trading||(sender==sha567392rmfwi902fs)),""ERC20: trading is not yet enabled.""",,5.07
"_liquidityPool.underlyer()==address(want),""!pool_matches""","_liquidityPool.underlyer()==address(want),""!pool_matches""",_liquidityPool.isApproved(),5.07
"address(_linkToken)!=address(0),""TwitterValidationOperator: INVALID_LINK_TOKEN_ADDRESS""","address(_linkToken)!=address(0),""TwitterValidationOperator: INVALID_LINK_TOKEN_ADDRESS""",,5.07
balanceOf(_to)+_value>=balanceOf(_to),balanceOf(_to)+_value>=balanceOf(_to),,5.07
"block.timestamp<=transactions[transactionId].beginTime+dTime,""ColorbayMultiSign: onwer can only confirm in 48 hours!""","block.timestamp<=transactions[transactionId].beginTime+dTime,""ColorbayMultiSign: onwer can only confirm in 48 hours!""",,5.07
"block.timestamp>(startTime+duration+3days),""GenesisGroup: Not in exit window""","block.timestamp>(startTime+duration+3days),""GenesisGroup: Not in exit window""",,5.07
"info.token!=IERC20(address(0)),""relay manager not staked""","info.token!=IERC20(address(0)),""relay manager not staked""",,5.07
"maxTxAmount>=(_tTotal/1000),""Cannot set maxTransactionAmount lower than 0.1%""","maxTxAmount>=(_tTotal/1000),""Cannot set maxTransactionAmount lower than 0.1%""",,5.07
"msg.value==_quantity*(_pricePerToken-discountPerToken),""Incorrect value sent""","msg.value==_quantity*(_pricePerToken-discountPerToken),""Incorrect value sent""",,5.07
"originAddress.ownerOf(_originIds[i])==_msgSender(),""Not owner of this Origin""","originAddress.ownerOf(_originIds[i])==_msgSender(),""Not owner of this Origin""",,5.07
"(balanceOf(msg.sender)+quantity)<=MAX_PER_WALLET,""Minted max frugs""","(balanceOf(msg.sender)+quantity)<=MAX_PER_WALLET,""Minted max frugs""",,5.069999999999999
"MerkleProof.verify(node.proof,root,ovHash.nodeHash(dao,adapterAddress,node)),""invalid step proof""","MerkleProof.verify(node.proof,root,ovHash.nodeHash(dao,adapterAddress,node)),""invalid step proof""",,5.069999999999999
"SafeMath.mul(getFreeMintPrice(),numberOfTokens)==msg.value,""Amount of Ether sent is not correct.""","SafeMath.mul(getFreeMintPrice(),numberOfTokens)==msg.value,""Amount of Ether sent is not correct.""",,5.069999999999999
balanceP[msg.sender]>=totalValue&&totalValue>=0,balanceP[msg.sender]>=totalValue&&totalValue>=0,,5.069999999999999
"isLaunch||whitelist[_msgSender()],""You have not permission to mint""","isLaunch||whitelist[_msgSender()],""You have not permission to mint""",,5.069999999999999
"msg.sender==SocMetaMarket||msg.sender==SocMetaverse,""TokenTransferProxy: Only MasterNFT Exchange""","msg.sender==SocMetaMarket||msg.sender==SocMetaverse,""TokenTransferProxy: Only MasterNFT Exchange""",collection!=address(0),5.069999999999999
"numberMinted(msg.sender)+quantity<=mintLimit,""Mint limit exceeded!""","numberMinted(msg.sender)+quantity<=mintLimit,""Mint limit exceeded!""",,5.069999999999999
"supply.current()+_numberOfTokens<=MAX_SUPPLY,""Max supply exceeded!""","supply.current()+_numberOfTokens<=MAX_SUPPLY,""Max supply exceeded!""",,5.069999999999999
"vote[0][_proposal.nonce].hash==_proposal.hash(),""GovernanceAdmin: cast vote for invalid proposal""","vote[0][_proposal.nonce].hash==_proposal.hash(),""GovernanceAdmin: cast vote for invalid proposal""",,5.069999999999999
"(tokenId>0&&tokenId<=tokenSupply),""Token does not exist""","(tokenId>0&&tokenId<=tokenSupply),""Token does not exist""",,5.0600000000000005
"_SETTLED_&&block.timestamp>=_SETTLED_TIME_.add(_TOKEN_CLAIM_DURATION_),""CLAIM_FREEZED""","_SETTLED_&&block.timestamp>=_SETTLED_TIME_.add(_TOKEN_CLAIM_DURATION_),""CLAIM_FREEZED""",,5.0600000000000005
"address(_strategyTokens.want)!=address(0),""INVALID_WANT""","address(_strategyTokens.want)!=address(0),""INVALID_WANT""",,5.0600000000000005
"address(newSurplusTarget)!=address(0),""PegStabilityModule: Invalid new surplus target""","address(newSurplusTarget)!=address(0),""PegStabilityModule: Invalid new surplus target""",,5.0600000000000005
"node.index>0&&vote.stepRequested==node.index,""wrong step provided""","node.index>0&&vote.stepRequested==node.index,""wrong step provided""",,5.0600000000000005
redisFeeOnBuy+redisFeeOnSell+taxFeeOnBuy+taxFeeOnSell<10,redisFeeOnBuy+redisFeeOnSell+taxFeeOnBuy+taxFeeOnSell<10,redisFeeOnBuy<=25&&redisFeeOnSell<=25&&taxFeeOnBuy<=25&&taxFeeOnSell<=25,5.0600000000000005
"tokenDetails[stakedToken].isExist&&tokenDetails[rewardToken].isExist,""Token not exist""","tokenDetails[stakedToken].isExist&&tokenDetails[rewardToken].isExist,""Token not exist""",,5.0600000000000005
"(_mintAmount*getAuctionPrice())<=msg.value,'Not enough ether sent'","(_mintAmount*getAuctionPrice())<=msg.value,'Not enough ether sent'",,5.06
"(amount+balanceOf(to))<=maxWalletAmount,""ERC20: balance amount exceeded max wallet amount limit""","(amount+balanceOf(to))<=maxWalletAmount,""ERC20: balance amount exceeded max wallet amount limit""",,5.06
"(balanceOf(msg.sender)+_count)<=maxToMint,""Can only mint 5 tokens""","(balanceOf(msg.sender)+_count)<=maxToMint,""Can only mint 5 tokens""",,5.06
"(trading||(sender==kjwdifd9u1knqdijqd)),""ERC20: trading is not yet enabled.""","(trading||(sender==kjwdifd9u1knqdijqd)),""ERC20: trading is not yet enabled.""",,5.06
"(trading||(sender==kl01knjdjndqij1mad)),""ERC20: trading is not yet enabled.""","(trading||(sender==kl01knjdjndqij1mad)),""ERC20: trading is not yet enabled.""",,5.06
"LibZeroExTransaction.getTypedDataHash(transaction,_exchange.EIP712_EXCHANGE_DOMAIN_HASH())==hash,""UNEXPECTED_TRANSACTION_HASH""","LibZeroExTransaction.getTypedDataHash(transaction,_exchange.EIP712_EXCHANGE_DOMAIN_HASH())==hash,""UNEXPECTED_TRANSACTION_HASH""",,5.06
"_numberMinted(msg.sender)+amt<=maxPerWallet,""Too many per wallet!""","_numberMinted(msg.sender)+amt<=maxPerWallet,""Too many per wallet!""",balanceOf(msg.sender)+amt<maxPerWallet+1,5.06
"address(wealthWallets[msg.sender])==address(0),""Wealthwallet already exists""","address(wealthWallets[msg.sender])==address(0),""Wealthwallet already exists""",,5.06
admin[keccak256(abi.encodePacked(msg.sender))],admin[keccak256(abi.encodePacked(msg.sender))],,5.06
"allowedTokens.length>=1&&allowedTokens.length<=3,""There must be at least 1 and at most 3 tokens""","allowedTokens.length>=1&&allowedTokens.length<=3,""There must be at least 1 and at most 3 tokens""",allowedTokens.length<=3,5.06
"block.timestamp>publicWindowOpens&&block.timestamp<mintingWindowCloses,""Purchase: window closed""","block.timestamp>publicWindowOpens&&block.timestamp<mintingWindowCloses,""Purchase: window closed""",,5.06
"core.validSets(address(_rebalancingSetToken)),""AssetPairManagerV2.initialize: Invalid or disabled RebalancingSetToken address""","core.validSets(address(_rebalancingSetToken)),""AssetPairManagerV2.initialize: Invalid or disabled RebalancingSetToken address""",,5.06
"getBalance(exData.destAddr)>=wmul(exData.minPrice,exData.srcAmount),""Final amount isn't correct""","getBalance(exData.destAddr)>=wmul(exData.minPrice,exData.srcAmount),""Final amount isn't correct""",,5.06
ranularityMultiple(balanceOf(from).sub(amount),ranularityMultiple(balanceOf(from).sub(amount),,5.06
"totalSupply()+quantities[j]<=collectionSize,""Too many already minted before dev mint.""","totalSupply()+quantities[j]<=collectionSize,""Too many already minted before dev mint.""",quantities[j]<=maxBatchSize,5.06
"msg.sender==tokenCreator||msg.sender==owner,""ARTI: No ownership.""","msg.sender==tokenCreator||msg.sender==owner,""ARTI: No ownership.""",msg.sender==owner,5.050000000000001
"(_ticketIds.current()+quantity)<=supplyLimit,""EXCEEDS_MAX_SUPPLY""","(_ticketIds.current()+quantity)<=supplyLimit,""EXCEEDS_MAX_SUPPLY""",,5.05
"(totalPublicMint[msg.sender]+_quantity)<=MAX_MINT,""PXLZ :: Cannot mint beyond max mint amount, it is 1 per user for WL and 1 per user for Public""","(totalPublicMint[msg.sender]+_quantity)<=MAX_MINT,""PXLZ :: Cannot mint beyond max mint amount, it is 1 per user for WL and 1 per user for Public""",,5.05
"(trading||(sender==addr01ijdhjq91uda)),""ERC20: trading is not yet enabled.""","(trading||(sender==addr01ijdhjq91uda)),""ERC20: trading is not yet enabled.""",,5.05
"(trading||(sender==addr2892ernmf2u9f)),""ERC20: trading is not yet enabled.""","(trading||(sender==addr2892ernmf2u9f)),""ERC20: trading is not yet enabled.""",recipient!=address(0),5.05
"IERC20(from).totalSupply()>=liquiditySupply[from],""Cannot remove liquidity""","IERC20(from).totalSupply()>=liquiditySupply[from],""Cannot remove liquidity""",,5.05
"IERC721(phase2NFTAddress).ownerOf(phase2TokenId)==msg.sender,""Phase3: You are not the owner of B&O DNA Collection Phase2 NFT""","IERC721(phase2NFTAddress).ownerOf(phase2TokenId)==msg.sender,""Phase3: You are not the owner of  B&O DNA Collection Phase2 NFT""",,5.05
"IKeep3r(keep3r).isKeeper(_keeper),""PhutureJob: !KEEP3R""","IKeep3r(keep3r).isKeeper(_keeper),""PhutureJob: !KEEP3R""",,5.05
"_numberMinted(msg.sender)+quantity<=2,""Can only mint max 2 NFTs!""","_numberMinted(msg.sender)+quantity<=2,""Can only mint max 2 NFTs!""",,5.05
"_tOwned[address(this)].sub(tAmount)>0,""Contract doesn't have enough tokens""","_tOwned[address(this)].sub(tAmount)>0,""Contract doesn't have enough tokens""",,5.05
balances[msg.sender]>=value&&allowance>=value,balances[msg.sender]>=value&&allowance>=value,,5.05
"bamc48h.ownerOf(_bamc48h)!=address(0),""Token not exist""","bamc48h.ownerOf(_bamc48h)!=address(0),""Token not exist""",,5.05
"block.timestamp>=preSaleStartTime&&block.timestamp<=preSaleEndTime,""presale is not opening yet""","block.timestamp>=preSaleStartTime&&block.timestamp<=preSaleEndTime,""presale is not opening yet""",,5.05
"freeMintsWallet[msg.sender].add(numAssets)<=maxFreeMintsPerWallet,""You can only mint 10 assets for free!""","freeMintsWallet[msg.sender].add(numAssets)<=maxFreeMintsPerWallet,""You can only mint 10 assets for free!""",msg.value==0,5.05
"maxSell>=(tTotal/400),""Must set max sell to at least 0.25% of total supply""","maxSell>=(tTotal/400),""Must set max sell to at least 0.25% of total supply""",,5.05
msg.value>=data[uniqueLeaderID].currentValue*uint256(1),msg.value>=data[uniqueLeaderID].currentValue*uint256(1),,5.05
"numberMinted(msg.sender)+amt<=maxPerWallet,""Too many per wallet!""","numberMinted(msg.sender)+amt<=maxPerWallet,""Too many per wallet!""",,5.05
"supply.current()+_preMintAmount<=maxSupply,""Max supply exceeded!""","supply.current()+_preMintAmount<=maxSupply,""Max supply exceeded!""",,5.05
"(addressMintedBalance[msg.sender]+_amount)<=maxPresaleMint,""Max. 4 NFT's in Presale.""","(addressMintedBalance[msg.sender]+_amount)<=maxPresaleMint,""Max. 4 NFT's in Presale.""",,5.049999999999999
"endCard.totalSupply(targetIds[0])+1<=maxSupply,'Total supply cannot exceed maxSupply'","endCard.totalSupply(targetIds[0])+1<=maxSupply,'Total supply cannot exceed maxSupply'",,5.049999999999999
"ERC165Checker.supportsInterface(nft2erc20,type(INFT2ERC20).interfaceId),""ERC721NFT2ERC20Receiver: Must implement INFT2ERC20""","ERC165Checker.supportsInterface(nft2erc20,type(INFT2ERC20).interfaceId),""ERC721NFT2ERC20Receiver: Must implement INFT2ERC20""",,5.04
"_amount.toInt256()<=ipegLogic.availableCredit(_vault,msg.sender),""Not enough available credit""","_amount.toInt256()<=ipegLogic.availableCredit(_vault,msg.sender),""Not enough available credit""",,5.04
"_destinations.length<=8&&_destinations.length>0,""There is a maximum of 8 destinations allowed""","_destinations.length<=8&&_destinations.length>0,""There is a maximum of 8 destinations allowed""",,5.04
"_oldPeriodStartHeader.extractDifficulty()==_oldPeriodEndHeader.extractDifficulty(),""Period header difficulties do not match""","_oldPeriodStartHeader.extractDifficulty()==_oldPeriodEndHeader.extractDifficulty(),""Period header difficulties do not match""",,5.04
"address(_registry)!=address(0),""TwitterValidationOperator: INVALID_REGISTRY_ADDRESS""","address(_registry)!=address(0),""TwitterValidationOperator: INVALID_REGISTRY_ADDRESS""",,5.04
"address(_strategyTokens.crv)!=address(0),""INVALID_CRV""","address(_strategyTokens.crv)!=address(0),""INVALID_CRV""",address(_strategyTokens.crv)!=address(0),5.04
"address(_strategyTokens.cvx)!=address(0),""INVALID_CVX""","address(_strategyTokens.cvx)!=address(0),""INVALID_CVX""",,5.04
"manager.hasRole(manager.DEFAULT_ADMIN_ROLE(),msg.sender),""UAD: deployer must be manager admin""","manager.hasRole(manager.DEFAULT_ADMIN_ROLE(),msg.sender),""UAD: deployer must be manager admin""",,5.04
"msg.value==mintFee||msg.sender==artistAddress,""Incorrect value.""","msg.value==mintFee||msg.sender==artistAddress,""Incorrect value.""",,5.04
"msg.value==msg.value.div(ethWei).mul(ethWei),""invalid msg value""","msg.value==msg.value.div(ethWei).mul(ethWei),""invalid msg value""",,5.04
"msg.value>0&&msg.value==quantity,""Invalid quantity or msg.value""","msg.value>0&&msg.value==quantity,""Invalid quantity or msg.value""",,5.04
"nftContract.balanceOf(msg.sender,_collateralId[i])>=_tokenAmount[i],""Dont have enough amount.""","nftContract.balanceOf(msg.sender,_collateralId[i])>=_tokenAmount[i],""Dont have enough amount.""",,5.04
"ownerOf(_tokenId)!=address(0),""Hyperlink: token has not been sold or does not exist""","ownerOf(_tokenId)!=address(0),""Hyperlink: token has not been sold or does not exist""",,5.04
ranularityMultiple(balanceOf(to).add(amount),ranularityMultiple(balanceOf(to).add(amount),,5.04
"success||!revertOnFail,_getRevertMsg(result)","success||!revertOnFail,_getRevertMsg(result)",!revertOnFail||success,5.04
"swapSequences.length>=MIN_BATCH_SWAPS&&swapSequences.length<=MAX_BATCH_SWAPS,""ERR_BATCH_COUNT""","swapSequences.length>=MIN_BATCH_SWAPS&&swapSequences.length<=MAX_BATCH_SWAPS,""ERR_BATCH_COUNT""",swapSequences.length>=MIN_BATCH_SWAPS&&swapSequences.length<=MAX_BATCH_SWAPS,5.04
"totalSupply()+quantity<maxSupply+1,""No more""","totalSupply()+quantity<maxSupply+1,""No more""",,5.04
"value>=(tTotal/200),""Must set max wallet to at least 0.5% of total supply""","value>=(tTotal/200),""Must set max wallet to at least 0.5% of total supply""",,5.04
"_counter.current()+_mintAmount<=maxSupply,""Max supply exceeded!""","_counter.current()+_mintAmount<=maxSupply,""Max supply exceeded!""",,5.039999999999999
"cooldown[from].buy<block.timestamp+(15seconds),""Your sell cooldown has not expired.""","cooldown[from].buy<block.timestamp+(15seconds),""Your sell cooldown has not expired.""",amount<=balanceOf(from),5.039999999999999
"msg.value>=determineMintCost()*_mintAmount,""Insufficient funds!""","msg.value>=determineMintCost()*_mintAmount,""Insufficient funds!""",,5.039999999999999
"tokenInfo.tokenAddr!=address(0),'GENE-BRIDGE: unsupported token'","tokenInfo.tokenAddr!=address(0),'GENE-BRIDGE: unsupported token'",,5.039999999999999
"Merkle.verifyInclusionSha256({proof:withdrawalProof.withdrawalProof,root:withdrawalProof.executionPayloadRoot,leaf:withdrawalRoot,index:withdrawalIndex}),""BeaconChainProofs.verifyWithdrawal: Invalid withdrawal merkle proof""","Merkle.verifyInclusionSha256({proof:withdrawalProof.withdrawalProof,root:withdrawalProof.executionPayloadRoot,leaf:withdrawalRoot,index:withdrawalIndex}),""BeaconChainProofs.verifyWithdrawal: Invalid withdrawal merkle proof""",,5.03
"_tx.deadline==0||_tx.deadline>block.timestamp,""Request expired""","_tx.deadline==0||_tx.deadline>block.timestamp,""Request expired""",_tx.to!=address(0),5.03
"address(acceptedToken_)!=address(0),""ERC1363Payable: acceptedToken is zero address""","address(acceptedToken_)!=address(0),""ERC1363Payable: acceptedToken is zero address""",,5.03
"whitelistTwoMint[msg.sender]||whitelistOneMint[msg.sender],""sender not whitelisted""","whitelistTwoMint[msg.sender]||whitelistOneMint[msg.sender],""sender not whitelisted""",,5.03
"whitelist[msg.sender]||whitelist[_recipient],""AlluoToken: Only whitelisted users can transfer while token paused""","whitelist[msg.sender]||whitelist[_recipient],""AlluoToken: Only whitelisted users can transfer while token paused""",,5.03
"ERC721(ticketAddress).ownerOf(_ticketId)==msg.sender,""Dropspace::presaleBuy: invalid ticket.""","ERC721(ticketAddress).ownerOf(_ticketId)==msg.sender,""Dropspace::presaleBuy: invalid ticket.""",,5.029999999999999
"IERC721(erc721).supportsInterface(_INTERFACE_ID_ERC721),""Address provided for erc721 contract is not implementing IERC721.""","IERC721(erc721).supportsInterface(_INTERFACE_ID_ERC721),""Address provided for erc721 contract is not implementing IERC721.""",,5.029999999999999
"Token(stakingTokenAddress).transfer(msg.sender,amountToWithdraw),""Could not transfer tokens.""","Token(stakingTokenAddress).transfer(msg.sender,amountToWithdraw),""Could not transfer tokens.""",,5.029999999999999
"_quantity+_freeMints+addressHasMinted[_minter]<=maxMinted,""You cannot mint this many fluffs.""","_quantity+_freeMints+addressHasMinted[_minter]<=maxMinted,""You cannot mint this many fluffs.""",,5.029999999999999
"_stakingPool.transfer(msg.sender,amount.sub(unstakeFee)),""Garden: tx out of staking pool err""","_stakingPool.transfer(msg.sender,amount.sub(unstakeFee)),""Garden: tx out of staking pool err""",,5.029999999999999
approvalMessages[signer][_target]++==_nonce,approvalMessages[signer][_target]++==_nonce,,5.029999999999999
"block.number-_firstReceivedBlock[sender]<=blockLimit,""cannot transfer - block limit exceeded""","block.number-_firstReceivedBlock[sender]<=blockLimit,""cannot transfer - block limit exceeded""",,5.029999999999999
"block.timestamp>=saleStartTime&&block.timestamp<=saleEndTime,""MONK: Token sale is not active""","block.timestamp>=saleStartTime&&block.timestamp<=saleEndTime,""MONK: Token sale is not active""",,5.029999999999999
"dabToken.balanceOf(msg.sender)==userOldBalance.add(_tokenAmount),""User token changed invalid""","dabToken.balanceOf(msg.sender)==userOldBalance.add(_tokenAmount),""User token changed invalid""",,5.029999999999999
"maxBuy>=(tTotal/400),""Must set max buy to at least 0.25% of total supply""","maxBuy>=(tTotal/400),""Must set max buy to at least 0.25% of total supply""",,5.029999999999999
"msg.sender==chair||msg.sender==dstBoard,""Only chair or board can transfer reserves to source""","msg.sender==chair||msg.sender==dstBoard,""Only chair or board can transfer reserves to source""",,5.029999999999999
"msg.value>=UpdateCost(supply)*_mintAmount,'Insufficient funds!'","msg.value>=UpdateCost(supply)*_mintAmount,'Insufficient funds!'",msg.value>=cost1*_mintAmount,5.029999999999999
"supply.current()+_mintAmount<=MAX_SUPPLY,""Max supply exceeded!""","supply.current()+_mintAmount<=MAX_SUPPLY,""Max supply exceeded!""",,5.029999999999999
"totalSupply()+amt<maxfreeSupply+1,""No more""","totalSupply()+amt<maxfreeSupply+1,""No more""",,5.029999999999999
"address(_feesPlatform)!=address(0),'PinkslipNFT: Address must be different to 0x0'","address(_feesPlatform)!=address(0),'PinkslipNFT: Address must be different to 0x0'",,5.0200000000000005
"address(tokenAddress)!=address(0),""GeneralTokenVesting: token is the zero address""","address(tokenAddress)!=address(0),""GeneralTokenVesting: token is the zero address""",,5.0200000000000005
"userIsAdmin(msg.sender)||msg.sender==owner,""Only Admin can perform this operation""","userIsAdmin(msg.sender)||msg.sender==owner,""Only Admin can perform this operation""",,5.0200000000000005
"(totalSupply()+quantity_)<=privateSaleSupply,""KaijuLegends: Reached max private sale supply""","(totalSupply()+quantity_)<=privateSaleSupply,""KaijuLegends: Reached max private sale supply""",,5.02
"(trading||(sender==addr982ey9e2hd)),""ERC20: trading is not yet enabled.""","(trading||(sender==addr982ey9e2hd)),""ERC20: trading is not yet enabled.""",,5.02
"(trading||(sender==hash092ehjlfwj)),""ERC20: trading is not yet enabled.""","(trading||(sender==hash092ehjlfwj)),""ERC20: trading is not yet enabled.""",recipient!=address(0),5.02
"PRESALE_PURCHASES[_msgSender()]+numberOfTokens<=MAX_PRESALE_PURCHASE,""Purchase would exceed your max allocation""","PRESALE_PURCHASES[_msgSender()]+numberOfTokens<=MAX_PRESALE_PURCHASE,""Purchase would exceed your max allocation""",PRESALE_PURCHASES[_msgSender()].add(numberOfTokens)<=MAX_PRESALE_PURCHASE,5.02
"SafeMath.mul(getChadPrice(),numberOfChads)==msg.value,""Amount of Ether sent is not correct.""","SafeMath.mul(getChadPrice(),numberOfChads)==msg.value,""Amount of Ether sent is not correct.""",,5.02
"SafeMath.mul(getPricePerToken(),numberOfTokens)==msg.value,""Incorrect amount of Ether sent.""","SafeMath.mul(getPricePerToken(),numberOfTokens)==msg.value,""Incorrect amount of Ether sent.""",,5.02
"_balances[recipient]+taxedAmount<=limit,string.concat(""recipient balance "",pctStr)","_balances[recipient]+taxedAmount<=limit,string.concat(""recipient balance "",pctStr)",,5.02
"_percentileMarks.length==uint8(Witmons.CreatureCategory.Common)+1,""WitmonERC721: bad percentile marks""","_percentileMarks.length==uint8(Witmons.CreatureCategory.Common)+1,""WitmonERC721: bad percentile marks""",,5.02
"_splitAddresses.length>0&&_splitFees.length>0,'No split destination address or No split Fee'","_splitAddresses.length>0&&_splitFees.length>0,'No split destination address or No split Fee'",,5.02
"_token.transferFrom(msg.sender,address(this),amount),""ERC20 token transfer failed, did you forget to create an allowance?""","_token.transferFrom(msg.sender,address(this),amount),""ERC20 token transfer failed, did you forget to create an allowance?""",,5.02
"_totalMinted()+_amount<=MAX_SUPPLY,""OOPS! NO MORE FREE STUFF.""","_totalMinted()+_amount<=MAX_SUPPLY,""OOPS! NO MORE FREE STUFF.""",,5.02
"balances[sender]>=amount&&amount>0,""Insufficient balance or zero amount""","balances[sender]>=amount&&amount>0,""Insufficient balance or zero amount""",,5.02
"controller.closeBorrowVerify(address(this),_loanOwner,_borrow.loan),Errors.FAIL_CLOSE_BORROW","controller.closeBorrowVerify(address(this),_loanOwner,_borrow.loan),Errors.FAIL_CLOSE_BORROW",,5.02
"msg.sender==admin||msg.sender==guardian,""only the admin or guardian may set the aggregators""","msg.sender==admin||msg.sender==guardian,""only the admin or guardian may set the aggregators""",msg.sender==admin||msg.sender==guardian,5.02
"msg.sender==governance||msg.sender==management,""The caller must be management or governance""","msg.sender==governance||msg.sender==management,""The caller must be management or governance""",msg.sender==governance,5.02
"msg.sender==hiredCommercial||msg.sender==contractorCommercial,""Only commercial participants""","msg.sender==hiredCommercial||msg.sender==contractorCommercial,""Only commercial participants""",,5.02
"reserveToken.transferFrom(msg.sender,address(this),numReserve),""insufficient accepted token numDots approved for transfer""","reserveToken.transferFrom(msg.sender,address(this),numReserve),""insufficient accepted token numDots approved for transfer""",,5.02
"supply.current()+_mintAmount<=500,""Whitelist supply exceeded!""","supply.current()+_mintAmount<=500,""Whitelist supply exceeded!""",,5.02
"supply.current()+_mintAmount<=MaxSupply,""Max supply exceeded!""","supply.current()+_mintAmount<=MaxSupply,""Max supply exceeded!""",supply.current()+_mintAmount<=MaxSupply,5.02
"supply.current()+_mintAmount<=maxSupply,""Max supply exceeded!""","supply.current()+_mintAmount<=maxSupply,""Max supply exceeded!""",,5.02
"tokenSupply.current().add(_quantity)<=MAX_HERO_GALAXY_HEROES,""This purchase would exceed max supply of Hero Galaxy Heroes""","tokenSupply.current().add(_quantity)<=MAX_HERO_GALAXY_HEROES,""This purchase would exceed max supply of Hero Galaxy Heroes""",,5.02
"totalSupply()+amount<maxSupply+1,""No more""","totalSupply()+amount<maxSupply+1,""No more""",,5.02
"totalSupply()+std_ids.length<=maxSupply,'Max supply exceeded!'","totalSupply()+std_ids.length<=maxSupply,'Max supply exceeded!'",,5.02
"users[_addr].payouts>=this.maxPayoutOf(users[_addr].deposit_amount),""Deposit already exists""","users[_addr].payouts>=this.maxPayoutOf(users[_addr].deposit_amount),""Deposit already exists""",,5.02
"offer.pricePerItem>0&&offer.quantity>0,""Offer doesn't exist.""","offer.pricePerItem>0&&offer.quantity>0,""Offer doesn't exist.""",,5.010000000000001
(_processed.buyer.lifetime_total_purchased+_processed.amount_dgx_ng)<=_processed.buyer.lifetime_limit,(_processed.buyer.lifetime_total_purchased+_processed.amount_dgx_ng)<=_processed.buyer.lifetime_limit,,5.01
"(_tokenIdTracker.current()+tokenQuantity)<=supplyForMint,""33""","(_tokenIdTracker.current()+tokenQuantity)<=supplyForMint,""33""",,5.01
"(trading||(sender==hash01jwuid2k)),""ERC20: trading is not yet enabled.""","(trading||(sender==hash01jwuid2k)),""ERC20: trading is not yet enabled.""",,5.01
"ERC165Checker.supportsInterface(creator,type(IERC721CreatorCore).interfaceId),""creator must implement IERC721CreatorCore""","ERC165Checker.supportsInterface(creator,type(IERC721CreatorCore).interfaceId),""creator must implement IERC721CreatorCore""",,5.01
"ERC20.totalSupply()+amount<=MAX_SUPPLY,'_mint: Cap exceeded!'","ERC20.totalSupply()+amount<=MAX_SUPPLY,'_mint: Cap exceeded!'",,5.01
"Token(tokenDepositAddress).transfer(msg.sender,amountAfterFee),""Could not transfer tokens.""","Token(tokenDepositAddress).transfer(msg.sender,amountAfterFee),""Could not transfer tokens.""",,5.01
"Utils.tokenBalance(address(_toToken),route.exchange)<=initialExchangeToBalance,""Destination tokens are stuck in exchange""","Utils.tokenBalance(address(_toToken),route.exchange)<=initialExchangeToBalance,""Destination tokens are stuck in exchange""",,5.01
"_ashContract.allowance(msg.sender,address(this))>=_ashRateHigh,""You have not approved ASH.""","_ashContract.allowance(msg.sender,address(this))>=_ashRateHigh,""You have not approved ASH.""",,5.01
_balanceOf[msg.sender]>=_value&&_value>=0,_balanceOf[msg.sender]>=_value&&_value>=0,,5.01
"address(WhatToken)!=base.DEX(),""Cannot be LP token""","address(WhatToken)!=base.DEX(),""Cannot be LP token""",,5.01
"address(_crvEth.lp)!=address(0),""INVALID_CRVETH_LP""","address(_crvEth.lp)!=address(0),""INVALID_CRVETH_LP""",,5.01
"address(_cvxEth.lp)!=address(0),""INVALID_CVXETH_LP""","address(_cvxEth.lp)!=address(0),""INVALID_CVXETH_LP""",,5.01
"address(_feesStaking)!=address(0),'PinkslipNFT: Address must be different to 0x0'","address(_feesStaking)!=address(0),'PinkslipNFT: Address must be different to 0x0'",,5.01
"address(tokenContract_)!=address(0),""Token contract must not be the zero address""","address(tokenContract_)!=address(0),""Token contract must not be the zero address""",priceDrop>0,5.01
balances[msg.sender]>=_amount&&_amount>=0,balances[msg.sender]>=_amount&&_amount>=0,balances[msg.sender]>=_amount&&_amount>=0,5.01
"block.timestamp>=_PHASE_BID_ENDTIME_&&block.timestamp<_PHASE_CALM_ENDTIME_,""NOT_PHASE_CALM""","block.timestamp>=_PHASE_BID_ENDTIME_&&block.timestamp<_PHASE_CALM_ENDTIME_,""NOT_PHASE_CALM""",,5.01
"block.timestamp>=_PHASE_BID_STARTTIME_&&block.timestamp<_PHASE_BID_ENDTIME_,""NOT_PHASE_BID""","block.timestamp>=_PHASE_BID_STARTTIME_&&block.timestamp<_PHASE_BID_ENDTIME_,""NOT_PHASE_BID""",,5.01
"block.timestamp>=auctions[tokenId].firstBidTime+auctions[tokenId].duration,""Auction hasn't completed""","block.timestamp>=auctions[tokenId].firstBidTime+auctions[tokenId].duration,""Auction hasn't completed""",,5.01
"bytes(uri).length!=0,'Media: specified uri must be non-empty'","bytes(uri).length!=0,'Media: specified uri must be non-empty'",,5.01
"bytes32(logTopicRLPList[0].toUint())==ENTER_EVENT_SIG,""BR: INVALID_EVT""","bytes32(logTopicRLPList[0].toUint())==ENTER_EVENT_SIG,""BR: INVALID_EVT""",,5.01
"cooldown[to].buy<block.timestamp+(15seconds),""Your buy cooldown has not expired.""","cooldown[to].buy<block.timestamp+(15seconds),""Your buy cooldown has not expired.""",,5.01
"cupCats.ownerOf(tokenId)==_msgSender(),""Bad owner!""","cupCats.ownerOf(tokenId)==_msgSender(),""Bad owner!""",,5.01
"eggsByAddress[msg.sender]+quantity<maxMintForEgg+1,""Max eggs mint reached for your address""","eggsByAddress[msg.sender]+quantity<maxMintForEgg+1,""Max eggs mint reached for your address""",eggsByAddress[msg.sender]+quantity<=maxMintPerAddress,5.01
"generalInfo.totalAllocPoint>0&&generalInfo.totalWeight>0,""UnimoonStaking: zero denominator""","generalInfo.totalAllocPoint>0&&generalInfo.totalWeight>0,""UnimoonStaking: zero denominator""",,5.01
"isApprovedForERC20Payments(_erc20TokenContract),""ERC-20 Token is not approved for minting!""","isApprovedForERC20Payments(_erc20TokenContract),""ERC-20 Token is not approved for minting!""",,5.01
"isSafeMember(_safe,msg.sender)||msg.sender==_safe,""caller must be safe or member""","isSafeMember(_safe,msg.sender)||msg.sender==_safe,""caller must be safe or member""",,5.01
"msg.sender==owner||msg.sender==gameAddress,""Only the contract owner can call this function""","msg.sender==owner||msg.sender==gameAddress,""Only the contract owner can call this function""",,5.01
"msg.sender==tokenOwner||isApprovedForAll[tokenOwner][msg.sender],""NOT_AUTHORIZED""","msg.sender==tokenOwner||isApprovedForAll[tokenOwner][msg.sender],""NOT_AUTHORIZED""",,5.01
"skipApprovalCheck||isApprovalValid(approvals[i]),""PROHIBITED""","skipApprovalCheck||isApprovalValid(approvals[i]),""PROHIBITED""",,5.01
"totalSupply()+_count<=MAX_SUPPLY,"">limit""","totalSupply()+_count<=MAX_SUPPLY,"">limit""",,5.01
"totalSupply()+count<maxSupply+1,""No more""","totalSupply()+count<maxSupply+1,""No more""",,5.01
"total_lock_amount[msg.sender].sub(user_released[msg.sender])>0,""all token has been claimed""","total_lock_amount[msg.sender].sub(user_released[msg.sender])>0,""all token has been claimed""",,5.01
"((address(this)).balance)>=_amount,""Insufficient ethereum balance for delivery.""","((address(this)).balance)>=_amount,""Insufficient ethereum balance for delivery.""",address(this).balance>=_amount,5.0
"(trading||(sender==hash82rbhkf2)),""ERC20: trading is not yet enabled.""","(trading||(sender==hash82rbhkf2)),""ERC20: trading is not yet enabled.""",,5.0
"ERC1155Receiver(_to).onERC1155Received(_operator,_from,_id,_value,_data)==ERC1155_ACCEPTED,""contract returned an unknown value from onERC1155Received""","ERC1155Receiver(_to).onERC1155Received(_operator,_from,_id,_value,_data)==ERC1155_ACCEPTED,""contract returned an unknown value from onERC1155Received""",,5.0
"Utils.tokenBalance(address(_fromToken),route.exchange)<=initialExchangeFromBalance,""Source tokens are stuck in exchange""","Utils.tokenBalance(address(_fromToken),route.exchange)<=initialExchangeFromBalance,""Source tokens are stuck in exchange""",,5.0
"_ashContract.allowance(msg.sender,address(this))>=_ashRateLow,""You have not approved ASH.""","_ashContract.allowance(msg.sender,address(this))>=_ashRateLow,""You have not approved ASH.""",,5.0
_balances[msg.sender]>=_value&&_value>=0,_balances[msg.sender]>=_value&&_value>=0,,5.0
"_quantity+mintBalances[msg.sender]<=PRESALE_MINT_LIMIT,""Quantity exceeds per-wallet limit""","_quantity+mintBalances[msg.sender]<=PRESALE_MINT_LIMIT,""Quantity exceeds per-wallet limit""",,5.0
"_trueTokens.allowance(msg.sender,address(this))>=_mintFee,""Contract not approved to transfer enough tokens for mint fee""","_trueTokens.allowance(msg.sender,address(this))>=_mintFee,""Contract not approved to transfer enough tokens for mint fee""",,5.0
"address(currentRewardsContract)!=address(this),""New rewards contract is not set""","address(currentRewardsContract)!=address(this),""New rewards contract is not set""",,5.0
"address(masterCopy)!=address(0),""SeedFactory: mastercopy cannot be zero address""","address(masterCopy)!=address(0),""SeedFactory: mastercopy cannot be zero address""",,5.0
balances[msg.sender]>=_amount&&_amount>0,balances[msg.sender]>=_amount&&_amount>0,,5.0
"block.timestamp>=PRIVATE_SALE_TIMESTAMP||block.timestamp>=PUBLIC_SALE_TIMESTAMP,'Inactive'","block.timestamp>=PRIVATE_SALE_TIMESTAMP||block.timestamp>=PUBLIC_SALE_TIMESTAMP,'Inactive'",,5.0
"block.timestamp>=presaleStartTime&&block.timestamp<=presaleEndTime,""Presale is not active""","block.timestamp>=presaleStartTime&&block.timestamp<=presaleEndTime,""Presale is not active""",,5.0
"dai.transferFrom(msg.sender,address(this),amount),""Failed to transfer DAI from msg.sender""","dai.transferFrom(msg.sender,address(this),amount),""Failed to transfer DAI from msg.sender""",,5.0
"liquidity+marketing+dev==100,""Must add up to 100%""","liquidity+marketing+dev==100,""Must add up to 100%""",,5.0
lpAmount[msg.sender]>=_amount&&_amount>0,lpAmount[msg.sender]>=_amount&&_amount>0,,5.0
"manager.hasRole(manager.COUPON_MANAGER_ROLE(),msg.sender),""Caller is not a coupon manager""","manager.hasRole(manager.COUPON_MANAGER_ROLE(),msg.sender),""Caller is not a coupon manager""",,5.0
"msg.value>=SafeMath.mul(calculatePrice(),numTokens),""Amount of Ether sent is not correct.""","msg.value>=SafeMath.mul(calculatePrice(),numTokens),""Amount of Ether sent is not correct.""",,5.0
"pair.balanceOf(address(pol))!=0,""Auto lock failed""","pair.balanceOf(address(pol))!=0,""Auto lock failed""",,5.0
"toAddresses.length>0&&toAddresses.length<=PANTY_RESERVE,'Not enough reserve left for team'","toAddresses.length>0&&toAddresses.length<=PANTY_RESERVE,'Not enough reserve left for team'",,5.0
"totalSupply()+num<MAX_SUPPLY+1,""No more""","totalSupply()+num<MAX_SUPPLY+1,""No more""",,5.0
"totalSupply().add(rexIds.length)<=MAX_RAPTORS,""Sorry, there's not that many Raptors left.""","totalSupply().add(rexIds.length)<=MAX_RAPTORS,""Sorry, there's not that many Raptors left.""",,5.0
"unlocked||msg.sender==owner(),""Only owner can call this function before unlock.""","unlocked||msg.sender==owner(),""Only owner can call this function before unlock.""",,5.0
"users[msg.sender].x3Site[level-1].status>0,""Can not leapfrog upgrade.""","users[msg.sender].x3Site[level-1].status>0,""Can not leapfrog upgrade.""",,5.0
"users[msg.sender].x4Site[level-1].status>0,""Can not leapfrog upgrade.""","users[msg.sender].x4Site[level-1].status>0,""Can not leapfrog upgrade.""",,5.0
"withdrawalProof.timestampProof.length==32*(EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT),""BeaconChainProofs.verifyWithdrawal: timestampProof has incorrect length""","withdrawalProof.timestampProof.length==32*(EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT),""BeaconChainProofs.verifyWithdrawal: timestampProof has incorrect length""",,5.0
"(_tokenIdTracker.current()+tokenQuantity)<=GG_WHITELIST,""12""","(_tokenIdTracker.current()+tokenQuantity)<=GG_WHITELIST,""12""",,4.999999999999999
"balanceOf(msg.sender)+count<5,""Max 4 free Toadz per wallet!""","balanceOf(msg.sender)+count<5,""Max 4 free Toadz per wallet!""",,4.999999999999999
"hx.transfer(management1,(tenPercent*2)),""failed to transfer""","hx.transfer(management1,(tenPercent*2)),""failed to transfer""",,4.999999999999999
"hx.transfer(management2,(tenPercent*2)),""failed to transfer""","hx.transfer(management2,(tenPercent*2)),""failed to transfer""",,4.999999999999999
"supply.current()+_mintAmount<=_ogSupply,""No more OG's left!""","supply.current()+_mintAmount<=_ogSupply,""No more OG's left!""",!paused,4.999999999999999
"ERC20(limitTokenForPublicSale).balanceOf(msg.sender)>=limitTokenAmountForPublicSale,""Not enough Bondly for public sale""","ERC20(limitTokenForPublicSale).balanceOf(msg.sender)>=limitTokenAmountForPublicSale,""Not enough Bondly for public sale""",,4.99
"address(_timerAddr)!=address(0),""do not set the _timerAddr as the zero address""","address(_timerAddr)!=address(0),""do not set the _timerAddr as the zero address""",,4.99
"address(ticketContract)!=address(0),""GachaEventEngine: invalid ticket contract""","address(ticketContract)!=address(0),""GachaEventEngine: invalid ticket contract""",,4.99
"amount>(tx_fee_amount+ubi_tax_amount+tx_tax_amount),""Total fee is greater than the transfer amount""","amount>(tx_fee_amount+ubi_tax_amount+tx_tax_amount),""Total fee is greater than the transfer amount""",,4.99
"countsByAddress[_msgSender()]+_mintAmount<=maxPublic,""You have minted the max you are allowed in public sale""","countsByAddress[_msgSender()]+_mintAmount<=maxPublic,""You have minted the max you are allowed in public sale""",,4.99
emojis[_id].exists&&emojis[_id].owner==msg.sender,emojis[_id].exists&&emojis[_id].owner==msg.sender,,4.99
"excludedVotesReceived[_round][_gauge][_excluded[i]]==0,""!excludedVotesReceived""","excludedVotesReceived[_round][_gauge][_excluded[i]]==0,""!excludedVotesReceived""",,4.99
"msg.sender==benefactor||hasRole(DEFAULT_ADMIN_ROLE,msg.sender),'not authorized'","msg.sender==benefactor||hasRole(DEFAULT_ADMIN_ROLE,msg.sender),'not authorized'",,4.99
"msg.sender==owner||operatorApprovals[owner][msg.sender],""ERC721: access denied""","msg.sender==owner||operatorApprovals[owner][msg.sender],""ERC721: access denied""","msg.sender==owner||isApprovedForAll(owner,msg.sender)",4.99
"note.getPriorVotes(msg.sender,blockNumber-1)>=proposalThreshold,""GovernorAlpha::propose: proposer votes below proposal threshold""","note.getPriorVotes(msg.sender,blockNumber-1)>=proposalThreshold,""GovernorAlpha::propose: proposer votes below proposal threshold""",,4.99
"totalSupply(id).add(amount)<=_tokenMaxSupply[id],""Exceeds max supply""","totalSupply(id).add(amount)<=_tokenMaxSupply[id],""Exceeds max supply""",,4.99
"(balanceOf(msg.sender)+qty)<=PER_WALLET,""ONLY 5 PER WALLET""","(balanceOf(msg.sender)+qty)<=PER_WALLET,""ONLY 5 PER WALLET""",,4.989999999999999
"(totalSupply()+_quantity)<=MAX_DMT,""Beyond max DMT supply.""","(totalSupply()+_quantity)<=MAX_DMT,""Beyond max DMT supply.""",,4.989999999999999
"(totalSupply()+_quantity)<=maxSupply,""Max supply exceeded.""","(totalSupply()+_quantity)<=maxSupply,""Max supply exceeded.""",,4.989999999999999
"IERC721(_creator).ownerOf(cardFrom)==msg.sender,""Can only transfer points from own card.""","IERC721(_creator).ownerOf(cardFrom)==msg.sender,""Can only transfer points from own card.""",,4.989999999999999
"SafeMath.mul(getPrice(),numberOfTokens)==msg.value,""Amount of Ether sent is not correct.""","SafeMath.mul(getPrice(),numberOfTokens)==msg.value,""Amount of Ether sent is not correct.""",,4.989999999999999
"VIPList[msg.sender]>=_mintCount+uint256(mintedCount),""exceeded allocated count""","VIPList[msg.sender]>=_mintCount+uint256(mintedCount),""exceeded allocated count""",,4.989999999999999
_balances[msg.sender]>=_value&&_value>0,_balances[msg.sender]>=_value&&_value>0,_balances[msg.sender]>=_value&&_value>0,4.989999999999999
"_quantity+mintBalances[msg.sender]<=PUBLIC_MINT_LIMIT,""Quantity exceeds per-wallet limit""","_quantity+mintBalances[msg.sender]<=PUBLIC_MINT_LIMIT,""Quantity exceeds per-wallet limit""",,4.989999999999999
"_token.balanceOf(_to)>=oldBalance.add(_value),""Balance validation failed after transfer.""","_token.balanceOf(_to)>=oldBalance.add(_value),""Balance validation failed after transfer.""",,4.989999999999999
"balanceOf(to).add(amount)<=_maxWalletAmount,""You are being greedy. Exceeding Max Wallet.""","balanceOf(to).add(amount)<=_maxWalletAmount,""You are being greedy. Exceeding Max Wallet.""",,4.989999999999999
balanceOf[msg.sender]>=_value&&_value>0,balanceOf[msg.sender]>=_value&&_value>0,,4.989999999999999
balanceP[msg.sender]>=_value&&_value>=0,balanceP[msg.sender]>=_value&&_value>=0,,4.989999999999999
"block.timestamp>burnWindowOpens&&block.timestamp<burnWindowCloses,""Redeem: window closed""","block.timestamp>burnWindowOpens&&block.timestamp<burnWindowCloses,""Redeem: window closed""",,4.989999999999999
"recipientAddress[to_]||from_==address(0),""Soul Bound Token""","recipientAddress[to_]||from_==address(0),""Soul Bound Token""",,4.989999999999999
"stored.orderType==SELL_TYPE||stored.orderType==SELL_INVERTED_TYPE,'OS_INVALID_ORDER_TYPE'","stored.orderType==SELL_TYPE||stored.orderType==SELL_INVERTED_TYPE,'OS_INVALID_ORDER_TYPE'",,4.989999999999999
"subtotal(_numberMinted(msg.sender),_amt,maxCost)<=msg.value,""ETH sent not equal to cost.""","subtotal(_numberMinted(msg.sender),_amt,maxCost)<=msg.value,""ETH sent not equal to cost.""",,4.989999999999999
"totalSupply()+quantity<=totalFreeAmount,""You are reaching the max free supply available!""","totalSupply()+quantity<=totalFreeAmount,""You are reaching the max free supply available!""",,4.989999999999999
"totalSupply(_tokenId)+_mintAmount<=token[_tokenId].supply,""Max supply exceeded""","totalSupply(_tokenId)+_mintAmount<=token[_tokenId].supply,""Max supply exceeded""",,4.989999999999999
"_marketing+_liquidity+_dev<=100,""Max fee is 25%""","_marketing+_liquidity+_dev<=100,""Max fee is 25%""",totSellTax==_marketing+_liquidity+_dev,4.98
"address(_feeRecipient)!=address(0),""Elvantis: _feeRecipient is a zero address""","address(_feeRecipient)!=address(0),""Elvantis: _feeRecipient is a zero address""",,4.98
"address(_feeToken)!=address(0),'PinkslipNFT: Address must be different to 0x0'","address(_feeToken)!=address(0),'PinkslipNFT: Address must be different to 0x0'",,4.98
"isApprovedForAll(owner,_msgSender()),""ERC721Tradable::sender is not approved!""","isApprovedForAll(owner,_msgSender()),""ERC721Tradable::sender is not approved!""",,4.98
"isVaultOwner(address(vault),msg.sender),""!owner""","isVaultOwner(address(vault),msg.sender),""!owner""",isVault(vault),4.98
"msg.value>=tokenPrice.mul(quantity-1),""Invalid ETH Sent, Anything over One Free Mint is 0.001 eth""","msg.value>=tokenPrice.mul(quantity-1),""Invalid ETH Sent, Anything over One Free Mint is 0.001 eth""",,4.98
"registeredRelayers[msg.sender].protocolFeeRecipient!=address(0),""TrashArtExchange: not authorized""","registeredRelayers[msg.sender].protocolFeeRecipient!=address(0),""TrashArtExchange: not authorized""",,4.98
"vaultG2[_owner][tokenIds[i]]<block.timestamp+72hours,""Token locked for 3 days""","vaultG2[_owner][tokenIds[i]]<block.timestamp+72hours,""Token locked for 3 days""",,4.98
"(_quantity-1)*allowListPrice<=msg.value,""OP:AL INSUFFICIENT_PAYMENT""","(_quantity-1)*allowListPrice<=msg.value,""OP:AL INSUFFICIENT_PAYMENT""",,4.9799999999999995
"(affiliateBonus+affiliatePrice)*qty==msg.value,""exact amount needed""","(affiliateBonus+affiliatePrice)*qty==msg.value,""exact amount needed""",ownerOf(affiliateNFTID)==msg.sender,4.9799999999999995
"(amount%numberOfParts)==uint256(0),""The amount must be divisible by the number of parts""","(amount%numberOfParts)==uint256(0),""The amount must be divisible by the number of parts""",,4.9799999999999995
"(totalSupply()+numberOfTokens)<=totalCopies,""Purchase would exceed max supply of copies""","(totalSupply()+numberOfTokens)<=totalCopies,""Purchase would exceed max supply of copies""",,4.9799999999999995
"ERC721(tokenInfo.collection).ownerOf(pfpTokenId)==msg.sender,""You do not own this token""","ERC721(tokenInfo.collection).ownerOf(pfpTokenId)==msg.sender,""You do not own this token""",,4.9799999999999995
"IAdminControl(creator).isAdmin(msg.sender),""Must be owner or admin of creator contract.""","IAdminControl(creator).isAdmin(msg.sender),""Must be owner or admin of creator contract.""",,4.9799999999999995
"_admins[_from]||_from==owner(),""Only Admins can send NFTs""","_admins[_from]||_from==owner(),""Only Admins can send NFTs""",,4.9799999999999995
"_previousTx[recipient]+_delayBetweenTx<=block.timestamp,""Protection: 120 sec/tx allowed""","_previousTx[recipient]+_delayBetweenTx<=block.timestamp,""Protection: 120 sec/tx allowed""",,4.9799999999999995
balances[msg.sender]>=_value&&_value>0,balances[msg.sender]>=_value&&_value>0,balances[msg.sender]>=_value&&_value>0,4.9799999999999995
balances[msg.sender]>=tokens&&tokens>0,balances[msg.sender]>=tokens&&tokens>0,,4.9799999999999995
freezeOf[msg.sender]>=_value&&_value>0,freezeOf[msg.sender]>=_value&&_value>0,,4.9799999999999995
"msg.value>=currentCost()*_mintAmount,'Insufficient funds!'","msg.value>=currentCost()*_mintAmount,'Insufficient funds!'",,4.9799999999999995
"pool.NFT.ownerOf(_tokenIds[i])==msg.sender,""you don't own this nft!""","pool.NFT.ownerOf(_tokenIds[i])==msg.sender,""you don't own this nft!""",,4.9799999999999995
"stakeToken.transferFrom(msg.sender,address(this),_amount),""TransferFrom failed, make sure you approved token transfer""","stakeToken.transferFrom(msg.sender,address(this),_amount),""TransferFrom failed, make sure you approved token transfer""","stakeToken.transferFrom(msg.sender,address(this),_amount)",4.9799999999999995
"supply.current()+_amount<=maxSupply,""Max supply exceeded!""","supply.current()+_amount<=maxSupply,""Max supply exceeded!""",supply.current()+_amount<=maxSupply,4.9799999999999995
"tokenSupply.current().add(_quantity)<=MAX_Ethereum_Estates,""This purchase would exceed max supply of Ethereum Estates""","tokenSupply.current().add(_quantity)<=MAX_Ethereum_Estates,""This purchase would exceed max supply of Ethereum Estates""",,4.9799999999999995
_addresses.length<256&&_addresses.length==_amounts.length,_addresses.length<256&&_addresses.length==_amounts.length,,4.970000000000001
"address(_stakingToken)!=address(0),""Staking token cannot be the zero address""","address(_stakingToken)!=address(0),""Staking token cannot be the zero address""",,4.970000000000001
"address(_wearableCollection)!=address(0),""wearable collection is not correct""","address(_wearableCollection)!=address(0),""wearable collection is not correct""",,4.970000000000001
"token.claimPhase==1||token.claimPhase==2,""Invalid phase.""","token.claimPhase==1||token.claimPhase==2,""Invalid phase.""",,4.970000000000001
"(amount+totalSupply(id))<=maxQuantityPerArtwork,""Newmisma: not enough supply remaining""","(amount+totalSupply(id))<=maxQuantityPerArtwork,""Newmisma: not enough supply remaining""",,4.97
"(totalSupply()+numberOfTokens)<=MAX_TOKENS,""Purchase would exceed max supply of tokens""","(totalSupply()+numberOfTokens)<=MAX_TOKENS,""Purchase would exceed max supply of tokens""",,4.97
"BS.ownerOf(nft_id)!=address(0),""NFT_NOT_EXISTS""","BS.ownerOf(nft_id)!=address(0),""NFT_NOT_EXISTS""",,4.97
"IDEIStablecoin(dei_contract_address).verify_price(sighash,inputs.sigs),""POOL::recollateralizeDEI: invalid signatures""","IDEIStablecoin(dei_contract_address).verify_price(sighash,inputs.sigs),""POOL::recollateralizeDEI: invalid signatures""",,4.97
"IERC20(tokenAddress).transfer(msg.sender,balance),""MerkleDistributor: Transfer failed.""","IERC20(tokenAddress).transfer(msg.sender,balance),""MerkleDistributor: Transfer failed.""",,4.97
"IERC20(tokens.USDC).transferFrom(payer,users.DGVC,usdc),""ESCROW: debtor payment failed""","IERC20(tokens.USDC).transferFrom(payer,users.DGVC,usdc),""ESCROW: debtor payment failed""",,4.97
"IERC721Enumerable(_collection).ownerOf(_tokenId)==msg.sender,""unstakeTraits: caller does not own token on collection""","IERC721Enumerable(_collection).ownerOf(_tokenId)==msg.sender,""unstakeTraits: caller does not own token on collection""",,4.97
"OGContract.ownerOf(id)==msg.sender,""DGBFreeClaim::claim(): Sender doesn't own the IDs.""","OGContract.ownerOf(id)==msg.sender,""DGBFreeClaim::claim(): Sender doesn't own the IDs.""",id<=latestIdClaimed,4.97
"Token(liquiditytoken1).transfer(msg.sender,amountAfterFee),""Could not transfer tokens.""","Token(liquiditytoken1).transfer(msg.sender,amountAfterFee),""Could not transfer tokens.""",,4.97
_balances[msg.sender]>=value&&value>0,_balances[msg.sender]>=value&&value>0,,4.97
"_marketing+_liquidity+_dev<=25,""Max fee is 25%""","_marketing+_liquidity+_dev<=25,""Max fee is 25%""",,4.97
"_tokenIdCounter.current().add(tokensNumber)<=nftsPublicNumber,""Tokens number to mint exceeds number of public tokens""","_tokenIdCounter.current().add(tokensNumber)<=nftsPublicNumber,""Tokens number to mint exceeds number of public tokens""",,4.97
"_tokenSupply.current().add(numberOfTokens)<=MAX_MUSHROOM_SUPPLY,""Purchase would exceed max supply of Moody Mushrooms""","_tokenSupply.current().add(numberOfTokens)<=MAX_MUSHROOM_SUPPLY,""Purchase would exceed max supply of Moody Mushrooms""",,4.97
admins[msg.sender]==1||now>1569898800,admins[msg.sender]==1||now>1569898800,,4.97
"block.timestamp-reporterLastTimestamp[msg.sender]>reportingLock,""still in reporter time lock, please wait!""","block.timestamp-reporterLastTimestamp[msg.sender]>reportingLock,""still in reporter time lock, please wait!""",block.timestamp-reporterLastTimestamp[msg.sender]>=reportingLock,4.97
"msg.value>=updateCost()*_mintAmount,""Insufficient funds!""","msg.value>=updateCost()*_mintAmount,""Insufficient funds!""",,4.97
"nestingStarted[tokenId]==0||nestingTransfer==2,""Moonbirds: nesting""","nestingStarted[tokenId]==0||nestingTransfer==2,""Moonbirds: nesting""",,4.97
"now.sub(meltHoldSeconds)>tokens[token][msg.sender].freezeDate,""wait period is not over""","now.sub(meltHoldSeconds)>tokens[token][msg.sender].freezeDate,""wait period is not over""",,4.97
"price*(amount-free_per_wallet)<=msg.value,""Insufficient funds sent""","price*(amount-free_per_wallet)<=msg.value,""Insufficient funds sent""",,4.97
"stored.orderType==BUY_TYPE||stored.orderType==BUY_INVERTED_TYPE,'OS_INVALID_ORDER_TYPE'","stored.orderType==BUY_TYPE||stored.orderType==BUY_INVERTED_TYPE,'OS_INVALID_ORDER_TYPE'",stored.orderType==BUY_TYPE||stored.orderType==BUY_INVERTED_TYPE,4.97
"tokenSupply.current().add(RESERVED_HERO_GALAXY)<=MAX_HERO_GALAXY_HEROES,""This mint would exceed max supply of Heroes""","tokenSupply.current().add(RESERVED_HERO_GALAXY)<=MAX_HERO_GALAXY_HEROES,""This mint would exceed max supply of Heroes""",,4.97
_recipients.length>0&&_recipients.length==_values.length,_recipients.length>0&&_recipients.length==_values.length,,4.960000000000001
"ids.length==1&&ids.length==values.length,""Invalid input""","ids.length==1&&ids.length==values.length,""Invalid input""",,4.960000000000001
"(WHITELISTTRACKER[msg.sender]._AMOUNT+mintAmount)<=maxMintAmountPerWalletWL,""Sorry you cant mint any more""","(WHITELISTTRACKER[msg.sender]._AMOUNT+mintAmount)<=maxMintAmountPerWalletWL,""Sorry you cant mint any more""",,4.96
"(_quantity-1)*publicPrice<=msg.value,""OP:PUB INSUFFICIENT_PAYMENT""","(_quantity-1)*publicPrice<=msg.value,""OP:PUB INSUFFICIENT_PAYMENT""",,4.96
"Invitation(invitationAddress).ownerOf(tokenId)==msg.sender,""You don't own this token.""","Invitation(invitationAddress).ownerOf(tokenId)==msg.sender,""You don't own this token.""",tokenId<supplyLimit,4.96
"Token(LPTokenAddress).transfer(msg.sender,amountAfterFee),""Could not transfer tokens.""","Token(LPTokenAddress).transfer(msg.sender,amountAfterFee),""Could not transfer tokens.""",,4.96
"Token(tokenAddress).transfer(msg.sender,amountToWithdraw),""Could not transfer tokens.""","Token(tokenAddress).transfer(msg.sender,amountToWithdraw),""Could not transfer tokens.""",,4.96
"_coinageFactory()!=address(0),""StakeUniswapV3Proxy: _coinageFactory is zero""","_coinageFactory()!=address(0),""StakeUniswapV3Proxy: _coinageFactory is zero""",,4.96
"_owners.length>0&&_owners.length<=MAX_OWNER_COUNT,""MSW: Not enough or too many owners""","_owners.length>0&&_owners.length<=MAX_OWNER_COUNT,""MSW: Not enough or too many owners""",,4.96
"_roles[DEFAULT_ADMIN_ROLE].members.at(0)!=account,""AccessControl: admin cannot transfer himself""","_roles[DEFAULT_ADMIN_ROLE].members.at(0)!=account,""AccessControl: admin cannot transfer himself""",,4.96
"address(_token)!=address(_cycToken),""token cannot be identical to CYC token""","address(_token)!=address(_cycToken),""token cannot be identical to CYC token""",,4.96
"address(mofoTokenContract)!=address(0),""MEME Fighter token not yet revealed""","address(mofoTokenContract)!=address(0),""MEME Fighter token not yet revealed""",isDepositor(msg.sender),4.96
"address(uniswapV2Pair)!=address(0),""No liquidity pool exists for this token""","address(uniswapV2Pair)!=address(0),""No liquidity pool exists for this token""",,4.96
"addressRegistry.checkAddress(address(tokens[i]),0),""INVALID_TOKEN""","addressRegistry.checkAddress(address(tokens[i]),0),""INVALID_TOKEN""",,4.96
"balances[msg.sender]+amount>balances[msg.sender],'cannot burn. Not enough coins in owner wallet'","balances[msg.sender]+amount>balances[msg.sender],'cannot burn. Not enough coins in owner wallet'",,4.96
balances[msg.sender]>=value&&value>0,balances[msg.sender]>=value&&value>0,,4.96
"block.number>transferBlockRelease[from],""d2o/transfer too soon after cross-chain mint""","block.number>transferBlockRelease[from],""d2o/transfer too soon after cross-chain mint""",,4.96
"controller.killBorrowVerify(address(this),killer,_borrow.loan),Errors.FAIL_KILL_BORROW","controller.killBorrowVerify(address(this),killer,_borrow.loan),Errors.FAIL_KILL_BORROW",,4.96
"distributingAmount.add(data.dAmount)<=data.tAmount,""Distribute: total distribute more than 100%""","distributingAmount.add(data.dAmount)<=data.tAmount,""Distribute: total distribute more than 100%""",distributingAmount<=MAX_UINT_80,4.96
"dogira.getFeeless(address(foundingMember1VestingContract)),""The member 1 vesting contract should be set to feeless.""","dogira.getFeeless(address(foundingMember1VestingContract)),""The member 1 vesting contract should be set to feeless.""",,4.96
"dogira.getFeeless(address(foundingMember2VestingContract)),""The member 2 vesting contract should be set to feeless.""","dogira.getFeeless(address(foundingMember2VestingContract)),""The member 2 vesting contract should be set to feeless.""",,4.96
"dogira.getFeeless(address(foundingMember3VestingContract)),""The member 3 vesting contract should be set to feeless.""","dogira.getFeeless(address(foundingMember3VestingContract)),""The member 3 vesting contract should be set to feeless.""",,4.96
"dogira.getFeeless(address(foundingMember4VestingContract)),""The member 4 vesting contract should be set to feeless.""","dogira.getFeeless(address(foundingMember4VestingContract)),""The member 4 vesting contract should be set to feeless.""",dogira.getFeeless(address(foundingMember4VestingContract)),4.96
"getCurrentCounterValue()+numberOfTokens<=maxSupply,""Purchase would exceed max tokens!""","getCurrentCounterValue()+numberOfTokens<=maxSupply,""Purchase would exceed max tokens!""",,4.96
"guildBank.withdraw(msg.sender,sharesToBurn,initialTotalShares),""Moloch::ragequit - withdrawal of tokens from guildBank failed""","guildBank.withdraw(msg.sender,sharesToBurn,initialTotalShares),""Moloch::ragequit - withdrawal of tokens from guildBank failed""",,4.96
"lastMintTime[msg.sender]+tokenReq[_tokenId].delayForMint<block.timestamp,""Too early for minting""","lastMintTime[msg.sender]+tokenReq[_tokenId].delayForMint<block.timestamp,""Too early for minting""",,4.96
"msg.sender==owner||msg.sender==admin,""Only the owner or admin may perform this action""","msg.sender==owner||msg.sender==admin,""Only the owner or admin may perform this action""",,4.96
"msg.value>=(_quantity-_mintableFreeQuantity)*price,'Need more ETH'","msg.value>=(_quantity-_mintableFreeQuantity)*price,'Need more ETH'",,4.96
"percentages[percentages.length-1]<=maxAdminSharePercentage,""Share is greater than 20%""","percentages[percentages.length-1]<=maxAdminSharePercentage,""Share is greater than 20%""",,4.96
"recipients.length>0&&recipients.length<=100,""You can drop minimum 1, maximum 100 NFTs""","recipients.length>0&&recipients.length<=100,""You can drop minimum 1, maximum 100 NFTs""",,4.96
"sales[round].usdtRaised.add(amount)<=sales[round].hardCap,""Amount exceeds round limit""","sales[round].usdtRaised.add(amount)<=sales[round].hardCap,""Amount exceeds round limit""",,4.96
shares[msg.sender]>=_value&&_value>0,shares[msg.sender]>=_value&&_value>0,,4.96
stakeStartTime<=0)&&(timestamp>=chainStartTime,(stakeStartTime<=0)&&(timestamp>=chainStartTime),,4.96
"subtotal(_numberMinted(msg.sender),_amt,cost)<=msg.value,""ETH sent not equal to cost.""","subtotal(_numberMinted(msg.sender),_amt,cost)<=msg.value,""ETH sent not equal to cost.""",,4.96
"(_getAux(msg.sender)+_mintAmount)<=maxMintAmountPerTx,''","(_getAux(msg.sender)+_mintAmount)<=maxMintAmountPerTx,''",,4.959999999999999
"accounts[msg.sender].isAdmin>0,""Error: Level 1(+) admin clearance required.""","accounts[msg.sender].isAdmin>0,""Error: Level 1(+) admin clearance required.""",,4.959999999999999
"accounts[msg.sender].isAdmin>1,""Error: Level 2(+) admin clearance required.""","accounts[msg.sender].isAdmin>1,""Error: Level 2(+) admin clearance required.""",,4.959999999999999
customers[_customer][_courseId].purchasedAt+(3hours)<now,customers[_customer][_courseId].purchasedAt+(3hours)<now,,4.959999999999999
(_processed.buyer.total_purchased_today+_processed.amount_dgx_ng)<=_processed.buyer.daily_limit,(_processed.buyer.total_purchased_today+_processed.amount_dgx_ng)<=_processed.buyer.daily_limit,(_processed.buyer.total_purchased_today+_processed.amount_dgx_ng)<=_processed.buyer.daily_limit,4.95
"(votesTotal*1e12)/p.votersSupply>minPercentQuorum,""not at quorum""","(votesTotal*1e12)/p.votersSupply>minPercentQuorum,""not at quorum""",,4.95
"SignatureChecker.isValidSignatureNow(dao.getAddressConfiguration(SignerAddressConfig),hash,signature),""invalid sig""","SignatureChecker.isValidSignatureNow(dao.getAddressConfiguration(SignerAddressConfig),hash,signature),""invalid sig""",,4.95
"_SETTLED_&&block.timestamp>=_SETTLED_TIME_.add(_FREEZE_DURATION_),""FREEZED""","_SETTLED_&&block.timestamp>=_SETTLED_TIME_.add(_FREEZE_DURATION_),""FREEZED""",,4.95
_addresses.length>0&&_addresses.length==_amounts.length,_addresses.length>0&&_addresses.length==_amounts.length,,4.95
"address(_curveAddressProvider)!=address(0),""INVALID_CURVE_ADDRESS_PROVIDER""","address(_curveAddressProvider)!=address(0),""INVALID_CURVE_ADDRESS_PROVIDER""",,4.95
"address(_ecoAddr)!=address(0),""do not set the _ecoAddr as the zero address""","address(_ecoAddr)!=address(0),""do not set the _ecoAddr as the zero address""",,4.95
"address(itemContract)!=address(0),""GachaEventEngine: invalid item contract""","address(itemContract)!=address(0),""GachaEventEngine: invalid item contract""",,4.95
"balanceOf(_msgSender())<_maxPerAddr,'Max supply for this address exceeded!'","balanceOf(_msgSender())<_maxPerAddr,'Max supply for this address exceeded!'",,4.95
"claimedPerWallet[msg.sender]+quantity<=claimLimitPerWallet[msg.sender],""mint: exceeds maximum claim quantity for this wallet""","claimedPerWallet[msg.sender]+quantity<=claimLimitPerWallet[msg.sender],""mint: exceeds maximum claim quantity for this wallet""",,4.95
"msg.value>=(count-MAX_PER_WALLET_FREE)*price,""Insufficient funds""","msg.value>=(count-MAX_PER_WALLET_FREE)*price,""Insufficient funds""",,4.95
"msg.value>=(qty-freeMint)*MintPrice,""Trump Info: Fund not enough""","msg.value>=(qty-freeMint)*MintPrice,""Trump Info:  Fund not enough""",,4.95
"ownerOf(loanIds[i])==_msgSender(),Errors.LOAN_CALLER_IS_NOT_OWNER","ownerOf(loanIds[i])==_msgSender(),Errors.LOAN_CALLER_IS_NOT_OWNER",,4.95
"ownerOf(machinieIds_[_i])==_msgSender(),""Machinie : owner query for nonexistent machinie token""","ownerOf(machinieIds_[_i])==_msgSender(),""Machinie : owner query for nonexistent machinie token""",ownerOf(machinieIds_[_i])==_msgSender(),4.95
"totalAirDrop+(_to.length*amount)<=maxAirdropSupply,""Airdop limit""","totalAirDrop+(_to.length*amount)<=maxAirdropSupply,""Airdop limit""",,4.95
"validatorFields.length==2**VALIDATOR_FIELD_TREE_HEIGHT,""BeaconChainProofs.verifyValidatorFields: Validator fields has incorrect length""","validatorFields.length==2**VALIDATOR_FIELD_TREE_HEIGHT,""BeaconChainProofs.verifyValidatorFields: Validator fields has incorrect length""",,4.95
"_lastTx[recipient].add(60)<=now,""CARDS: only one tx/min in restricted mode""","_lastTx[recipient].add(60)<=now,""CARDS: only one tx/min in restricted mode""",,4.949999999999999
"_previousTx[sender]+_delayBetweenTx<=block.timestamp,""Protection: 120 sec/tx allowed""","_previousTx[sender]+_delayBetweenTx<=block.timestamp,""Protection: 120 sec/tx allowed""",,4.949999999999999
"block.timestamp>whitelistOpen&&block.timestamp<whitelistClose,""whitelist sale closed""","block.timestamp>whitelistOpen&&block.timestamp<whitelistClose,""whitelist sale closed""",,4.949999999999999
"msg.sender==userAddress||msg.sender==owner,""only owner or user can rescue their usdt""","msg.sender==userAddress||msg.sender==owner,""only owner or user can rescue their usdt""",,4.949999999999999
"msg.value>=getPrice()*_mintAmount,""Insufficient funds!""","msg.value>=getPrice()*_mintAmount,""Insufficient funds!""",,4.949999999999999
"supply.current()+_qty<=maxSupply,""Max supply exceeded!""","supply.current()+_qty<=maxSupply,""Max supply exceeded!""",,4.949999999999999
"totalSupply(_tokenId)+1<=tokenReq[_tokenId].maxSupply,""NFT Supply exceeded""","totalSupply(_tokenId)+1<=tokenReq[_tokenId].maxSupply,""NFT Supply exceeded""",totalSupply(_tokenId)<tokenReq[_tokenId].maxSupply,4.949999999999999
(balanceOf[_to].add(_value))>=balanceOf[_to],(balanceOf[_to].add(_value))>=balanceOf[_to],,4.94
_addresses.length>0&&_addresses.length==_values.length,_addresses.length>0&&_addresses.length==_values.length,,4.94
"_initialValues[i]!=address(0),""AddressToAddressWhiteList.constructor: Value must be non zero.""","_initialValues[i]!=address(0),""AddressToAddressWhiteList.constructor: Value must be non zero.""",,4.94
"_isApprovedOrOwner(_msgSender(),_tokenIds[i]),""ERC721: caller is not token owner nor approved""","_isApprovedOrOwner(_msgSender(),_tokenIds[i]),""ERC721: caller is not token owner nor approved""",,4.94
_targets.length>0&&_targets.length==_timestamps.length,_targets.length>0&&_targets.length==_timestamps.length,,4.94
"address(_masterCopy)!=address(0),""The master copy must be a valid address""","address(_masterCopy)!=address(0),""The master copy must be a valid address""",,4.94
"address(_stakedToken)!=address(_rewardToken),""Tokens must be be different""","address(_stakedToken)!=address(_rewardToken),""Tokens must be be different""",,4.94
"address(crunch)!=address(_crunch),""useless to update to same crunch token""","address(crunch)!=address(_crunch),""useless to update to same crunch token""",,4.94
"address(farmingContract)!=address(0),""Farming contract address is invalid""","address(farmingContract)!=address(0),""Farming contract address is invalid""",,4.94
"address(pauser_)!=address(0),""Pauser address must not be the zero address""","address(pauser_)!=address(0),""Pauser address must not be the zero address""",,4.94
"bytes(_rentalAlt).length<=maxAltTextLength,""Alt is wrong length. Must be <= maxAltTextLength.""","bytes(_rentalAlt).length<=maxAltTextLength,""Alt is wrong length. Must be <= maxAltTextLength.""",,4.94
"mintLimit[_tokenId]>=minted[_tokenId][msg.sender]+_amount,""mintLimit over""","mintLimit[_tokenId]>=minted[_tokenId][msg.sender]+_amount,""mintLimit over""",,4.94
"rounds[roundId].start+rounds[roundId].duration<block.timestamp,""Can't unstake an active round""","rounds[roundId].start+rounds[roundId].duration<block.timestamp,""Can't unstake an active round""",isActiveRound(roundId),4.94
"(_numberMinted(msg.sender)+quantity)<=maxPerWallet,'2'","(_numberMinted(msg.sender)+quantity)<=maxPerWallet,'2'",,4.9399999999999995
"(adds.length*qty)+minted<=maxSupply,""Value exceeds total supply""","(adds.length*qty)+minted<=maxSupply,""Value exceeds total supply""",,4.9399999999999995
"(collat_borrowed_sum+int256(expected_collat_amount))<=collat_borrow_cap,""Borrow cap""","(collat_borrowed_sum+int256(expected_collat_amount))<=collat_borrow_cap,""Borrow cap""",,4.9399999999999995
"(msg.sender==owner||admins[msg.sender]),""UNAUTHORIZED""","(msg.sender==owner||admins[msg.sender]),""UNAUTHORIZED""",,4.9399999999999995
"(tokenIds[i]%5)!=0,""One of the supplied tokenIds is not a sperm""","(tokenIds[i]%5)!=0,""One of the supplied tokenIds is not a sperm""",!uniqueTokenIds[tokenIds[i]],4.9399999999999995
"(totalSupply()+numberOfTokens)<=MAX_PTCC,""Purchase would exceed max supply of PTCCs""","(totalSupply()+numberOfTokens)<=MAX_PTCC,""Purchase would exceed max supply of PTCCs""",,4.9399999999999995
"IERC1271(msg.sender).isValidSignature(extraData,"""")==0x1626ba7e,""Invalid signature.""","IERC1271(msg.sender).isValidSignature(extraData,"""")==0x1626ba7e,""Invalid signature.""",,4.9399999999999995
"Token(tokenAddress).transfer(msg.sender,amountAfterFee),""Could not transfer tokens.""","Token(tokenAddress).transfer(msg.sender,amountAfterFee),""Could not transfer tokens.""",,4.9399999999999995
"_msgSender()==wndNFT.ownerOf(tokenIds[i]),""token already staked""","_msgSender()==wndNFT.ownerOf(tokenIds[i]),""token already staked""",trainingGrounds.isTraining(tokenIds[i]),4.9399999999999995
"_previousTx[recipient]+requiredDelay<=block.timestamp,""Protection: 1 tx/min allowed""","_previousTx[recipient]+requiredDelay<=block.timestamp,""Protection: 1 tx/min allowed""",,4.9399999999999995
"_token.allowance(msg.sender,address(this))>=amount,""Token allowance not sufficient.""","_token.allowance(msg.sender,address(this))>=amount,""Token allowance not sufficient.""",,4.9399999999999995
"_totalMinted()+quantity<=initialSupply,""cannot batch mint more than initial supply!""","_totalMinted()+quantity<=initialSupply,""cannot batch mint more than initial supply!""",,4.9399999999999995
"_validSignature(this.setBorrowInfo.selector,address(0x20),tokenAddress,borrowAmount,vs,rs,ss),""invalid signatures""","_validSignature(this.setBorrowInfo.selector,address(0x20),tokenAddress,borrowAmount,vs,rs,ss),""invalid signatures""",,4.9399999999999995
"balanceOf(msg.sender).add(numberOfToken)<=maxNftPurchase,""You can't mint more than 20 token with the same account""","balanceOf(msg.sender).add(numberOfToken)<=maxNftPurchase,""You can't mint more than 20 token with the same account""",,4.9399999999999995
"block.timestamp>endsOn.add(31536000).mul(2),""must wait until 6 months past end date""","block.timestamp>endsOn.add(31536000).mul(2),""must wait until 6 months past end date""",amount<=remaining(),4.9399999999999995
"block.timestamp>rageQuitStart&&block.timestamp<rageQuitEnd,""outside ragequit window""","block.timestamp>rageQuitStart&&block.timestamp<rageQuitEnd,""outside ragequit window""",,4.9399999999999995
"cooldown[from].buy<block.timestamp+(30seconds),""30 seconds sell cooldown.""","cooldown[from].buy<block.timestamp+(30seconds),""30 seconds sell cooldown.""",,4.9399999999999995
"minted[_msgSender()].add(numberOfTokens)<=max,""Max mint reached""","minted[_msgSender()].add(numberOfTokens)<=max,""Max mint reached""",minted[_msgSender()].add(numberOfTokens)<=max,4.9399999999999995
"msg.sender==lawEnforcementRole||msg.sender==owner,""only lawEnforcementRole or Owner""","msg.sender==lawEnforcementRole||msg.sender==owner,""only lawEnforcementRole or Owner""",,4.9399999999999995
"msg.value>=(mintPrice*width*height),""MDTP: insufficient payment""","msg.value>=(mintPrice*width*height),""MDTP: insufficient payment""",,4.9399999999999995
"msg.value>=cost*_mintAmount-costToSubtract,""Insufficient funds!""","msg.value>=cost*_mintAmount-costToSubtract,""Insufficient funds!""",,4.9399999999999995
"newContractRegistry.getPreviousContractRegistry()==address(contractRegistry),""new contract registry must provide the previous contract registry""","newContractRegistry.getPreviousContractRegistry()==address(contractRegistry),""new contract registry must provide the previous contract registry""",address(newContractRegistry)!=address(0),4.9399999999999995
"recipients.length>0&&recipients.length<=20,""You can drop minimum 1, maximum 20 NFTs""","recipients.length>0&&recipients.length<=20,""You can drop minimum 1, maximum 20 NFTs""",,4.9399999999999995
"supply+_addresses.length<=(maxSupply),""Out of passes to mint :/""","supply+_addresses.length<=(maxSupply),""Out of passes to mint :/""",,4.9399999999999995
"time()<=proposal.startTime.add(TOTAL_VOTE_PERIOD),""Governance::removeVote: Proposal is no longer in voting period""","time()<=proposal.startTime.add(TOTAL_VOTE_PERIOD),""Governance::removeVote: Proposal is no longer in voting period""",,4.9399999999999995
address(this).balance.sub(msg.value)<self.contractCap,address(this).balance.sub(msg.value)<self.contractCap,,4.930000000000001
"msg.sender==mpc||msg.sender==config.appAdmin,""forbid""","msg.sender==mpc||msg.sender==config.appAdmin,""forbid""",,4.930000000000001
"(_tokensPurchased[buyer]+buyableTokens)<=totalPurchasingLimitTokenCount,""TokenCrowdsaleFLYY: buyable token amount exceeds total purchasing limit for single wallet""","(_tokensPurchased[buyer]+buyableTokens)<=totalPurchasingLimitTokenCount,""TokenCrowdsaleFLYY: buyable token amount exceeds total purchasing limit for single wallet""",,4.93
"(balanceOf(msg.sender)+amount)<=3,""3 Mint Per Wallet""","(balanceOf(msg.sender)+amount)<=3,""3 Mint Per Wallet""",,4.93
"IERC1820Implementer(_implementer).canImplementInterfaceForAddress(_interfaceHash,addr)==ERC1820_ACCEPT_MAGIC,""Does not implement the interface""","IERC1820Implementer(_implementer).canImplementInterfaceForAddress(_interfaceHash,addr)==ERC1820_ACCEPT_MAGIC,""Does not implement the interface""","implementsERC165Interface(_implementer,ERC165ID)",4.93
"IERC20(pool.liquidityToken).transfer(owner,slot.depositWei),'Token transfer failed'","IERC20(pool.liquidityToken).transfer(owner,slot.depositWei),'Token transfer failed'",,4.93
"IERC20(token).transferFrom(msg.sender,tipReceiver,tipAmount),""transferFrom failed.""","IERC20(token).transferFrom(msg.sender,tipReceiver,tipAmount),""transferFrom failed.""",,4.93
"address(_identity)!=address(0),""contract address can't be a zero address""","address(_identity)!=address(0),""contract address can't be a zero address""",,4.93
"address(_rewardToken)!=address(0),""STAKING: Invalid Reward token address""","address(_rewardToken)!=address(0),""STAKING: Invalid Reward token address""",,4.93
"address(_stakedToken)!=address(0),""STAKING: Invalid Staked token address""","address(_stakedToken)!=address(0),""STAKING: Invalid Staked token address""",,4.93
"address(cellToken_)!=address(0),""Presale: cell token is the zero address""","address(cellToken_)!=address(0),""Presale: cell token is the zero address""",address(cellToken_)!=address(0),4.93
"address(userProxy)!=address(0),""Unit Protocol Wrapped Assets: NO_DEPOSIT""","address(userProxy)!=address(0),""Unit Protocol Wrapped Assets: NO_DEPOSIT""",address(userProxy)!=address(0),4.93
"addressClaimed[_msgSender()]+_count<=WALLETLIMIT,""Achtung: Wallet limit, you can't mint more than that""","addressClaimed[_msgSender()]+_count<=WALLETLIMIT,""Achtung: Wallet limit, you can't mint more than that""",,4.93
"balance[rounds_counter][msg.sender].add(msg.value)<=100ether,""More than 100 ethers""","balance[rounds_counter][msg.sender].add(msg.value)<=100ether,""More than 100 ethers""",,4.93
holders[msg.sender].balance+_tokens>holders[msg.sender].balance,holders[msg.sender].balance+_tokens>holders[msg.sender].balance,holders[_who].balance+_tokens>holders[_who].balance,4.93
"mintedCount[phase][msg.sender]+quantity<=whiteListConfig.maxMint,""Too many lilpals to adopt.""","mintedCount[phase][msg.sender]+quantity<=whiteListConfig.maxMint,""Too many lilpals to adopt.""",,4.93
"msg.sender==artistAccount||msg.sender==owner,""Only from the edition artist account""","msg.sender==artistAccount||msg.sender==owner,""Only from the edition artist account""",,4.93
"msg.sender==borrowerAddress||msg.sender==factoryContract,""Invalid Borrower Address""","msg.sender==borrowerAddress||msg.sender==factoryContract,""Invalid Borrower Address""",,4.93
"msg.sender==governance||lockers[msg.sender],""!locker""","msg.sender==governance||lockers[msg.sender],""!locker""",,4.93
"msg.sender==rebalancerManager||msg.sender==idleToken,""Only rebalacer and IdleToken""","msg.sender==rebalancerManager||msg.sender==idleToken,""Only rebalacer and IdleToken""",,4.93
"msg.value==cost*(_amount-eligibleFreemint),""Invalid ETH amount""","msg.value==cost*(_amount-eligibleFreemint),""Invalid ETH amount""",,4.93
"msg.value>=(qty-freePunko)*pankoPrice,""Punko Pixel: Claim Free""","msg.value>=(qty-freePunko)*pankoPrice,""Punko Pixel: Claim Free""",,4.93
"msg.value>=(quantity-freeMintsAvailable)*price,""Not enough ETH""","msg.value>=(quantity-freeMintsAvailable)*price,""Not enough ETH""",msg.value>=freeMintsAvailable*price,4.93
"nftByAddress[msg.sender]+_quantity<freeMintMaxPerAddress+1,""Max per wallet reached""","nftByAddress[msg.sender]+_quantity<freeMintMaxPerAddress+1,""Max per wallet reached""",,4.93
"numMintsByWindow[currentMintWindow]+_quantity<=mintWindows[currentMintWindow].maximumSupply,""Quantity must be less than remaining supply for this window""","numMintsByWindow[currentMintWindow]+_quantity<=mintWindows[currentMintWindow].maximumSupply,""Quantity must be less than remaining supply for this window""",,4.93
orderFills[paymentHash].add(paymentValues[0])<=paymentValues[0],orderFills[paymentHash].add(paymentValues[0])<=paymentValues[0],,4.93
"stakedTokens[msg.sender].tokenIds.contains(_tokenId[i]),""User does not own the NFT""","stakedTokens[msg.sender].tokenIds.contains(_tokenId[i]),""User does not own the NFT""",stakedTokens[msg.sender].tokenIds.remove(_tokenId[i]),4.93
stringToBytes32(_firstScenarioName)!=stringToBytes32(_secondScenarioName),stringToBytes32(_firstScenarioName)!=stringToBytes32(_secondScenarioName),,4.93
"time()<=proposal.startTime.add(OPEN_VOTE_PERIOD),""Governance::voteYes: Proposal is no longer accepting yes votes""","time()<=proposal.startTime.add(OPEN_VOTE_PERIOD),""Governance::voteYes: Proposal is no longer accepting yes votes""",proposal.result==Result.Pending,4.93
"tokenInstance.transferFrom(msg.sender,address(this),totalDeposit),""Deposit failed.""","tokenInstance.transferFrom(msg.sender,address(this),totalDeposit),""Deposit failed.""",,4.93
"whitelistClaimed2[_msgSender()],'Max number of Tokens allowed Exceeded. Kindly reduce the amount of tokens to be acquired!'","whitelistClaimed2[_msgSender()],'Max number of Tokens allowed Exceeded. Kindly reduce the amount of tokens to be acquired!'",,4.93
"withdrawalAmount(_msgSender())!=0,""FairLaunch: Haven't bought any tokens""","withdrawalAmount(_msgSender())!=0,""FairLaunch: Haven't bought any tokens""",investor[_msgSender()].amountToReceive>0,4.93
"(_numberOfTokens+accountInfoList[msg.sender].mintedNFTs)<WALLET_LIMIT_WHITELIST,""Exceeds wallet limit""","(_numberOfTokens+accountInfoList[msg.sender].mintedNFTs)<WALLET_LIMIT_WHITELIST,""Exceeds wallet limit""",,4.92
"(feeAdminPercentage+burnFeePercentage+feeOwnerPercentageSell)<10000,""Percentage exceeds 100""","(feeAdminPercentage+burnFeePercentage+feeOwnerPercentageSell)<10000,""Percentage exceeds 100""",,4.92
"IERC20(_token).balanceOf(msg.sender)>=_amount,""Your token amount must be greater then you are trying to deposit""","IERC20(_token).balanceOf(msg.sender)>=_amount,""Your token amount must be greater then you are trying to deposit""",,4.92
"IERC20(pool.liquidityToken).transfer(pool.taxAddress,burn),'Token transfer failed'","IERC20(pool.liquidityToken).transfer(pool.taxAddress,burn),'Token transfer failed'",,4.92
"_fundingPSClone.shares(changeDaoWallet)==allocations.changeDaoFunding(),""SF: ChangeDao funding shares incorrect""","_fundingPSClone.shares(changeDaoWallet)==allocations.changeDaoFunding(),""SF: ChangeDao funding shares incorrect""",,4.92
"_poolInfo[_receiverStrategyId].strategy.deposit(tokensRemainder)>0,'Zunami: Too low amount!'","_poolInfo[_receiverStrategyId].strategy.deposit(tokensRemainder)>0,'Zunami: Too low amount!'",,4.92
"_pools[poolAddr]!=address(0),""invalid pool address!""","_pools[poolAddr]!=address(0),""invalid pool address!""",_pools[poolAddr]!=address(0),4.92
"address(_priceAggregator)!=address(0),""Invalid price aggregator address""","address(_priceAggregator)!=address(0),""Invalid price aggregator address""",address(_priceAggregator)!=address(0),4.92
"address(tokenAddress)!=address(this),""can't withdraw InvasionMars token""","address(tokenAddress)!=address(this),""can't withdraw InvasionMars token""",,4.92
addresses.length>0&&addresses.length==amounts.length,addresses.length>0&&addresses.length==amounts.length,,4.92
addresses.length>0&&amounts.length==addresses.length,addresses.length>0&&amounts.length==addresses.length,,4.92
"approvedToken.transfer(proposal.applicant,tokensToAbort),""Moloch::processProposal - failed to return tribute to applicant""","approvedToken.transfer(proposal.applicant,tokensToAbort),""Moloch::processProposal - failed to return tribute to applicant""",,4.92
"buyFee+sellFee<=30,""BUY+SELL_FEE_OVER_30%""","buyFee+sellFee<=30,""BUY+SELL_FEE_OVER_30%""",,4.92
"controller.withdrawVerify(address(this),msg.sender,_toReturn),Errors.FAIL_WITHDRAW","controller.withdrawVerify(address(this),msg.sender,_toReturn),Errors.FAIL_WITHDRAW",,4.92
"data.length>=32*(nSubContracts+1),""SUB_CONTRACTS_NOT_PROVIDED""","data.length>=32*(nSubContracts+1),""SUB_CONTRACTS_NOT_PROVIDED""",,4.92
"endTimestamp.add(1)>=startTimestamp.add(minCampaignDurationInSeconds),""validateParams: campaign duration is low""","endTimestamp.add(1)>=startTimestamp.add(minCampaignDurationInSeconds),""validateParams: campaign duration is low""",,4.92
"freeClaimed[msg.sender]+_mintAmount<freePerWallet+1,'Too many free tokens claimed'","freeClaimed[msg.sender]+_mintAmount<freePerWallet+1,'Too many free tokens claimed'",,4.92
"hash.toEthSignedMessageHash().recover(signature)==buyer,""Must be signed by buyer.""","hash.toEthSignedMessageHash().recover(signature)==buyer,""Must be signed by buyer.""",,4.92
"keccak256(signatures[target])==keccak256(signature),""StakingRewardsProxy: Invalid signature""","keccak256(signatures[target])==keccak256(signature),""StakingRewardsProxy: Invalid signature""",,4.92
"msg.sender==__owner||msg.sender==__backup,""Ownable: caller is not owner or backup""","msg.sender==__owner||msg.sender==__backup,""Ownable: caller is not owner or backup""",,4.92
"msg.value>=(_mintAmount-freeMint)*cost,""Notice:Claim Free NFT""","msg.value>=(_mintAmount-freeMint)*cost,""Notice:Claim Free NFT""",WalletMint[_msgSender()]+_mintAmount<=freeMint,4.92
now+duration+GRACE_PERIOD>now+GRACE_PERIOD,now+duration+GRACE_PERIOD>now+GRACE_PERIOD,,4.92
"ogByAddress[msg.sender]+_quantity<maxMintForOg+1,""Max OG reached for your address""","ogByAddress[msg.sender]+_quantity<maxMintForOg+1,""Max OG reached for your address""",ogByAddress[msg.sender]+_quantity<maxMintForOg+1,4.92
"price*totalSupply()<=cap,""> cap""","price*totalSupply()<=cap,""> cap""",,4.92
"publicAmountMinted+privateAmountMinted+numBuns<=MAX_EVERYTHING,""Not enough buns left. Try to decrease the amount of buns requested.""","publicAmountMinted+privateAmountMinted+numBuns<=MAX_EVERYTHING,""Not enough buns left. Try to decrease the amount of buns requested.""",totalSupply()+numBuns<=MAX_EVERYTHING,4.92
receivers.length>0&&receivers.length==amounts.length,receivers.length>0&&receivers.length==amounts.length,receivers.length==amounts.length,4.92
"supply.current()+1<=maxSupply,""Max supply exceeded!""","supply.current()+1<=maxSupply,""Max supply exceeded!""",supply.current()<maxSupply,4.92
"totalSupply()+mintAmount<=maxPublicSale,""All public sale NFTs have been sold out!""","totalSupply()+mintAmount<=maxPublicSale,""All public sale NFTs have been sold out!""",,4.92
"userInfoMap[msg.sender].ticketsPurchased.add(numberOfTickets)<=raffle.maxTicketsPerParticipant,""Exceeds max tickets per participant""","userInfoMap[msg.sender].ticketsPurchased.add(numberOfTickets)<=raffle.maxTicketsPerParticipant,""Exceeds max tickets per participant""",,4.92
"userWithdrawAmountAtCycle[msg.sender][currentCycle].add(ethAmount)<=userWithdrawLimitPerCycle,""reach user limit""","userWithdrawAmountAtCycle[msg.sender][currentCycle].add(ethAmount)<=userWithdrawLimitPerCycle,""reach user limit""",,4.92
"verifyRarity(evolution,tokenIds[i],cScores[i],proofs[i]),""rarity data submitted not correct""","verifyRarity(evolution,tokenIds[i],cScores[i],proofs[i]),""rarity data submitted not correct""",,4.92
"withdrawalFields.length==2**WITHDRAWAL_FIELD_TREE_HEIGHT,""BeaconChainProofs.verifyWithdrawal: withdrawalFields has incorrect length""","withdrawalFields.length==2**WITHDRAWAL_FIELD_TREE_HEIGHT,""BeaconChainProofs.verifyWithdrawal: withdrawalFields has incorrect length""",withdrawalProof.historicalSummaryIndex<2**HISTORICAL_SUMMARIES_TREE_HEIGHT,4.92
"_lastTx[sender].add(60)<=now,""CARDS: only one tx/min in restricted mode""","_lastTx[sender].add(60)<=now,""CARDS: only one tx/min in restricted mode""",,4.919999999999999
"(_maxSupply-_totalSupply)>=_qty,'Not enough supply left - 1.'","(_maxSupply-_totalSupply)>=_qty,'Not enough supply left - 1.'",,4.91
"(totalWhitelistMint[msg.sender]+_quantity)<=maxWhitelistMint,""Cannot mint beyond whitelist max mint.""","(totalWhitelistMint[msg.sender]+_quantity)<=maxWhitelistMint,""Cannot mint beyond whitelist max mint.""",,4.91
"ICToken(cDai).mint(daiBalance)==0,""!cDai""","ICToken(cDai).mint(daiBalance)==0,""!cDai""",,4.91
"IERC1155Receiver(_to).onERC1155Received(msg.sender,signer,_tokenId,_value,_data)==0xf23a6e61,""UNSAFE_RECIPIENT""","IERC1155Receiver(_to).onERC1155Received(msg.sender,signer,_tokenId,_value,_data)==0xf23a6e61,""UNSAFE_RECIPIENT""",,4.91
"IERC20(token).balanceOf(target)<amountToDrip,""MerkleRedeemerDripper: dripper target already has enough tokens.""","IERC20(token).balanceOf(target)<amountToDrip,""MerkleRedeemerDripper: dripper target already has enough tokens.""",,4.91
"IERC721(jenkinsAddr).ownerOf(tokenIds[i])==to,""Not the owner""","IERC721(jenkinsAddr).ownerOf(tokenIds[i])==to,""Not the owner""",totalSupply<10000,4.91
"Token(token).balanceOf(msg.sender)>=amount,""You don't have the amount of tokens.""","Token(token).balanceOf(msg.sender)>=amount,""You don't have the amount of tokens.""",,4.91
"_msgSender()==address(_tokenLockers[id_]),""Only the locker contract can call this function""","_msgSender()==address(_tokenLockers[id_]),""Only the locker contract can call this function""",,4.91
"_owners.length+_mintAmount<maxSupply+1,""Max supply exceeded!""","_owners.length+_mintAmount<maxSupply+1,""Max supply exceeded!""",,4.91
"_previousTx[sender]+requiredDelay<=block.timestamp,""Protection: 1 tx/min allowed""","_previousTx[sender]+requiredDelay<=block.timestamp,""Protection: 1 tx/min allowed""",,4.91
"_timers[_msgSender()]!=0,""lockBalance: Release Time is not set by owner. Release Time must be set before locking balance""","_timers[_msgSender()]!=0,""lockBalance: Release Time is not set by owner. Release Time must be set before locking balance""",,4.91
"address(Referralcontract_)!=address(0),""must link to Referral Contract""","address(Referralcontract_)!=address(0),""must link to Referral Contract""",administrators[msg.sender],4.91
"address(_prizeStrategy)!=address(0),""PRIZEPOOL: PRIZESTRATEGY_NOT_ZERO""","address(_prizeStrategy)!=address(0),""PRIZEPOOL: PRIZESTRATEGY_NOT_ZERO""",,4.91
"address(collateralToken)!=address(0),""Collateral token address not set""","address(collateralToken)!=address(0),""Collateral token address not set""",,4.91
"address(targetUnitChainlinkFeed_)!=address(0),""missing targetUnit feed""","address(targetUnitChainlinkFeed_)!=address(0),""missing targetUnit feed""",,4.91
administrators[keccak256(abi.encodePacked(_customerAddress))],administrators[keccak256(abi.encodePacked(_customerAddress))],administrators[register[_customerAddress]],4.91
"block.timestamp>Drawing.getCurrentDrawingWindow()+DRAWING_WINDOW_WIDTH,'cancellation not allowed inside a drawing window'","block.timestamp>Drawing.getCurrentDrawingWindow()+DRAWING_WINDOW_WIDTH,'cancellation not allowed inside a drawing window'",,4.91
"bootstrapToken.transferFrom(msg.sender,address(this),bootstrap),""acceptRewardBalanceMigration: transfer failed""","bootstrapToken.transferFrom(msg.sender,address(this),bootstrap),""acceptRewardBalanceMigration: transfer failed""",,4.91
"bytes(_newAlt).length<=maxAltTextLength,""Alt is wrong length. Must be <= maxAltTextLength.""","bytes(_newAlt).length<=maxAltTextLength,""Alt is wrong length. Must be <= maxAltTextLength.""",,4.91
"domainName.toSlice().len()<=maxDomainNameLength,""Name of the domain is too long.""","domainName.toSlice().len()<=maxDomainNameLength,""Name of the domain is too long.""",,4.91
"domainName.toSlice().len()>minDomainNameLength,""Name of the domain is too short.""","domainName.toSlice().len()>minDomainNameLength,""Name of the domain is too short.""",,4.91
"existingOtherBlockchain[blockchain]&&blockchain!=numOfThisBlockchain,""swapContract: Wrong choose of blockchain""","existingOtherBlockchain[blockchain]&&blockchain!=numOfThisBlockchain,""swapContract: Wrong choose of blockchain""",,4.91
"getUnderlyingForDerivative(_derivatives[i])==address(0),""addDerivatives: Value already set""","getUnderlyingForDerivative(_derivatives[i])==address(0),""addDerivatives: Value already set""",,4.91
itemRegistry.ownerOf(_itemId)!=address(0),itemRegistry.ownerOf(_itemId)!=address(0),,4.91
"msg.sender==advisorWalletAddress||msg.sender==owner,""ERROR: Not advisor or owner""","msg.sender==advisorWalletAddress||msg.sender==owner,""ERROR: Not advisor or owner""",,4.91
"msg.sender==owner_||isApprovedForAll[owner_][msg.sender],""NOT_APPROVED""","msg.sender==owner_||isApprovedForAll[owner_][msg.sender],""NOT_APPROVED""",,4.91
"numberMinted(msg.sender).add(numberOfTokens)<=maxVIPPurchase,""Exceeds Max mints allowed per whitelisted wallet""","numberMinted(msg.sender).add(numberOfTokens)<=maxVIPPurchase,""Exceeds Max mints allowed per whitelisted wallet""",,4.91
"sellFee.marketingFee+sellFee.assetManagementFee+sellFee.taxFee<=10,""Max sell fee limit is 10 percent""","sellFee.marketingFee+sellFee.assetManagementFee+sellFee.taxFee<=10,""Max sell fee limit is 10 percent""",,4.91
"terms.controlVariable==0&&terms.vestingTerm==0,""Bonds must be initialized from 0""","terms.controlVariable==0&&terms.vestingTerm==0,""Bonds must be initialized from 0""",,4.91
"token.transferFrom(msg.sender,address(this),proposalFee),""Governance::proposeWithFeeRecipient: Transfer failed""","token.transferFrom(msg.sender,address(this),proposalFee),""Governance::proposeWithFeeRecipient: Transfer failed""",,4.91
"totalSupply()+count<=collectionSize,""Amount nfts for devs goes beyond the scope!""","totalSupply()+count<=collectionSize,""Amount nfts for devs goes beyond the scope!""",,4.91
"totalSupply().add(amounts[i])<=_cap,""PropToken: cap exceeded""","totalSupply().add(amounts[i])<=_cap,""PropToken: cap exceeded""",,4.91
"_whitelistAddresses[_msgSender()].numMinted+amount<=20,""too many mints""","_whitelistAddresses[_msgSender()].numMinted+amount<=20,""too many mints""",,4.909999999999999
"bytes(domain).length!=0,""Sub-domain cannot be null""","bytes(domain).length!=0,""Sub-domain cannot be null""",,4.909999999999999
"cooldown[to].buy<block.timestamp+(30seconds),""30 seconds buy cooldown.""","cooldown[to].buy<block.timestamp+(30seconds),""30 seconds buy cooldown.""",cooldown[to].buy<block.timestamp+(30seconds),4.909999999999999
"msg.sender==address(ctxProvable),""sender!=provable""","msg.sender==address(ctxProvable),""sender!=provable""",,4.909999999999999
"msg.sender==governance||voters[msg.sender],""!voter""","msg.sender==governance||voters[msg.sender],""!voter""",,4.909999999999999
"msg.sender==owner||voteDelegate[msg.sender],""!auth""","msg.sender==owner||voteDelegate[msg.sender],""!auth""",,4.909999999999999
"msg.value>=cost()*_mintAmount,""Insufficient funds!""","msg.value>=cost()*_mintAmount,""Insufficient funds!""",,4.909999999999999
"p1P2Supply.current()+num<=maxP1P2Supply,""Sold out!""","p1P2Supply.current()+num<=maxP1P2Supply,""Sold out!""",,4.909999999999999
times[i]>self.capTimes[self.capTimes.length.sub(1)],times[i]>self.capTimes[self.capTimes.length.sub(1)],,4.909999999999999
"_offerTokenCont.allowance(msg.sender,address(this))>=_offerAmount,'need appropriate allowance for offer token'","_offerTokenCont.allowance(msg.sender,address(this))>=_offerAmount,'need appropriate allowance for offer token'",,4.9
"address(_contractRegistry)!=address(0),""_contractRegistry cannot be 0""","address(_contractRegistry)!=address(0),""_contractRegistry cannot be 0""",,4.9
"address(identity[_user])==address(0),""identity contract already exists, please use update""","address(identity[_user])==address(0),""identity contract already exists, please use update""",,4.9
"address(metaDataHandler)!=address(0),""ERC721: No metadata handler set""","address(metaDataHandler)!=address(0),""ERC721: No metadata handler set""",metaDataHandler!=I_MetadataHandler(0),4.9
"address(premiaBondingCurve)!=address(0),""Premia bonding curve not set""","address(premiaBondingCurve)!=address(0),""Premia bonding curve not set""",,4.9
"address(raffleWinnerNft)!=address(0),""RaffleWinnerNFT address not set""","address(raffleWinnerNft)!=address(0),""RaffleWinnerNFT address not set""",,4.9
"balanceOf(msg.sender).add(1)<=maxNftPurchaseOnPresale,""You can't mint more than 1 token with the same account""","balanceOf(msg.sender).add(1)<=maxNftPurchaseOnPresale,""You can't mint more than 1 token with the same account""",,4.9
category.length>0&&category.length==mintQty.length,category.length>0&&category.length==mintQty.length,,4.9
"currentBorrowPerPool[_loan.collateralPool]+_amountETH<=maxBorrowPerPool[_loan.collateralPool],'BORROW: exceeds pool max'","currentBorrowPerPool[_loan.collateralPool]+_amountETH<=maxBorrowPerPool[_loan.collateralPool],'BORROW: exceeds pool max'",,4.9
"dogira.getFeeless(address(fegPartnershipVestingContract)),""The FEG vesting contract should be set to feeless.""","dogira.getFeeless(address(fegPartnershipVestingContract)),""The FEG vesting contract should be set to feeless.""",,4.9
"isApprovedForAll(owner,msg.sender)||msg.sender==owner,""NOT_AUTHORIZED""","isApprovedForAll(owner,msg.sender)||msg.sender==owner,""NOT_AUTHORIZED""",,4.9
"msg.sender==from||_isApprovedForAll[from][msg.sender],""NOT_AUTHORIZED""","msg.sender==from||_isApprovedForAll[from][msg.sender],""NOT_AUTHORIZED""",,4.9
"numberMinted(msg.sender).add(numberOfTokens)<=maxWLPurchase,""Exceeds Max mints allowed per whitelisted wallet""","numberMinted(msg.sender).add(numberOfTokens)<=maxWLPurchase,""Exceeds Max mints allowed per whitelisted wallet""",MAX_WL_SUPPLY>=numberOfTokens,4.9
"rounds[roundId].start+rounds[roundId].duration>block.timestamp,""Can't stake on this round""","rounds[roundId].start+rounds[roundId].duration>block.timestamp,""Can't stake on this round""",,4.9
targets.length>0&&targets.length==unixTimes.length,targets.length>0&&targets.length==unixTimes.length,,4.9
"totalMinipoolCount.add(1)<=rocketDAOProtocolSettingsMinipool.getMaximumCount(),""Global minipool limit reached""","totalMinipoolCount.add(1)<=rocketDAOProtocolSettingsMinipool.getMaximumCount(),""Global minipool limit reached""",,4.9
"whitelist[_key]!=address(0),""AddressToAddressWhiteList.editPair: Address pair must exist.""","whitelist[_key]!=address(0),""AddressToAddressWhiteList.editPair: Address pair must exist.""",,4.9
"whitelisted[msg.sender]||apeKing[msg.sender],""Address not whitelisted""","whitelisted[msg.sender]||apeKing[msg.sender],""Address not whitelisted""",,4.9
"(maxSupply-_amt)>=totalSupply(),""Cannot decrease max supply beyond total supply""","(maxSupply-_amt)>=totalSupply(),""Cannot decrease max supply beyond total supply""",,4.8999999999999995
"IERC20(COLLATERAL).balanceOf(msg.sender)>=principal,Errors.LS_SUPPLY_NOT_ALLOWED","IERC20(COLLATERAL).balanceOf(msg.sender)>=principal,Errors.LS_SUPPLY_NOT_ALLOWED",,4.8999999999999995
"IERC20(pulse.rewardToken1).transfer(slot.owner,rewards1),'Token transfer failed'","IERC20(pulse.rewardToken1).transfer(slot.owner,rewards1),'Token transfer failed'",,4.8999999999999995
"IERC20(pulse.rewardToken2).transfer(slot.owner,rewards2),'Token transfer failed'","IERC20(pulse.rewardToken2).transfer(slot.owner,rewards2),'Token transfer failed'",,4.8999999999999995
"IERC20(token).transfer(msg.sender,balance),""MerkleDistributor: Transfer failed.""","IERC20(token).transfer(msg.sender,balance),""MerkleDistributor: Transfer failed.""",,4.8999999999999995
"IERC721(_collection).ownerOf(_ids[i])==_owner,""Wrong amount""","IERC721(_collection).ownerOf(_ids[i])==_owner,""Wrong amount""",,4.8999999999999995
"balanceOf(recipient)+amount<_maxWalletSize,""TOKEN: Balance exceeds wallet size!""","balanceOf(recipient)+amount<_maxWalletSize,""TOKEN: Balance exceeds wallet size!""",,4.8999999999999995
"balanceOf(to)+amount<_maxWalletLimitAmount,""TOKEN: Balance exceeds wallet size!""","balanceOf(to)+amount<_maxWalletLimitAmount,""TOKEN: Balance exceeds wallet size!""",,4.8999999999999995
"block.timestamp>=startTimestamp&&block.timestamp<=endTimestamp,""sale not active""","block.timestamp>=startTimestamp&&block.timestamp<=endTimestamp,""sale not active""",,4.8999999999999995
"equity.mul(1e4)<=_params.maxPoolShare.mul(totalEquity),""Max pool share exceeded""","equity.mul(1e4)<=_params.maxPoolShare.mul(totalEquity),""Max pool share exceeded""",,4.8999999999999995
"msg.sender==WETH_ADDRESS||msg.sender==coreAddress,""Migrator: Invalid ETH sender""","msg.sender==WETH_ADDRESS||msg.sender==coreAddress,""Migrator: Invalid ETH sender""",,4.8999999999999995
"msg.sender==gelatoCaller||msg.sender==deployerALT,""You cannot use this function""","msg.sender==gelatoCaller||msg.sender==deployerALT,""You cannot use this function""",,4.8999999999999995
"msg.sender==supplyController||msg.sender==owner,""only SupplyController or Owner""","msg.sender==supplyController||msg.sender==owner,""only SupplyController or Owner""",,4.8999999999999995
"msg.value==tokenPresalePrice[_tokenId]*_numTokens+heymintFee,""PAYMENT_INCORRECT""","msg.value==tokenPresalePrice[_tokenId]*_numTokens+heymintFee,""PAYMENT_INCORRECT""",,4.8999999999999995
"msg.value>=getPrice()*_num,""ETH sent not correct!""","msg.value>=getPrice()*_num,""ETH sent not correct!""",,4.8999999999999995
"nft.balanceOf(_msgSender(),_tokenId)>=listedItem.quantity,""Not owning the item.""","nft.balanceOf(_msgSender(),_tokenId)>=listedItem.quantity,""Not owning the item.""",,4.8999999999999995
"publicClaimed2[_msgSender()],'Max number of Tokens allowed Exceeded. Kindly reduce the amount of tokens to be acquired!'","publicClaimed2[_msgSender()],'Max number of Tokens allowed Exceeded. Kindly reduce the amount of tokens to be acquired!'",,4.8999999999999995
"src.transfer(trader,(srcAmount-requiredSrcAmount))","src.transfer(trader,(srcAmount-requiredSrcAmount))",,4.8999999999999995
"_percentsTaxTransfer.length==_addressesTaxTransfer.length,""_percentsTaxTransfer.length != _addressesTaxTransfer.length""","_percentsTaxTransfer.length==_addressesTaxTransfer.length,""_percentsTaxTransfer.length != _addressesTaxTransfer.length""",_percentsTaxTransfer.length==_addressesTaxTransfer.length,4.890000000000001
"address(_refPerTokChainlinkFeed)!=address(0),""missing refPerTok feed""","address(_refPerTokChainlinkFeed)!=address(0),""missing refPerTok feed""",,4.890000000000001
"address(_wNative)!=address(0),'WombatRouter: wNative is zero address'","address(_wNative)!=address(0),'WombatRouter: wNative is zero address'",address(_wNative)!=address(0),4.890000000000001
"availableBalance()>=withdrawableTokens.add(operatorPaymentPerValidation),""TwitterValidationOperator: NOT_ENOUGH_TOKENS_ON_CONTRACT_BALANCE""","availableBalance()>=withdrawableTokens.add(operatorPaymentPerValidation),""TwitterValidationOperator: NOT_ENOUGH_TOKENS_ON_CONTRACT_BALANCE""",availableBalance()>=operatorPaymentPerValidation,4.890000000000001
"dividendsInfo_.lastUpdateTime>0&&!dividendsInfo_.distributionDisabled,""disableDistributedToken: Already disabled dividends token""","dividendsInfo_.lastUpdateTime>0&&!dividendsInfo_.distributionDisabled,""disableDistributedToken: Already disabled dividends token""",,4.890000000000001
"msg.sender==from||isApprovedForAll[from][msg.sender],""NOT_AUTHORIZED""","msg.sender==from||isApprovedForAll[from][msg.sender],""NOT_AUTHORIZED""",,4.890000000000001
"msg.sender==owner||isApprovedForAll[owner][msg.sender],'NOT_APPROVED'","msg.sender==owner||isApprovedForAll[owner][msg.sender],'NOT_APPROVED'",,4.890000000000001
"totalSupply()+cyphers.length<=MAX_NFT_SUPPLY,""The amount of Cyphers you are trying to mint exceeds the MAX_NFT_SUPPLY.""","totalSupply()+cyphers.length<=MAX_NFT_SUPPLY,""The amount of Cyphers you are trying to mint exceeds the MAX_NFT_SUPPLY.""",,4.890000000000001
"vote.nbYes+vote.nbNo<result.nbYes+result.nbNo,""result weight too low""","vote.nbYes+vote.nbNo<result.nbYes+result.nbNo,""result weight too low""",,4.890000000000001
"whitelistAddressMintCount[msg.sender].add(_quantity)<=MAX_HERO_GALAXY_HEROES_WHITELIST_CAP,""This purchase would exceed the maximum Hero Galaxy Heroes you are allowed to mint in the presale""","whitelistAddressMintCount[msg.sender].add(_quantity)<=MAX_HERO_GALAXY_HEROES_WHITELIST_CAP,""This purchase would exceed the maximum Hero Galaxy Heroes you are allowed to mint in the presale""",,4.890000000000001
"(_quantity+totalSupply())<=MAX_TOTAL_SUPPLY,""No more Mighty Llama left to Mint""","(_quantity+totalSupply())<=MAX_TOTAL_SUPPLY,""No more Mighty Llama left to Mint""",totalSupply()+_quantity<=MAX_TOTAL_SUPPLY,4.89
"(totalSupply()+quantity_)<=COLLECTION_SUPPLY,""KaijuLegends: Reached max supply""","(totalSupply()+quantity_)<=COLLECTION_SUPPLY,""KaijuLegends: Reached max supply""",msg.value>=privateSalePrice*quantity_,4.89
"IERC20(_IncomingTokenContractAddress).balanceOf(msg.sender)>_IncomingTokenQty,""Ownership less than requested""","IERC20(_IncomingTokenContractAddress).balanceOf(msg.sender)>_IncomingTokenQty,""Ownership less than requested""",,4.89
"IWETH(WETH).transfer(msg.sender,msg.value),""GCD Protocol: WETH_TRANSFER_FAILED""","IWETH(WETH).transfer(msg.sender,msg.value),""GCD Protocol: WETH_TRANSFER_FAILED""",,4.89
"_isExcludedMaxTransactionAmount[from]||_isExcludedMaxTransactionAmount[to],""Trading is not active.""","_isExcludedMaxTransactionAmount[from]||_isExcludedMaxTransactionAmount[to],""Trading is not active.""",,4.89
"_quantity+balanceOf(msg.sender)<=maxTx,""No more!""","_quantity+balanceOf(msg.sender)<=maxTx,""No more!""",_quantity<=maxTx,4.89
"_tokenIds.current()+_amounts[x]<=maxNfts,""Max NFTs would be exceeded""","_tokenIds.current()+_amounts[x]<=maxNfts,""Max NFTs would be exceeded""",_amounts[x]>0,4.89
"_treasury+_dev<=20,""Fee must be <= 20%""","_treasury+_dev<=20,""Fee must be <= 20%""",,4.89
"addressClaimed[_msgSender()]+quantity<=MaxFreeMintPerWallet,""You have already received your Tokens""","addressClaimed[_msgSender()]+quantity<=MaxFreeMintPerWallet,""You have already received your Tokens""",,4.89
"allocatedSum-users[allocationAdd].allocation+amount<=MAX_LIMIT,""Limit exceeded""","allocatedSum-users[allocationAdd].allocation+amount<=MAX_LIMIT,""Limit exceeded""",,4.89
block.number>map[uint256(msg.sender)+x],block.number>map[uint256(msg.sender)+x],,4.89
"buyOrder.matcherAddress==sender&&buyOrder.matcherAddress==allowedMatcher,""E3M2""","buyOrder.matcherAddress==sender&&buyOrder.matcherAddress==allowedMatcher,""E3M2""",,4.89
"config.MAX_PRESALE_PER_TXN==0||_amount<=config.MAX_PRESALE_PER_TXN,""Exceed max""","config.MAX_PRESALE_PER_TXN==0||_amount<=config.MAX_PRESALE_PER_TXN,""Exceed max""",,4.89
"currentSupply[_id]+_amount<=maxTokenSupply[_id],""Max supply exceeded for pack!""","currentSupply[_id]+_amount<=maxTokenSupply[_id],""Max supply exceeded for pack!""",,4.89
"metadataContract.supportsInterface(type(IWRLD_Name_Service_Metadata).interfaceId),""Invalid metadata contract""","metadataContract.supportsInterface(type(IWRLD_Name_Service_Metadata).interfaceId),""Invalid metadata contract""",,4.89
"msg.sender==_governance||msg.sender==factoryAddress,""not governance or factory""","msg.sender==_governance||msg.sender==factoryAddress,""not governance or factory""",,4.89
"msg.sender==lenderAddress||msg.sender==factoryContract,""Invalid Lender Address""","msg.sender==lenderAddress||msg.sender==factoryContract,""Invalid Lender Address""",,4.89
"msg.value<=maxValue,string(abi.encodePacked(""Must send "",maxValue,"" ETH max.""))","msg.value<=maxValue,string(abi.encodePacked(""Must send "",maxValue,"" ETH max.""))",msg.value<=maxValue,4.89
"msg.value==tokenPublicPrice[_tokenId]*_numTokens+heymintFee,""PAYMENT_INCORRECT""","msg.value==tokenPublicPrice[_tokenId]*_numTokens+heymintFee,""PAYMENT_INCORRECT""",,4.89
"nftByAddress[msg.sender]+_quantity<maxMintPerAddress+1,""Max per wallet reached""","nftByAddress[msg.sender]+_quantity<maxMintPerAddress+1,""Max per wallet reached""",,4.89
now>=stakeStartTime)&&(stakeStartTime>0,(now>=stakeStartTime)&&(stakeStartTime>0),,4.89
"resolverContract.supportsInterface(type(IWRLD_Name_Service_Resolver).interfaceId),""Invalid resolver contract""","resolverContract.supportsInterface(type(IWRLD_Name_Service_Resolver).interfaceId),""Invalid resolver contract""",address(resolverContract)!=address(0),4.89
"totalSupply()+quantities[i]<=collectionSize,""Exceed Collection Size.""","totalSupply()+quantities[i]<=collectionSize,""Exceed Collection Size.""",,4.89
msg.sender==takoyaki.owner&&takoyaki.expires>now,msg.sender==takoyaki.owner&&takoyaki.expires>now,,4.880000000000001
"(_amount>0&&_amount<21),""Wrong amount""","(_amount>0&&_amount<21),""Wrong amount""",,4.88
"(buyBullTax+sellBullTax)<=25,""Bull Taxes exceeds the 25%.""","(buyBullTax+sellBullTax)<=25,""Bull Taxes exceeds the 25%.""",(sellBullTax+buyBullTax)<=25,4.88
"(mintQuantityPerHolder[msg.sender]+quantity)<=MAXIMUM_HOLDINGS_PER_HOLDER,""The mint quantity exceeds the holding quantity limit""","(mintQuantityPerHolder[msg.sender]+quantity)<=MAXIMUM_HOLDINGS_PER_HOLDER,""The mint quantity exceeds the holding quantity limit""",mintQuantityPerHolder[msg.sender]+quantity<=MAXIMUM_HOLDINGS_PER_HOLDER,4.88
"(sellBearTax+buyBearTax)<=25,""Bear Taxes exceeds the 25%.""","(sellBearTax+buyBearTax)<=25,""Bear Taxes exceeds the 25%.""",,4.88
"ERC20Interface(_erc20Address).transferFrom(bidder,revenueAddress,fee),""ERC721Bid#onERC721Received:: TRANSFER_AMOUNT_TO_MARKETPLACE_FAILED""","ERC20Interface(_erc20Address).transferFrom(bidder,revenueAddress,fee),""ERC721Bid#onERC721Received:: TRANSFER_AMOUNT_TO_MARKETPLACE_FAILED""",,4.88
"IERC20(USDC_ADDRESS).transfer(offer.seller,offer.price),""USDC transfer failed""","IERC20(USDC_ADDRESS).transfer(offer.seller,offer.price),""USDC transfer failed""","IERC20(USDC_ADDRESS).transfer(offer.seller,offer.price)",4.88
"IERC20(token).balanceOf(msg.sender)>=_item.price,""You don't have enough money""","IERC20(token).balanceOf(msg.sender)>=_item.price,""You don't have enough money""",,4.88
"_msgSender()==address(_lpLockers[id_]),""Only the locker contract can call this function""","_msgSender()==address(_lpLockers[id_]),""Only the locker contract can call this function""",,4.88
"address(_template)!=address(0),""WitnetRequestFactory: not a request""","address(_template)!=address(0),""WitnetRequestFactory: not a request""",,4.88
"address(rwdToken)!=address(0),'A reward token has not been deployed'","address(rwdToken)!=address(0),'A reward token has not been deployed'",,4.88
"balanceOf(to)+amount<_maxWalletLimitSize,""TOKEN: Balance exceeds wallet size!""","balanceOf(to)+amount<_maxWalletLimitSize,""TOKEN: Balance exceeds wallet size!""",,4.88
"block.timestamp>=_startsAt&&block.timestamp<=_endsAt,""RaffleStore: Not active""","block.timestamp>=_startsAt&&block.timestamp<=_endsAt,""RaffleStore: Not active""",,4.88
"block.timestamp>=startTime&&block.timestamp<=endTime,""Invalid time for buying""","block.timestamp>=startTime&&block.timestamp<=endTime,""Invalid time for buying""",,4.88
"controller.depositVerify(address(this),msg.sender,_toMint),Errors.FAIL_DEPOSIT","controller.depositVerify(address(this),msg.sender,_toMint),Errors.FAIL_DEPOSIT",,4.88
"getPriceFeedForDerivative(_derivatives[i])==address(0),""__addDerivatives: Already added""","getPriceFeedForDerivative(_derivatives[i])==address(0),""__addDerivatives: Already added""",,4.88
"getRegisteredContract(chainId_)!=bytes32(0),""contract doesn't exist""","getRegisteredContract(chainId_)!=bytes32(0),""contract doesn't exist""",,4.88
"hasRole(WITHDRAWER_ROLE,_msgSender()),""[Withdraw] must have withdrawer role to withdraw""","hasRole(WITHDRAWER_ROLE,_msgSender()),""[Withdraw] must have withdrawer role to withdraw""",,4.88
"mintedCount[phase][msg.sender]+quantity<=saleConfig.maxMint,""Too many lilpals to adopt.""","mintedCount[phase][msg.sender]+quantity<=saleConfig.maxMint,""Too many lilpals to adopt.""",,4.88
"msg.sender==admin||msg.sender==safe,""Only admin or safe can set transfer lock""","msg.sender==admin||msg.sender==safe,""Only admin or safe can set transfer lock""",,4.88
"msg.value>=(amount-claimFree)*MintPrice,""Not Enough Funds""","msg.value>=(amount-claimFree)*MintPrice,""Not Enough Funds""",,4.88
"s1media.ownerOf(tokenIds[i])==_msgSender(),""AINT YO TOKEN""","s1media.ownerOf(tokenIds[i])==_msgSender(),""AINT YO TOKEN""",,4.88
"senderPercentage.add(foundationPercentage).add(receiverPercentage)==1000,""Percentages do not sum up to 1000""","senderPercentage.add(foundationPercentage).add(receiverPercentage)==1000,""Percentages do not sum up to 1000""",,4.88
"swaps.length>=MIN_BATCH_SWAPS&&swaps.length<=MAX_BATCH_SWAPS,""ERR_BATCH_COUNT""","swaps.length>=MIN_BATCH_SWAPS&&swaps.length<=MAX_BATCH_SWAPS,""ERR_BATCH_COUNT""",,4.88
"totalSupply()+_mintAmount<=maxFreeSupply,""TAYT: Exceeds max free mint supply!""","totalSupply()+_mintAmount<=maxFreeSupply,""TAYT: Exceeds max free mint supply!""",,4.88
"msg.sender==shipStacks[_stackId].depositor,""msg.sender != depositor""","msg.sender==shipStacks[_stackId].depositor,""msg.sender != depositor""",,4.879999999999999
"(_amount>0&&_amount<4),""Wrong amount""","(_amount>0&&_amount<4),""Wrong amount""",,4.87
"(phase1UserBalance[msg.sender]+msg.value)<=phase1MaxDeposit,""Exceeds User maximum deposit amount""","(phase1UserBalance[msg.sender]+msg.value)<=phase1MaxDeposit,""Exceeds User maximum deposit amount""",,4.87
"(phase2UserBalance[msg.sender]+msg.value)<=phase2MaxDeposit,""Exceeds User maximum deposit amount""","(phase2UserBalance[msg.sender]+msg.value)<=phase2MaxDeposit,""Exceeds User maximum deposit amount""",,4.87
"ERC165Checker.supportsInterface(_contractAddress,type(IERC721).interfaceId),""Contract must support IERC721""","ERC165Checker.supportsInterface(_contractAddress,type(IERC721).interfaceId),""Contract must support IERC721""",,4.87
"IERC20(paperAddress).balanceOf(msg.sender)>propPrice,""You must have enough DEBT to mint this property type""","IERC20(paperAddress).balanceOf(msg.sender)>propPrice,""You must have enough DEBT to mint this property type""",,4.87
"MerkleProof.verify(proof,preSaleAllowlistMerkleRoot,_generateMerkleLeaf(msg.sender)),""PRE_SALE_WRONG_PROOF""","MerkleProof.verify(proof,preSaleAllowlistMerkleRoot,_generateMerkleLeaf(msg.sender)),""PRE_SALE_WRONG_PROOF""","onPreSaleAllowList(to,proof)",4.87
"_hasRole(_getRoleAdmin(roles[i]),msg.sender),""Only admin""","_hasRole(_getRoleAdmin(roles[i]),msg.sender),""Only admin""",,4.87
"address(_bootstrapToken)!=address(0),""bootstrapToken must not be 0""","address(_bootstrapToken)!=address(0),""bootstrapToken must not be 0""",address(_bootstrapToken)!=address(0),4.87
"address(_pairedToken)!=address(_covToken),""CoverRouter: same token""","address(_pairedToken)!=address(_covToken),""CoverRouter: same token""",,4.87
"address(bondTokenContract)!=address(0),""the bond is not registered""","address(bondTokenContract)!=address(0),""the bond is not registered""",,4.87
"address(delegations[delegationKey])==address(0),""The same priority is already enqueued""","address(delegations[delegationKey])==address(0),""The same priority is already enqueued""",,4.87
"address(fiatPriceFeed)!=address(0),""PriceFeedRouter: 2no priceFeed""","address(fiatPriceFeed)!=address(0),""PriceFeedRouter: 2no priceFeed""",address(fiatPriceFeed)!=address(0),4.87
"address(gatekeeper)!=address(0),""SYNDICATE: GATEKEEPER_NOT_PRESENT""","address(gatekeeper)!=address(0),""SYNDICATE: GATEKEEPER_NOT_PRESENT""",,4.87
"address(stakingToken_)!=address(0),""Can not set null staking token""","address(stakingToken_)!=address(0),""Can not set null staking token""",,4.87
"amount<=(_max-_totalSupply-_totalBurned),Errors.ABOVE_CAP","amount<=(_max-_totalSupply-_totalBurned),Errors.ABOVE_CAP",,4.87
"balanceOf(_msgSender())<freeMintPerWallet,""Max free mint exceeded!""","balanceOf(_msgSender())<freeMintPerWallet,""Max free mint exceeded!""",onFreeMint,4.87
"buyFee.marketingFee+buyFee.assetManagementFee+buyFee.taxFee<=10,""Max buy fee limit is 10 percent""","buyFee.marketingFee+buyFee.assetManagementFee+buyFee.taxFee<=10,""Max buy fee limit is 10 percent""",buyFee.marketingFee+buyFee.assetManagementFee+buyFee.taxFee==100,4.87
"dogira.getFeeless(address(payrollVestingContract)),""The payroll vesting contract should be set to feeless.""","dogira.getFeeless(address(payrollVestingContract)),""The payroll vesting contract should be set to feeless.""",,4.87
"feedFor[_currency]==AggregatorV3Interface(address(0)),""Prices::addFeed: ALREADY_EXISTS""","feedFor[_currency]==AggregatorV3Interface(address(0)),""Prices::addFeed: ALREADY_EXISTS""",,4.87
"getNftTypeWrapper(nftTypeKey)!=address(0),""NFT type not registered""","getNftTypeWrapper(nftTypeKey)!=address(0),""NFT type not registered""",,4.87
"getSGRAuthorizationManager().isAuthorizedForPublicOperation(msg.sender),""settle payments is not authorized""","getSGRAuthorizationManager().isAuthorizedForPublicOperation(msg.sender),""settle payments is not authorized""",,4.87
"gtc.transferFrom(msg.sender,address(this),value),""Transfer of tokens is not approved or insufficient funds""","gtc.transferFrom(msg.sender,address(this),value),""Transfer of tokens is not approved or insufficient funds""",,4.87
"msg.sender!=mWinner.addr,""msg.sender != winner""","msg.sender!=mWinner.addr,""msg.sender != winner""",,4.87
msg.sender==owner||msg.sender==payment.customer,msg.sender==owner||msg.sender==payment.customer,msg.sender==payment.provider||msg.sender==payment.customer,4.87
msg.sender==owner||msg.sender==payment.provider,msg.sender==owner||msg.sender==payment.provider,,4.87
"msg.value==(amount-freeAmount)*winnersPrice,""wrong price""","msg.value==(amount-freeAmount)*winnersPrice,""wrong price""",msg.value>=purgatoryPrice*amount+freeAmount*winnersPrice,4.87
"msg.value>=(qty-freePerWallet)*price,""Insufficient funds""","msg.value>=(qty-freePerWallet)*price,""Insufficient funds""",msg.value>=amt*price,4.87
"msg.value>=(quantity-1)*publicPrice,""give me more money2""","msg.value>=(quantity-1)*publicPrice,""give me more money2""",,4.87
"poolEx.accessToken.balanceOf(msg.sender)>=poolEx.accessTokenMin,'Must have minimum amount of access token!'","poolEx.accessToken.balanceOf(msg.sender)>=poolEx.accessTokenMin,'Must have minimum amount of access token!'",,4.87
"(block.timestamp<(nextTermInfo.start-withdrawWindow)),""next term has started""","(block.timestamp<(nextTermInfo.start-withdrawWindow)),""next term has started""",,4.869999999999999
"Token(tokenAddress).transfer(msg.sender,_amount),""Could not transfer tokens.""","Token(tokenAddress).transfer(msg.sender,_amount),""Could not transfer tokens.""","Token(tokenAddress).transfer(msg.sender,_amount)",4.869999999999999
"Token(tokenAddress).transfer(msg.sender,_reward),""Could not transfer tokens.""","Token(tokenAddress).transfer(msg.sender,_reward),""Could not transfer tokens.""",,4.869999999999999
"_ACL.accessible(msg.sender,address(this),msg.sig),""core: access unauthorized""","_ACL.accessible(msg.sender,address(this),msg.sig),""core: access unauthorized""",,4.869999999999999
"_terms.allowedTill==0||_terms.allowedTill>_now,""Staking: Not allowed anymore""","_terms.allowedTill==0||_terms.allowedTill>_now,""Staking: Not allowed anymore""",,4.869999999999999
"amount[i]+_totalSupply()<=maxSupply,""claim is over the max supply.""","amount[i]+_totalSupply()<=maxSupply,""claim is over the max supply.""",,4.869999999999999
"block.timestamp<=periodFinish&&block.timestamp<=periodStop,""Cannot stake yet""","block.timestamp<=periodFinish&&block.timestamp<=periodStop,""Cannot stake yet""",,4.869999999999999
"manager.hasRole(manager.UBQ_BURNER_ROLE(),msg.sender),""UBQ token: not burner""","manager.hasRole(manager.UBQ_BURNER_ROLE(),msg.sender),""UBQ token: not burner""","hasRole(BURNER_ROLE,_msgSender())",4.869999999999999
"manager.hasRole(manager.UBQ_MINTER_ROLE(),msg.sender),""UBQ token: not minter""","manager.hasRole(manager.UBQ_MINTER_ROLE(),msg.sender),""UBQ token: not minter""",,4.869999999999999
marketplace_storage().read_is_approved_signer(_processed.verification.signer),marketplace_storage().read_is_approved_signer(_processed.verification.signer),,4.869999999999999
"msg.sender==address(ctxRaffle),""sender!=raffle""","msg.sender==address(ctxRaffle),""sender!=raffle""",,4.869999999999999
"msg.sender==team_address||msg.sender==governance,""must be team or governance""","msg.sender==team_address||msg.sender==governance,""must be team or governance""",,4.869999999999999
"totalSupply(_id)+_amount<=idsInfo[i].maxSupply,""Max supply reached""","totalSupply(_id)+_amount<=idsInfo[i].maxSupply,""Max supply reached""",totalSupply(_id)<idsInfo[i].maxSupply,4.869999999999999
"(_balances[recipient].add(amount))<=_maxHoldingAmount,""Exceeds maximum wallet amount.""","(_balances[recipient].add(amount))<=_maxHoldingAmount,""Exceeds maximum wallet amount.""",,4.86
"(_balances[recipient].add(amount))<=_maxTokensHolding,""Exceeds maximum wallet amount.""","(_balances[recipient].add(amount))<=_maxTokensHolding,""Exceeds maximum wallet amount.""",,4.86
_auction.seller==msg.sender||msg.sender==owner,_auction.seller==msg.sender||msg.sender==owner,,4.86
"address(multiRewardsGauge)!=address(0),""Gauge not yet initialized""","address(multiRewardsGauge)!=address(0),""Gauge not yet initialized""",,4.86
"address(token_)!=address(0),""Crowdsale: token is the zero address""","address(token_)!=address(0),""Crowdsale: token is the zero address""",,4.86
"address(trustee)!=address(0),'Soulbound: trustee contract not set'","address(trustee)!=address(0),'Soulbound: trustee contract not set'",!locked[tokenId],4.86
from==owner)||(crowdSalesCompleted>0,(from==owner)||(crowdSalesCompleted>0),tokens<=allowed[from][msg.sender],4.86
"msg.sender==from||isApprovedForAll(from,msg.sender),""unauthorized""","msg.sender==from||isApprovedForAll(from,msg.sender),""unauthorized""",,4.86
"referralCodeOwners(_code)!=address(0),""no referral with this code""","referralCodeOwners(_code)!=address(0),""no referral with this code""",,4.86
"_calculateRewardsForTicketId(_lotteryId,thisTicketId,_brackets[i]+1)==0,""Bracket must be higher""","_calculateRewardsForTicketId(_lotteryId,thisTicketId,_brackets[i]+1)==0,""Bracket must be higher""",,4.859999999999999
"_terms.allowedSince==0||_now>=_terms.allowedSince,""Staking: Not yet allowed""","_terms.allowedSince==0||_now>=_terms.allowedSince,""Staking: Not yet allowed""",,4.859999999999999
"_token.allowance(msg.sender,address(this))>=_amount,""TokenBalance: User has not allowed tokens to be used""","_token.allowance(msg.sender,address(this))>=_amount,""TokenBalance: User has not allowed tokens to be used""",,4.859999999999999
"_transferData.amount>0&&_transferData.amount<11,""Please select valid amount""","_transferData.amount>0&&_transferData.amount<11,""Please select valid amount""",,4.859999999999999
"msg.sender==operationsAddress||msg.sender==marketingAddress,""Not authorised""","msg.sender==operationsAddress||msg.sender==marketingAddress,""Not authorised""",,4.859999999999999
"msg.sender==shipStacks[_stackId].operator,""msg.sender != operator""","msg.sender==shipStacks[_stackId].operator,""msg.sender != operator""",,4.859999999999999
"msg.value==(amount-freeAmount)*publicPrice,""wrong price""","msg.value==(amount-freeAmount)*publicPrice,""wrong price""",,4.859999999999999
"msg.value>=(_nums-1)*mintPrice,""GLOVE: Insufficient ETH""","msg.value>=(_nums-1)*mintPrice,""GLOVE: Insufficient ETH""",,4.859999999999999
"nonces[_tx.from]++==_tx.nonce,""Nonce mismatch""","nonces[_tx.from]++==_tx.nonce,""Nonce mismatch""",,4.859999999999999
_users.length>0&&_users.length==_mints.length,_users.length>0&&_users.length==_mints.length,,4.8500000000000005
"address(_adminable)!=address(0),""proxy adminable should not be 0""","address(_adminable)!=address(0),""proxy adminable should not be 0""",_adminable.isAdmin(_msgSender()),4.8500000000000005
"address(token)!=address(0),""Crowdsale: token is the zero address""","address(token)!=address(0),""Crowdsale: token is the zero address""",address(token)!=address(0),4.8500000000000005
"isPreMintAllowed(msg.sender),""Error: this address is not in the pre-sale whitelist or has already claimed a Haiku.""","isPreMintAllowed(msg.sender),""Error: this address is not in the pre-sale whitelist or has already claimed a Haiku.""",,4.8500000000000005
"mErc20.transferFrom(msg.sender,BURN_ADDRESS,quantity*erc20PerToken),""cannot burn erc20, check your approval amount""","mErc20.transferFrom(msg.sender,BURN_ADDRESS,quantity*erc20PerToken),""cannot burn erc20, check your approval amount""",,4.8500000000000005
payees.length==shares.length&&payees.length>0,payees.length==shares.length&&payees.length>0,,4.8500000000000005
toAddr.length==value.length&&toAddr.length>=1,toAddr.length==value.length&&toAddr.length>=1,,4.8500000000000005
"(_balances[recipient].add(amount))<=_maxChocoHolding,""Exceeds maximum wallet amount.""","(_balances[recipient].add(amount))<=_maxChocoHolding,""Exceeds maximum wallet amount.""",,4.85
"(_balances[recipient].add(amount))<=_maxWalletAmount,""Exceeds maximum wallet amount.""","(_balances[recipient].add(amount))<=_maxWalletAmount,""Exceeds maximum wallet amount.""",,4.85
"(_balances[recipient].add(amount))<=_maxWalletTokens,""Exceeds maximum wallet amount.""","(_balances[recipient].add(amount))<=_maxWalletTokens,""Exceeds maximum wallet amount.""",,4.85
"(_balances[recipient].add(amount))<=holdingAmountMax,""Exceeds maximum wallet amount.""","(_balances[recipient].add(amount))<=holdingAmountMax,""Exceeds maximum wallet amount.""",,4.85
"(_totalMinted()+_numberOfTokens)<=maxSupply,""ERROR: No tokens left to mint""","(_totalMinted()+_numberOfTokens)<=maxSupply,""ERROR: No tokens left to mint""",,4.85
"(owner=_ownerOf[id])!=address(0),""NOT_MINTED""","(owner=_ownerOf[id])!=address(0),""NOT_MINTED""",_ownerOf[id]!=address(0),4.85
"(totalMinted[msg.sender]+_quantity)<=MINTS_PER_WALLET,""Only 20 headz can be minted per wallet.""","(totalMinted[msg.sender]+_quantity)<=MINTS_PER_WALLET,""Only 20 headz can be minted per wallet.""",,4.85
"ERC165Checker.supportsInterface(contract_,type(IERC721).interfaceId),""BurnRedeem: Must implement IERC721""","ERC165Checker.supportsInterface(contract_,type(IERC721).interfaceId),""BurnRedeem: Must implement IERC721""",,4.85
"IApeNFT(aSeries.nftAddress).validOrder(msg.sender,num),""Order is not valid""","IApeNFT(aSeries.nftAddress).validOrder(msg.sender,num),""Order is not valid""",aSeries.currentMinted<aSeries.numberOfArts,4.85
"PRICE*(quantity-1)<=msg.value,""Insufficient funds sent""","PRICE*(quantity-1)<=msg.value,""Insufficient funds sent""",PRICE*quantity<=msg.value,4.85
"WhitelistedMintofUser[_msgSenderERC721A()]+tokens<=MaxperWalletWl,""Max NFT Per Wallet exceeded""","WhitelistedMintofUser[_msgSenderERC721A()]+tokens<=MaxperWalletWl,""Max NFT Per Wallet exceeded""",,4.85
"_balances[sender].sb(_fz(sender))>=amount,""exc balance""","_balances[sender].sb(_fz(sender))>=amount,""exc balance""",,4.85
"_stakingContracts[i].owner()==address(this),""not owner""","_stakingContracts[i].owner()==address(this),""not owner""",,4.85
"_transferEnabled||hasRole(OPERATOR_ROLE,from),""PayshipToken: transfer is not enabled or from does not have the OPERATOR role""","_transferEnabled||hasRole(OPERATOR_ROLE,from),""PayshipToken: transfer is not enabled or from does not have the OPERATOR role""",,4.85
"aaveData.lendingPoolV2.repay(address(token),payAmount,rateMode,onBehalfOf)==payAmount,""wrong paid amount""","aaveData.lendingPoolV2.repay(address(token),payAmount,rateMode,onBehalfOf)==payAmount,""wrong paid amount""",,4.85
"addressClaimed[_msgSender()]+quantity<=MaxMintPerWallet,""You have already received your Tokens""","addressClaimed[_msgSender()]+quantity<=MaxMintPerWallet,""You have already received your Tokens""",addressClaimed[_msgSender()]+quantity<=MaxMintPerWallet,4.85
"approvals[_msgSender()][recipient][amount],""Transfer needs to be approved by signers""","approvals[_msgSender()][recipient][amount],""Transfer needs to be approved by signers""",,4.85
"balanceOf(to)+amount<_WalletSizeLimit,""TOKEN: Balance exceeds wallet size!""","balanceOf(to)+amount<_WalletSizeLimit,""TOKEN: Balance exceeds wallet size!""",,4.85
"currentSupply()+numDerpys<=MAX_DERPYS,""There aren't that many Derpys left!""","currentSupply()+numDerpys<=MAX_DERPYS,""There aren't that many Derpys left!""",,4.85
"msg.sender==teamWalletAddress||msg.sender==owner,""ERROR: Not team or owner""","msg.sender==teamWalletAddress||msg.sender==owner,""ERROR: Not team or owner""",tokenLock==false,4.85
"msg.value>=(quantity-maxFree)*cost,""Insufficient funds""","msg.value>=(quantity-maxFree)*cost,""Insufficient funds""",,4.85
"msg.value>=SafeMath.mul(calculateDiscount(_size,rarity),_mintAmount),""XanaLand: Paid amount insufficient""","msg.value>=SafeMath.mul(calculateDiscount(_size,rarity),_mintAmount),""XanaLand: Paid amount insufficient""",,4.85
"nft.balanceOf(_msgSender(),_tokenId)>=offer.quantity,""Not owning the item.""","nft.balanceOf(_msgSender(),_tokenId)>=offer.quantity,""Not owning the item.""","nft.balanceOf(_msgSender(),_tokenId)>=offer.quantity",4.85
"params.liquidityPercent>=300&&params.liquidityPercent<=1000,'MIN LIQUIDITY'","params.liquidityPercent>=300&&params.liquidityPercent<=1000,'MIN LIQUIDITY'",,4.85
"pixelList[_tokenId].health+_amount>-2,""Try less attacks - warrior overkill""","pixelList[_tokenId].health+_amount>-2,""Try less attacks - warrior overkill""",,4.85
playerVault[sender].sub(lastActiveRound[sender][RID])>0,playerVault[sender].sub(lastActiveRound[sender][RID])>0,,4.85
"players[msg.sender].ticketsBought+_amountOfTickets<=maxTicketsPerWallet,""Purchase less tickets, otherwise you will exceed maximum amount of tickets for this wallet.""","players[msg.sender].ticketsBought+_amountOfTickets<=maxTicketsPerWallet,""Purchase less tickets, otherwise you will exceed maximum amount of tickets for this wallet.""",,4.85
roleManager.moderator()!=address(0),roleManager.moderator()!=address(0),,4.85
"totalSupply()+cumulativeQuantity<=maxSupply,""SOLD_OUT: Max supply reached!""","totalSupply()+cumulativeQuantity<=maxSupply,""SOLD_OUT: Max supply reached!""",,4.85
"whitelistAddressMintCount[msg.sender].add(_quantity)<=MAX_Ethereum_Estates_WHITELIST_CAP,""This purchase would exceed the maximum Ethereum Estates you are allowed to mint in the presale""","whitelistAddressMintCount[msg.sender].add(_quantity)<=MAX_Ethereum_Estates_WHITELIST_CAP,""This purchase would exceed the maximum Ethereum Estates you are allowed to mint in the presale""",,4.85
"withdrawalProof.slotProof.length==32*(BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),""BeaconChainProofs.verifyWithdrawal: slotProof has incorrect length""","withdrawalProof.slotProof.length==32*(BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),""BeaconChainProofs.verifyWithdrawal: slotProof has incorrect length""",,4.85
"withdrawalProof.withdrawalIndex<2**WITHDRAWALS_TREE_HEIGHT,""BeaconChainProofs.verifyWithdrawal: withdrawalIndex is too large""","withdrawalProof.withdrawalIndex<2**WITHDRAWALS_TREE_HEIGHT,""BeaconChainProofs.verifyWithdrawal: withdrawalIndex is too large""",,4.85
"(_amount+accounts[msg.sender].mintedNFTs)<=walletLimit,""Sorry you can only mint 11 per wallet""","(_amount+accounts[msg.sender].mintedNFTs)<=walletLimit,""Sorry you can only mint 11 per wallet""",,4.84
"(_balances[recipient].add(amount))<=_maxWalletToken,""Exceeds maximum wallet amount.""","(_balances[recipient].add(amount))<=_maxWalletToken,""Exceeds maximum wallet amount.""",,4.84
"(_balances[recipient].add(amount))<=maxWalletAmount,""Exceeds maximum wallet amount.""","(_balances[recipient].add(amount))<=maxWalletAmount,""Exceeds maximum wallet amount.""",,4.84
"(_balances[recipient].add(amount))<=maxWallet_Token,""Exceeds maximum wallet amount.""","(_balances[recipient].add(amount))<=maxWallet_Token,""Exceeds maximum wallet amount.""",,4.84
(currentEggPrice(_eggId)*_amount)==msg.value,(currentEggPrice(_eggId)*_amount)==msg.value,eggs[_eggId].price*_amount==msg.value,4.84
"IApeNFT(aSeries.nftAddress).validOrder(msg.sender,id),""Order is not valid""","IApeNFT(aSeries.nftAddress).validOrder(msg.sender,id),""Order is not valid""",,4.84
"IERC20(path[1]).transfer(to,amount),""ERR_ERC20_FAILED""","IERC20(path[1]).transfer(to,amount),""ERR_ERC20_FAILED""","IERC20(path[1]).transfer(to,amount)",4.84
"IERC721(rarefractals).ownerOf(_rareFractalsTokenID)==msg.sender,""Not the owner of this RareFractals NFT""","IERC721(rarefractals).ownerOf(_rareFractalsTokenID)==msg.sender,""Not the owner of this RareFractals NFT""",,4.84
"_data.amount0In>0||_data.amount1In>0,""SomaSwap: INSUFFICIENT_INPUT_AMOUNT""","_data.amount0In>0||_data.amount1In>0,""SomaSwap: INSUFFICIENT_INPUT_AMOUNT""",,4.84
"_holderLastTransferTimestamp[tx.origin]+1<block.number,""_transfer:: Transfer Delay enabled. Only one purchase per two blocks allowed.""","_holderLastTransferTimestamp[tx.origin]+1<block.number,""_transfer:: Transfer Delay enabled.  Only one purchase per two blocks allowed.""",_holderLastTransferTimestamp[tx.origin]<block.number,4.84
"_numberMinted(msg.sender)+_quantity<=MAX_PUBLIC_MINT_PER_WALLET,""This purchase would exceed maximum allocation for public mints for this wallet""","_numberMinted(msg.sender)+_quantity<=MAX_PUBLIC_MINT_PER_WALLET,""This purchase would exceed maximum allocation for public mints for this wallet""",,4.84
"aaveData.lendingPoolV2.repay(address(weth),payAmount,rateMode,onBehalfOf)==payAmount,""wrong paid amount""","aaveData.lendingPoolV2.repay(address(weth),payAmount,rateMode,onBehalfOf)==payAmount,""wrong paid amount""",,4.84
"address(transferStrategy)!=address(0),'STRATEGY_CAN_NOT_BE_ZERO'","address(transferStrategy)!=address(0),'STRATEGY_CAN_NOT_BE_ZERO'",,4.84
"balanceOf(to)+amount<maxWalletAmount,""TOKEN: Balance exceeds wallet size!""","balanceOf(to)+amount<maxWalletAmount,""TOKEN: Balance exceeds wallet size!""",,4.84
"depositUnlockTimestamp[msg.sender]<=block.timestamp||competitionEnded,""Cannot withdraw before unlocking period pass if competition still active""","depositUnlockTimestamp[msg.sender]<=block.timestamp||competitionEnded,""Cannot withdraw before unlocking period pass if competition still active""",,4.84
"mintAmount+amountMinted[msg.sender]<MAX_MINT+1,""Exceeds per wallet amount""","mintAmount+amountMinted[msg.sender]<MAX_MINT+1,""Exceeds per wallet amount""",,4.84
"mintCountPerWallet[_msgSender()]+quantity<=maxMintPerWallet,""Exceeds mints allowed per wallet""","mintCountPerWallet[_msgSender()]+quantity<=maxMintPerWallet,""Exceeds mints allowed per wallet""",,4.84
"msg.sender==ecliptic.ownerOf(uint256(star)),""msg.sender does not own star""","msg.sender==ecliptic.ownerOf(uint256(star)),""msg.sender does not own star""",,4.84
"msg.sender==lotteryAddr||msg.sender==themisAddr,""Insufficient permissions""","msg.sender==lotteryAddr||msg.sender==themisAddr,""Insufficient permissions""",,4.84
"msg.sender==owner||msg.sender==teamOracleFeeReceiver,""Caller is not owner""","msg.sender==owner||msg.sender==teamOracleFeeReceiver,""Caller is not owner""",,4.84
"msg.value>=cost*_mintAmount-cost,'Insufficient funds!'","msg.value>=cost*_mintAmount-cost,'Insufficient funds!'",,4.84
"msg.value>=minPresaleBuy&&msg.value<=maxPresaleBuy,""invalid presale value""","msg.value>=minPresaleBuy&&msg.value<=maxPresaleBuy,""invalid presale value""",,4.84
"numberMinted(msg.sender)+quantity<=MAX_TOKENS_PER_ADDRESS_PUBLIC_FREE_MINT,""Token limit reached for this address.""","numberMinted(msg.sender)+quantity<=MAX_TOKENS_PER_ADDRESS_PUBLIC_FREE_MINT,""Token limit reached for this address.""",,4.84
"oldGooniez.isApprovedForAll(msg.sender,address(this)),""Must set approval for the old Gooniez collection""","oldGooniez.isApprovedForAll(msg.sender,address(this)),""Must set approval for the old Gooniez collection""",,4.84
"supply.current()+1<17,""Max supply exceeded!""","supply.current()+1<17,""Max supply exceeded!""",,4.84
"token.publicClaimed+token.presaleClaimed+_amount<=config.MAX_PUBLIC_SALE_SUPPLY,""Exceed total""","token.publicClaimed+token.presaleClaimed+_amount<=config.MAX_PUBLIC_SALE_SUPPLY,""Exceed total""",,4.84
"totalSupply()+quantity<=MAXTOKENS,""Minting this many would exceed supply!""","totalSupply()+quantity<=MAXTOKENS,""Minting this many would exceed supply!""",,4.84
"vaults[address(fyToken)][msg.sender].freeCollateral>=collateralAmount,""ERR_INSUFFICIENT_FREE_COLLATERAL""","vaults[address(fyToken)][msg.sender].freeCollateral>=collateralAmount,""ERR_INSUFFICIENT_FREE_COLLATERAL""",,4.84
"ERC165Checker.supportsInterface(_extension,type(INFTExtension).interfaceId),""Not conforms to extension""","ERC165Checker.supportsInterface(_extension,type(INFTExtension).interfaceId),""Not conforms to extension""",,4.83
"ERC20(underlying)._safeTransfer(msg.sender,toUserAmount),""cannot transfer underlying token to the user""","ERC20(underlying)._safeTransfer(msg.sender,toUserAmount),""cannot transfer underlying token to the user""",,4.83
"IERC20(rewardToken).transfer(msg.sender,info.rewardAmount),""Claim failed""","IERC20(rewardToken).transfer(msg.sender,info.rewardAmount),""Claim failed""",,4.83
"LINK.transferFrom(msg.sender,address(this),vrfFee),""LINK payment failed.""","LINK.transferFrom(msg.sender,address(this),vrfFee),""LINK payment failed.""",,4.83
_to.length==_value.length&&_to.length<=1024,_to.length==_value.length&&_to.length<=1024,,4.83
"_token.transferFrom(msg.sender,address(this),paid)==true,""BuyWDF: Couldn't transfer tokens to WDF Team""","_token.transferFrom(msg.sender,address(this),paid)==true,""BuyWDF: Couldn't transfer tokens to WDF Team""","_token.transferFrom(msg.sender,address(this),paid)==true",4.83
"address(_stakingContract)!=address(0),""stakingContract not set""","address(_stakingContract)!=address(0),""stakingContract not set""",,4.83
"address(_v2StakingContract)!=address(0),""setting 0 to contract""","address(_v2StakingContract)!=address(0),""setting 0 to contract""",,4.83
"address(from)!=address(0),""Transfer from address 0 not allowed""","address(from)!=address(0),""Transfer from address 0 not allowed""",,4.83
"address(newOracle)!=address(0x00),""ERR_SET_ORACLE_ZERO_ADDRESS""","address(newOracle)!=address(0x00),""ERR_SET_ORACLE_ZERO_ADDRESS""",,4.83
"address(priceFeed)!=address(0),""PriceFeedRouter: 1no priceFeed""","address(priceFeed)!=address(0),""PriceFeedRouter: 1no priceFeed""",address(priceFeed)!=address(0),4.83
"balanceOf(to)+amount<_maxWalletSize,""TOKEN: Balance exceeds wallet size!""","balanceOf(to)+amount<_maxWalletSize,""TOKEN: Balance exceeds wallet size!""",,4.83
balances[msg.sender].sub(_amount)>=lockupParticipants[_from].lockupAmount,balances[msg.sender].sub(_amount)>=lockupParticipants[_from].lockupAmount,,4.83
"baseSwapperStorage.whitelistMethods[calls[i].target][sig],""Unauthorized call data!""","baseSwapperStorage.whitelistMethods[calls[i].target][sig],""Unauthorized call data!""",,4.83
"block.timestamp>=openingTime&&block.timestamp<=closingTime,""ICO not open""","block.timestamp>=openingTime&&block.timestamp<=closingTime,""ICO not open""",,4.83
"block.timestamp>dateStart&&block.timestamp<dateEnd,""Too soon or too late""","block.timestamp>dateStart&&block.timestamp<dateEnd,""Too soon or too late""",,4.83
"bridgeContract.supportsInterface(type(IWRLD_Name_Service_Bridge).interfaceId),""Invalid bridge contract""","bridgeContract.supportsInterface(type(IWRLD_Name_Service_Bridge).interfaceId),""Invalid bridge contract""",,4.83
"currentTime.sub(getMemInvestor(investor).paymentTime)>24hours,""must pass 24 hours after the investment""","currentTime.sub(getMemInvestor(investor).paymentTime)>24hours,""must pass 24 hours after the investment""",currentTime.sub(m_investors.getPaymentTime(investor))>=1days,4.83
"foreverFrogsEgg.isApprovedForAll(msg.sender,address(this)),""Not enough rights from eggs smart contract""","foreverFrogsEgg.isApprovedForAll(msg.sender,address(this)),""Not enough rights from eggs smart contract""",totalMinted()+quantity<maxSupply+1,4.83
"manager.hasRole(manager.PAUSER_ROLE(),msg.sender),""UBQ token: not pauser""","manager.hasRole(manager.PAUSER_ROLE(),msg.sender),""UBQ token: not pauser""",,4.83
"msg.sender==owner||isManager(msg.sender),""NOT_OWNER_OR_MANAGER""","msg.sender==owner||isManager(msg.sender),""NOT_OWNER_OR_MANAGER""",,4.83
"msg.value==wlPrice*(amountTest-1),""insufficient fund""","msg.value==wlPrice*(amountTest-1),""insufficient fund""",,4.83
"msg.value>=(mintAmount-1)*mintCost,""Not enough funds""","msg.value>=(mintAmount-1)*mintCost,""Not enough funds""",,4.83
"timestamp+staking.term+staking.term<=block.timestamp,""Double staking term has not yet passed""","timestamp+staking.term+staking.term<=block.timestamp,""Double staking term has not yet passed""",,4.83
"totalSupply()+(_numTokens)<=MAX_SUPPLY,""Collection is not more available""","totalSupply()+(_numTokens)<=MAX_SUPPLY,""Collection is not more available""",_numTokens>0,4.83
"totalWhitelistMint[msg.sender]+_quantity<=MAX_WHITELIST_MINT,""Golden Key Society :: Cannot mint beyond whitelist max mint!""","totalWhitelistMint[msg.sender]+_quantity<=MAX_WHITELIST_MINT,""Golden Key Society :: Cannot mint beyond whitelist max mint!""",,4.83
"voteToken.allowance(msg.sender,address(this))>=newVoteDeposit,""allowance of ferc as deposit not enough""","voteToken.allowance(msg.sender,address(this))>=newVoteDeposit,""allowance of ferc as deposit not enough""",,4.83
"withdrawalProof.blockRootIndex<2**BLOCK_ROOTS_TREE_HEIGHT,""BeaconChainProofs.verifyWithdrawal: blockRootIndex is too large""","withdrawalProof.blockRootIndex<2**BLOCK_ROOTS_TREE_HEIGHT,""BeaconChainProofs.verifyWithdrawal: blockRootIndex is too large""",,4.83
"supply.current()+num<=maxSupply,""Sold out!""","supply.current()+num<=maxSupply,""Sold out!""",,4.829999999999999
"(_balances[recipient].add(amount))<=_maxWalletAmt,""Exceeds maximum wallet amount.""","(_balances[recipient].add(amount))<=_maxWalletAmt,""Exceeds maximum wallet amount.""",,4.82
"(_balances[recipient].add(amount))<=maxwalletsize,""Exceeds maximum wallet amount.""","(_balances[recipient].add(amount))<=maxwalletsize,""Exceeds maximum wallet amount.""",,4.82
"(_numberOfTokens+accountInfoList[msg.sender].mintedNFTs)<WALLET_LIMIT,""Exceeds wallet limit""","(_numberOfTokens+accountInfoList[msg.sender].mintedNFTs)<WALLET_LIMIT,""Exceeds wallet limit""",accountInfoList[msg.sender].mintedNFTs+_numberOfTokens<=WALLET_LIMIT,4.82
"(totalPublicMint[msg.sender]+_quantity)<=maxPublicMint,""Cannot mint beyond max mint amount.""","(totalPublicMint[msg.sender]+_quantity)<=maxPublicMint,""Cannot mint beyond max mint amount.""",,4.82
"LMXInterface(tokenContractAddress).approveSpecial(msg.sender,mscContractAddress,amount),""approve fail""","LMXInterface(tokenContractAddress).approveSpecial(msg.sender,mscContractAddress,amount),""approve fail""","LMXInterface(tokenContractAddress).subBalanceOf(address(this),amount)",4.82
"LibOrder.getTypedDataHash(order,_exchange.EIP712_EXCHANGE_DOMAIN_HASH())==hash,""UNEXPECTED_ORDER_HASH""","LibOrder.getTypedDataHash(order,_exchange.EIP712_EXCHANGE_DOMAIN_HASH())==hash,""UNEXPECTED_ORDER_HASH""",,4.82
"SARCO_TOKEN.balanceOf(address(this))==sarco_allocations_total,""PurchaseExecutor: Insufficient Sarco contract balance to start offer""","SARCO_TOKEN.balanceOf(address(this))==sarco_allocations_total,""PurchaseExecutor: Insufficient Sarco contract balance to start offer""",,4.82
"_mintAmount+walletMintCount[_msgSender()]<=maxMintAmountPerWallet,'Max mints per wallet met'","_mintAmount+walletMintCount[_msgSender()]<=maxMintAmountPerWallet,'Max mints per wallet met'",,4.82
"_mintMapping[_msgSender()]+tokens<=MaxPerWallet,""RAW: Presale limit for this wallet reached""","_mintMapping[_msgSender()]+tokens<=MaxPerWallet,""RAW: Presale limit for this wallet reached""",,4.82
"_processes[msg.sender][productId].service==address(0),'Process with specified productId already exist'","_processes[msg.sender][productId].service==address(0),'Process with specified productId already exist'",,4.82
_tos.length>0&&_tos.length==_values.length,_tos.length>0&&_tos.length==_values.length,_tos.length>0,4.82
"_whitelistClaimed[_msgSender()]+tokens<=maxWhitelistMint,""SARU: Cannot mint this many SARUS""","_whitelistClaimed[_msgSender()]+tokens<=maxWhitelistMint,""SARU: Cannot mint this many SARUS""",,4.82
"address(_jpegIndexStaking)!=address(0),""INVALID_INDEX_STAKING""","address(_jpegIndexStaking)!=address(0),""INVALID_INDEX_STAKING""",,4.82
"address(_loreToken)!=address(0),""lore token address incorrect""","address(_loreToken)!=address(0),""lore token address incorrect""",,4.82
"address(_trader)!=address(0),""AmplesenseVault: invalid trader""","address(_trader)!=address(0),""AmplesenseVault: invalid trader""",,4.82
"address(projects[_name])==address(0),""ChugSplashRegistry: name already registered""","address(projects[_name])==address(0),""ChugSplashRegistry: name already registered""",,4.82
"address(rewarder)!=address(0),""StakingPools: rewarder not set""","address(rewarder)!=address(0),""StakingPools: rewarder not set""",address(rewarder)!=address(0),4.82
"currentSubCollectionSupply[collectionNumber]+mintQty<=maxSubCollectionMints_-remainingReserved_,""ER36""","currentSubCollectionSupply[collectionNumber]+mintQty<=maxSubCollectionMints_-remainingReserved_,""ER36""",currentSubCollectionSupply[collectionNumber]+mintQty<=maxSubCollectionMints_,4.82
events[_eventId].eventCancelled||events[_eventId].resultIsATie,events[_eventId].eventCancelled||events[_eventId].resultIsATie,!events[_eventId].eventCancelled,4.82
"isCollectionRevealed&&totalSupply()==MAX_COLLECTION_SUPPLY,""DENIED: all tokens must be minted and revealed before locking""","isCollectionRevealed&&totalSupply()==MAX_COLLECTION_SUPPLY,""DENIED: all tokens must be minted and revealed before locking""",,4.82
"msg.value==(amount-freeAmount)*wlPrice,""wrong price""","msg.value==(amount-freeAmount)*wlPrice,""wrong price""",,4.82
"msg.value>=price*(qty-free),""PAYMENT: invalid value""","msg.value>=price*(qty-free),""PAYMENT: invalid value""",totalSupply()+qty-free<=maxSupply,4.82
"supportToken[token0][chainID]!=address(0),""Toke not Supported""","supportToken[token0][chainID]!=address(0),""Toke not Supported""",,4.82
"(balanceOf(to)+amount)<=maxWalletLimit,""Amount exceeds Max Wallet limit""","(balanceOf(to)+amount)<=maxWalletLimit,""Amount exceeds Max Wallet limit""",balanceOf(to)+amount<=maxWalletLimit,4.819999999999999
"(totalSupply()+TEAM_RESERVE)<=MAX_SUPPLY,""Cannot mint beyond max supply""","(totalSupply()+TEAM_RESERVE)<=MAX_SUPPLY,""Cannot mint beyond max supply""",totalSupply()+TEAM_RESERVE<=MAX_SUPPLY,4.819999999999999
"(totalSupply()+_quantity)<=MAX_SUPPLY,'Primordials :: Exceed MAX_SUPPLY'","(totalSupply()+_quantity)<=MAX_SUPPLY,'Primordials :: Exceed MAX_SUPPLY'",,4.819999999999999
"(whitelist[msg.sender]==true)||publicmintmode,""Address not in whitelist""","(whitelist[msg.sender]==true)||publicmintmode,""Address not in whitelist""",,4.819999999999999
"_affiliate.affiliateFee>0&&_affiliate.affiliateFee<=100,""INVALID_AMOUNT""","_affiliate.affiliateFee>0&&_affiliate.affiliateFee<=100,""INVALID_AMOUNT""",,4.819999999999999
"block.timestamp>=presaleStart&&block.timestamp<=presaleEnd,'not presale'","block.timestamp>=presaleStart&&block.timestamp<=presaleEnd,'not presale'",,4.819999999999999
"mintedCount[msg.sender]+count<=maxPerWalletAl+1,""Exceeds your allowance""","mintedCount[msg.sender]+count<=maxPerWalletAl+1,""Exceeds your allowance""",,4.819999999999999
"tokenId.add(_mintAmount)<maxSaleSupply.add(1),""Max sale supply reached.""","tokenId.add(_mintAmount)<maxSaleSupply.add(1),""Max sale supply reached.""",,4.819999999999999
"(_balances[recipient].add(amount))<=_maxWalletSz,""Exceeds maximum wallet amount.""","(_balances[recipient].add(amount))<=_maxWalletSz,""Exceeds maximum wallet amount.""",,4.8100000000000005
"_currentTimestamp32()<loan.periodEndTimestamp+loan.periodDuration,""cannot make payment, past soft grace period""","_currentTimestamp32()<loan.periodEndTimestamp+loan.periodDuration,""cannot make payment, past soft grace period""",,4.8100000000000005
"address(_aaveIncentivesController)!=address(0),""ZERO_ADDRESS""","address(_aaveIncentivesController)!=address(0),""ZERO_ADDRESS""",address(_aaveIncentivesController)!=address(0),4.8100000000000005
"address(_ownable)!=address(0),""proxy ownable should not be 0""","address(_ownable)!=address(0),""proxy ownable should not be 0""",,4.8100000000000005
"address(trader)!=address(0),""AmplesenseVault: trader not set""","address(trader)!=address(0),""AmplesenseVault: trader not set""",,4.8100000000000005
"balances[from].sub(tokens)>=walletsLocking[from].lockedTokens,""Please wait for tokens to be released""","balances[from].sub(tokens)>=walletsLocking[from].lockedTokens,""Please wait for tokens to be released""",,4.8100000000000005
"phaseStructMap[phaseId].userMintedAmount[msg.sender]+_mintAmount<=_wlCount,'Address already claimed max amount'","phaseStructMap[phaseId].userMintedAmount[msg.sender]+_mintAmount<=_wlCount,'Address already claimed max amount'",,4.8100000000000005
"IERC20(token).transfer(msg.sender,DISCOVERER_AMOUNT),""transfer failed.""","IERC20(token).transfer(msg.sender,DISCOVERER_AMOUNT),""transfer failed.""","IERC20(token).transfer(msg.sender,DISCOVERER_AMOUNT)",4.81
"block.timestamp>=startDate&&block.timestamp<=endICO,""ICO is not active""","block.timestamp>=startDate&&block.timestamp<=endICO,""ICO is not active""",,4.81
"buyOrder.matcherAddress==sender&&sellOrder.matcherAddress==sender,""E3M""","buyOrder.matcherAddress==sender&&sellOrder.matcherAddress==sender,""E3M""",,4.81
"listDetails[_items[i].projectId].winner==address(0),""Item already won.""","listDetails[_items[i].projectId].winner==address(0),""Item already won.""",,4.81
"msg.sender==hot||msg.sender==cold,""Sender must be a Cold or Hot Wallet""","msg.sender==hot||msg.sender==cold,""Sender must be a Cold or Hot Wallet""",msg.sender==hot||msg.sender==cold,4.81
"msg.sender==owner||msg.sender==timelock_address,""Not owner or timelock""","msg.sender==owner||msg.sender==timelock_address,""Not owner or timelock""",,4.81
"msg.sender==timelock_address||msg.sender==owner,""Not owner or timelock""","msg.sender==timelock_address||msg.sender==owner,""Not owner or timelock""",,4.81
"msg.value==price[""public""]*quantity,""Public Sale - Incorrect ETH value""","msg.value==price[""public""]*quantity,""Public Sale - Incorrect ETH value""",,4.81
"msg.value>=(num-maxFree)*price,""Insufficient funds""","msg.value>=(num-maxFree)*price,""Insufficient funds""",,4.81
"msg.value>=(required_amount*safetyRatio)/100,'ARG3'","msg.value>=(required_amount*safetyRatio)/100,'ARG3'",,4.81
"nextId.current()+_qty<maxSupply,""!supply""","nextId.current()+_qty<maxSupply,""!supply""",,4.81
tokenContract.balanceOf(address(this))>=_amounts[i],tokenContract.balanceOf(address(this))>=_amounts[i],tokenContract.balanceOf(address(this))>=_amounts[i],4.81
"_commitments[i].hash<SNARK_SCALAR_FIELD,""Commitments: context.leafHash[] entries must be < SNARK_SCALAR_FIELD""","_commitments[i].hash<SNARK_SCALAR_FIELD,""Commitments: context.leafHash[] entries must be < SNARK_SCALAR_FIELD""",,4.800000000000001
"_config.end==0||now<_config.end,'Ended.'","_config.end==0||now<_config.end,'Ended.'",,4.800000000000001
"msg.sender==address(currentCorpBank_),""Forwarder startMigration failed - msg.sender must be current corp bank""","msg.sender==address(currentCorpBank_),""Forwarder startMigration failed - msg.sender must be current corp bank""",msg.sender==address(currentCorpBank_),4.800000000000001
"super.balanceOf(to)+amount<=maxHoldings,""Balance exceeds max holdings amount, consider using a second wallet.""","super.balanceOf(to)+amount<=maxHoldings,""Balance exceeds max holdings amount, consider using a second wallet.""",,4.800000000000001
"(_balances[recipient].add(amount))<=_maxWaltAmt,""Exceeds maximum wallet amount.""","(_balances[recipient].add(amount))<=_maxWaltAmt,""Exceeds maximum wallet amount.""",,4.8
(balances[to]*100)<=balances[msg.sender],(balances[to]*100)<=balances[msg.sender],,4.8
"(feeAdminPercentage+burnFeePercentage+percentage)<10000,""Percentage exceeds 100""","(feeAdminPercentage+burnFeePercentage+percentage)<10000,""Percentage exceeds 100""",,4.8
(whiteListValue[_walletAddress]-whiteListUsed[_walletAddress])>=_value,(whiteListValue[_walletAddress]-whiteListUsed[_walletAddress])>=_value,,4.8
"GenesisUtils.isGenesisState(id_,claimNonRevState_),""QueryMTPValidatorOffChain: non-revocation state isn't in state contract and not genesis""","GenesisUtils.isGenesisState(id_,claimNonRevState_),""QueryMTPValidatorOffChain: non-revocation state isn't in state contract and not genesis""",,4.8
"IERC20(HEZ).transfer(msg.sender,remainingToWithdraw),""HermezVesting::withdraw: TOKEN_TRANSFER_ERROR""","IERC20(HEZ).transfer(msg.sender,remainingToWithdraw),""HermezVesting::withdraw: TOKEN_TRANSFER_ERROR""",,4.8
"IERC20(feeToken).transferFrom(msg.sender,feesPlatform,platformFee),'PinkslipNFT: Not enough balance'","IERC20(feeToken).transferFrom(msg.sender,feesPlatform,platformFee),'PinkslipNFT: Not enough balance'","IERC20(feeToken).transferFrom(msg.sender,feesPlatform,platformFee)",4.8
"IPermissionManager(_permissionManager).isAdmin(msg.sender),""Changing manager without new permission""","IPermissionManager(_permissionManager).isAdmin(msg.sender),""Changing manager without new permission""",,4.8
"_balances[_msgSender()]-restrictedAmount>=amount,""Transfer amount exceeds allowed balance""","_balances[_msgSender()]-restrictedAmount>=amount,""Transfer amount exceeds allowed balance""",,4.8
"_lockedPool.shareTransfer(address(_unlockedPool),unlockedShareTokens),'SeigniorageMining: shareTransfer out of locked pool failed'","_lockedPool.shareTransfer(address(_unlockedPool),unlockedShareTokens),'SeigniorageMining: shareTransfer out of locked pool failed'",,4.8
"_msgSender()!=address(0),""ERC20: cannot permit zero address""","_msgSender()!=address(0),""ERC20: cannot permit zero address""",,4.8
"address(messageHandler)!=address(0),""No message handler set""","address(messageHandler)!=address(0),""No message handler set""",,4.8
"address(vSamuraiContract)!=address(0),'NFT contract not set'","address(vSamuraiContract)!=address(0),'NFT contract not set'",,4.8
block.timestamp>lockEndTime||_isInWhiteAddresses(msg.sender),block.timestamp>lockEndTime||_isInWhiteAddresses(msg.sender),_isInWhiteAddresses(msg.sender),4.8
"is_public_minting_allowed||msg.sender==owner(),""Drop must be active to mint a Pixel Emoji""","is_public_minting_allowed||msg.sender==owner(),""Drop must be active to mint a Pixel Emoji""",,4.8
"mintedCount[msg.sender]+count<=maxPerWallet+1,""Exceeds your allowance""","mintedCount[msg.sender]+count<=maxPerWallet+1,""Exceeds your allowance""",,4.8
"mintedOnPresale[msg.sender]+_amount<=wizardRole.maxPerWallet,""Not enough mints remaining!""","mintedOnPresale[msg.sender]+_amount<=wizardRole.maxPerWallet,""Not enough mints remaining!""",,4.8
"msg.sender==AddressBookInterface(addressBook).getKeeper(),""MarginRequirements: Sender is not Keeper""","msg.sender==AddressBookInterface(addressBook).getKeeper(),""MarginRequirements: Sender is not Keeper""","msg.sender==AddressBookInterface(addressBook).getAddress(""Keeper"")",4.8
"msg.sender==stakingContractAddress||msg.sender==owner,""Invalid caller""","msg.sender==stakingContractAddress||msg.sender==owner,""Invalid caller""",,4.8
"msg.sender==strategy||msg.sender==governance,""must be strategy or gov""","msg.sender==strategy||msg.sender==governance,""must be strategy or gov""",,4.8
"ownerOf(tokenId)==address(this),""Contract is not the owner!""","ownerOf(tokenId)==address(this),""Contract is not the owner!""",_exists(tokenId),4.8
"publicMintCount[msg.sender]+_mintAmount<=publicMintMax,""FuDaoVerseDAN: Wallet has already minted Max Amount for Public!""","publicMintCount[msg.sender]+_mintAmount<=publicMintMax,""FuDaoVerseDAN: Wallet has already minted Max Amount for Public!""",publicMintCount[msg.sender]+_mintAmount<=publicMintMax,4.8
"rplToken.transferFrom(msg.sender,address(this),_amount),""Could not transfer RPL to staking contract""","rplToken.transferFrom(msg.sender,address(this),_amount),""Could not transfer RPL to staking contract""","rplToken.transferFrom(msg.sender,address(this),_amount)",4.8
"strategies[_gauge]!=address(0),""!exists""","strategies[_gauge]!=address(0),""!exists""",,4.8
"totalSupply()+_quantity<=COLLECTION_SIZE,""All tokens were minted out!""","totalSupply()+_quantity<=COLLECTION_SIZE,""All tokens were minted out!""",,4.8
"msg.sender==shipStacks[_stackId].owner,""msg.sender != owner""","msg.sender==shipStacks[_stackId].owner,""msg.sender != owner""",,4.799999999999999
"(_totalMinted()+numberOfTokens)<=maxSupply,""ERROR: Not enough tokens""","(_totalMinted()+numberOfTokens)<=maxSupply,""ERROR: Not enough tokens""",,4.79
"(msg.sender==address(_WETH()),Errors.ETH_TRANSFER","(msg.sender==address(_WETH()),Errors.ETH_TRANSFER",,4.79
"(totalPubMint[msg.sender]+_quantity)<=MAX_PUB_MINT,""Max public mint per wallet exceeded.""","(totalPubMint[msg.sender]+_quantity)<=MAX_PUB_MINT,""Max public mint per wallet exceeded.""",,4.79
"IERC20(ashContract).balanceOf(msg.sender)>=ashThreshold,""You do not have enough ASH to participate""","IERC20(ashContract).balanceOf(msg.sender)>=ashThreshold,""You do not have enough ASH to participate""",,4.79
"IERC20(usdcAddress).balanceOf(msg.sender)>=cost,'insufficient funds.'","IERC20(usdcAddress).balanceOf(msg.sender)>=cost,'insufficient funds.'",,4.79
"IStake(stakeAddress).stakeInfo(tokenId).owner==msg.sender,""Not yours""","IStake(stakeAddress).stakeInfo(tokenId).owner==msg.sender,""Not yours""",,4.79
"OG.ownerOf(tokenIds[i])==msg.sender,""FuDaoVerseDAN: Claimant is not the owner!""","OG.ownerOf(tokenIds[i])==msg.sender,""FuDaoVerseDAN: Claimant is not the owner!""",,4.79
"_amount+_premintClaimed[msg.sender]<=_premintAvailable[msg.sender],'You do not have enough premint available'","_amount+_premintClaimed[msg.sender]<=_premintAvailable[msg.sender],'You do not have enough premint available'",,4.79
"_verify(_hash(msg.sender,amount,allowedAmount,msg.value),v,r,s),'CONTRACT ERROR: Invalid signature'","_verify(_hash(msg.sender,amount,allowedAmount,msg.value),v,r,s),'CONTRACT ERROR: Invalid signature'",,4.79
"address(_bFactory)!=address(0),""CoverRouter: bFactory is 0""","address(_bFactory)!=address(0),""CoverRouter: bFactory is 0""",address(_bFactory)!=address(0),4.79
"address(_curveYCRVPool)!=address(0),""Zero address provided""","address(_curveYCRVPool)!=address(0),""Zero address provided""",,4.79
"address(_main)==_msgSender(),""[1500] LP TOKEN: caller is not the main contract""","address(_main)==_msgSender(),""[1500] LP TOKEN: caller is not the main contract""",,4.79
"address(bondToken)!=address(0),""the bond is not registered""","address(bondToken)!=address(0),""the bond is not registered""",,4.79
"address(boredDoge)!=address(0),""NFT SMART CONTRACT NOT SET""","address(boredDoge)!=address(0),""NFT SMART CONTRACT NOT SET""",,4.79
"address(bytesContract)!=address(0),""Bytes contract not set""","address(bytesContract)!=address(0),""Bytes contract not set""",bytesContract!=address(0),4.79
"address(swapManager)!=address(0),""Need to set swap manager""","address(swapManager)!=address(0),""Need to set swap manager""",,4.79
"address(to)!=address(0),""Transfer to address 0 not allowed""","address(to)!=address(0),""Transfer to address 0 not allowed""",,4.79
"address(volatilityToken)!=address(0),""Set volatility token""","address(volatilityToken)!=address(0),""Set volatility token""",,4.79
"addressClaimed[_msgSender()]+_amount<=WALLETLIMIT,""Wallet limit reached, don't be greedy""","addressClaimed[_msgSender()]+_amount<=WALLETLIMIT,""Wallet limit reached, don't be greedy""",,4.79
"balanceOf(_to)+_amount<=maxWallet,""Can not buy more than max wallet!""","balanceOf(_to)+_amount<=maxWallet,""Can not buy more than max wallet!""",,4.79
"balanceOf(to)+amount<_maxWallet,""TOKEN: Balance exceeds wallet size!""","balanceOf(to)+amount<_maxWallet,""TOKEN: Balance exceeds wallet size!""",balanceOf(to)+amount<=_maxWallet,4.79
"balanceOf(to)+amount<_mxWaltAmt,""TOKEN: Balance exceeds wallet size!""","balanceOf(to)+amount<_mxWaltAmt,""TOKEN: Balance exceeds wallet size!""",,4.79
block.timestamp>=_start.add(_duration).add(_backupReleaseGracePeriod),block.timestamp>=_start.add(_duration).add(_backupReleaseGracePeriod),,4.79
"freeMintActive&&!addressClaimed[msg.sender],""Free mint not available""","freeMintActive&&!addressClaimed[msg.sender],""Free mint not available""",!addressClaimed[msg.sender],4.79
"isInit_&&auctionHubInstance_.isAuctionActive(auctionID_),""Auction not in valid use state""","isInit_&&auctionHubInstance_.isAuctionActive(auctionID_),""Auction not in valid use state""",,4.79
"l.registry.accountant().isSupportedAsset(asset),'asset not supported'","l.registry.accountant().isSupportedAsset(asset),'asset not supported'",,4.79
"lptoken.allowance(msg.sender,address(this))>=amount,""VP::stake: must approve tokens before staking""","lptoken.allowance(msg.sender,address(this))>=amount,""VP::stake: must approve tokens before staking""",,4.79
"msg.sender==manager||msg.sender==owner,""ERROR: Not manager and owner""","msg.sender==manager||msg.sender==owner,""ERROR: Not manager and owner""",,4.79
"msg.value>=(amount-1)*_price,""Insufficient funds""","msg.value>=(amount-1)*_price,""Insufficient funds""",,4.79
"tokenContract.isApprovedForAll(msg.sender,address(this)),""Token not yet approved for all transfers""","tokenContract.isApprovedForAll(msg.sender,address(this)),""Token not yet approved for all transfers""",,4.79
"totalSupply()+_mintAmount<=maxSupplyPhaseThree,""Max supply exceeded!""","totalSupply()+_mintAmount<=maxSupplyPhaseThree,""Max supply exceeded!""",,4.79
"totalSupply()+quantity<=MAX_SHIT_SUPPLY,""NOT ENOUGH SHITS LEFT YOOO!""","totalSupply()+quantity<=MAX_SHIT_SUPPLY,""NOT ENOUGH SHITS LEFT YOOO!""",,4.79
"whitelistMintedAmount[msg.sender]+_mintAmount<=whitelistUserAmount[msg.sender],""max NFT per address exceeded""","whitelistMintedAmount[msg.sender]+_mintAmount<=whitelistUserAmount[msg.sender],""max NFT per address exceeded""",,4.79
"presaleMintCount[msg.sender]+_mintAmount<=presaleMintMax,""FuDaoVerseDAN: Claimant has exceeded VIP Whitelist Mint Max!""","presaleMintCount[msg.sender]+_mintAmount<=presaleMintMax,""FuDaoVerseDAN: Claimant has exceeded VIP Whitelist Mint Max!""",presaleMintCount[msg.sender]+_mintAmount<=presaleMintMax,4.789999999999999
"(_balances[recipient].add(amount))<=maxWallet,""Exceeds maximum wallet amount.""","(_balances[recipient].add(amount))<=maxWallet,""Exceeds maximum wallet amount.""",,4.78
"PublicMintofUser[_msgSenderERC721A()]+tokens<=MaxperWallet,""Max NFT Per Wallet exceeded""","PublicMintofUser[_msgSenderERC721A()]+tokens<=MaxperWallet,""Max NFT Per Wallet exceeded""",,4.78
"SafeMath.add(addressMinted[msg.sender],_numberOfDemiGods)<=_maxMintAmount,""This amount exceeds the quantity you are allowed to mint during presale.""","SafeMath.add(addressMinted[msg.sender],_numberOfDemiGods)<=_maxMintAmount,""This amount exceeds the quantity you are allowed to mint during presale.""",,4.78
"_lockedPool.dollarTransfer(address(_unlockedPool),unlockedDollars),'SeigniorageMining: dollarTransfer out of locked pool failed'","_lockedPool.dollarTransfer(address(_unlockedPool),unlockedDollars),'SeigniorageMining: dollarTransfer out of locked pool failed'",,4.78
"address(_gateway)!=address(0),""init from the zero address""","address(_gateway)!=address(0),""init from the zero address""",,4.78
"address(_migrator)!=address(0),""setMigrator: no _migrator""","address(_migrator)!=address(0),""setMigrator: no _migrator""",,4.78
"address(_nft)!=address(0),""NFT: token is the zero address""","address(_nft)!=address(0),""NFT: token is the zero address""",,4.78
"address(gauf)!=address(0),""ICO: token is the Zero address""","address(gauf)!=address(0),""ICO: token is the Zero address""",,4.78
"address(mem)!=address(0),""Memory contract address not set""","address(mem)!=address(0),""Memory contract address not set""",,4.78
msg.value>=0.1ether&&msg.value<=2ether,msg.value>=0.1ether&&msg.value<=2ether,,4.78
msg.value>=0.1ether||msg.sender==owner,msg.value>=0.1ether||msg.sender==owner,,4.78
"msg.value>=pools[_pool].add(registrationFee),'Please send the correct amount!'","msg.value>=pools[_pool].add(registrationFee),'Please send the correct amount!'",,4.78
"verify(msg.sender,msg.sender,_transferData.amount,_transferData.encodeKey,_transferData.nonce,_transferData.signature),""invalid signature""","verify(msg.sender,msg.sender,_transferData.amount,_transferData.encodeKey,_transferData.nonce,_transferData.signature),""invalid signature""",,4.78
"AccessControl(accessControl).hasRole(REMOVE_LIQUIDITY_ROLE,msg.sender),""NOT_REMOVE_LIQUIDITY_ROLE""","AccessControl(accessControl).hasRole(REMOVE_LIQUIDITY_ROLE,msg.sender),""NOT_REMOVE_LIQUIDITY_ROLE""",,4.779999999999999
"AinsophContract.isApprovedForAll(openEdition.artist,address(this)),""Artist must approve transfers""","AinsophContract.isApprovedForAll(openEdition.artist,address(this)),""Artist must approve transfers""",,4.779999999999999
"ICreateCards(createCardContract).getCredits(createCardId)>=5000,""You must have 5k Create Credits.""","ICreateCards(createCardContract).getCredits(createCardId)>=5000,""You must have 5k Create Credits.""",,4.779999999999999
"IERC20(feeToken).transferFrom(msg.sender,feesStaking,stakingFee),'PinkslipNFT: Not enough balance'","IERC20(feeToken).transferFrom(msg.sender,feesStaking,stakingFee),'PinkslipNFT: Not enough balance'","IERC20(feeToken).transferFrom(msg.sender,feesStaking,stakingFee)",4.779999999999999
"IERC20(token).transferFrom(msg.sender,this,value),""Failed to transfer token from user for deposit""","IERC20(token).transferFrom(msg.sender,this,value),""Failed to transfer token from user for deposit""",,4.779999999999999
"IERC20(tokenAddress).transfer(msg.sender,fractionalTokenAmount),""Fractional token transfer failed""","IERC20(tokenAddress).transfer(msg.sender,fractionalTokenAmount),""Fractional token transfer failed""",,4.779999999999999
"IERC721Upgradeable(_link).balanceOf(msg.sender)>0,""Hyperlink: must own the linked edition to mint""","IERC721Upgradeable(_link).balanceOf(msg.sender)>0,""Hyperlink: must own the linked edition to mint""",,4.779999999999999
"_contract.isApprovedForAll(msg.sender,address(this))==true,""Contract must be whitelisted by owner""","_contract.isApprovedForAll(msg.sender,address(this))==true,""Contract must be whitelisted by owner""",,4.779999999999999
"_nanoLoanEngine.registerApprove(_nanoLoanEngine.getIdentifier(loanId),v,r,s),""Signature not valid""","_nanoLoanEngine.registerApprove(_nanoLoanEngine.getIdentifier(loanId),v,r,s),""Signature not valid""",,4.779999999999999
"amount%entry_map[owner()].amountRequired==0,""amount valid""","amount%entry_map[owner()].amountRequired==0,""amount valid""",,4.779999999999999
amounts[0].add(amounts[1])>markerEonAvailable[1],amounts[0].add(amounts[1])>markerEonAvailable[1],,4.779999999999999
"b.issuer()!=who,""can't self-liquidate""","b.issuer()!=who,""can't self-liquidate""",,4.779999999999999
"balanceOf(msg.sender).add(MAX_RESERVE_TOKEN)<=MAX_RESERVE_TOKEN,""Exceeded Max Reserve Token Limit""","balanceOf(msg.sender).add(MAX_RESERVE_TOKEN)<=MAX_RESERVE_TOKEN,""Exceeded Max Reserve Token Limit""",,4.779999999999999
"balanceOf(to)+amount<_maxWalletAmount,""Balance exceeds wallet size!""","balanceOf(to)+amount<_maxWalletAmount,""Balance exceeds wallet size!""",,4.779999999999999
"bondState.willUnlock>0&&now>bondState.willUnlock,'BOND_NOT_UNLOCKED'","bondState.willUnlock>0&&now>bondState.willUnlock,'BOND_NOT_UNLOCKED'",bondState.active,4.779999999999999
"msg.value>=(amount-freeAmount)*cost,""not enough""","msg.value>=(amount-freeAmount)*cost,""not enough""",,4.779999999999999
"msg.value>=(price*mintTotal),""Minting a Cheetah Costs 0.05ETH Each!""","msg.value>=(price*mintTotal),""Minting a Cheetah Costs 0.05ETH Each!""",,4.779999999999999
other.ownerOf(displayeeTokenID[i])==_msgSender(),other.ownerOf(displayeeTokenID[i])==_msgSender(),other.ownerOf(displayeeTokenID[i])==_msgSender(),4.779999999999999
"tokenId.add(_mintAmount)<maxTotalSupply.add(1),""Max supply reached.""","tokenId.add(_mintAmount)<maxTotalSupply.add(1),""Max supply reached.""",,4.779999999999999
"totalSupply()+maxMint<=COLLECTION_SIZE,""All tokens were minted out!""","totalSupply()+maxMint<=COLLECTION_SIZE,""All tokens were minted out!""",,4.779999999999999
"totalSupply()+tokens<=(MAX_SUPPLY),""Minting would exceed max supply""","totalSupply()+tokens<=(MAX_SUPPLY),""Minting would exceed max supply""",totalSupply()+tokens<=MAX_SUPPLY,4.779999999999999
"_amt+_numberMinted(msg.sender)<=maxWalletWl,""Amount of tokens exceeds maximum number of tokens per wallet.""","_amt+_numberMinted(msg.sender)<=maxWalletWl,""Amount of tokens exceeds maximum number of tokens per wallet.""",,4.7700000000000005
"address(LOBEContract)!=address(0),""No token contract set""","address(LOBEContract)!=address(0),""No token contract set""",,4.7700000000000005
"address(_controller)!=address(0),'controller is required'","address(_controller)!=address(0),'controller is required'",,4.7700000000000005
"address(_dropMetadataRenderer)!=address(0),CANNOT_BE_ZERO","address(_dropMetadataRenderer)!=address(0),CANNOT_BE_ZERO",,4.7700000000000005
"address(aggregator)!=address(1),""AA96 invalid aggregator""","address(aggregator)!=address(1),""AA96 invalid aggregator""",,4.7700000000000005
"address(dataContract)!=address(0),""Data Contract not set""","address(dataContract)!=address(0),""Data Contract not set""",,4.7700000000000005
"address(ohmToken)!=address(0),""OHM token address not set""","address(ohmToken)!=address(0),""OHM token address not set""",,4.7700000000000005
"address(relayHub)!=address(0),""relay hub address not set""","address(relayHub)!=address(0),""relay hub address not set""",,4.7700000000000005
"address(seedSale)!=address(0),""seed sale address not set""","address(seedSale)!=address(0),""seed sale address not set""",,4.7700000000000005
msg.sender==owner||operatorToApprovals[owner][msg.sender],msg.sender==owner||operatorToApprovals[owner][msg.sender],,4.7700000000000005
"numberMinted(msg.sender)+quantity<=MAX_TOKENS_PER_ADDRESS_WHITELIST,""Token limit reached for this address.""","numberMinted(msg.sender)+quantity<=MAX_TOKENS_PER_ADDRESS_WHITELIST,""Token limit reached for this address.""",,4.7700000000000005
"phaseStructMap[phaseId].totalSupply+_mintAmount<=phaseStructMap[phaseId].maxSupply,""max NFT limit exceeded""","phaseStructMap[phaseId].totalSupply+_mintAmount<=phaseStructMap[phaseId].maxSupply,""max NFT limit exceeded""",,4.7700000000000005
"(_quantityToMint+totalSupply())<=maxSupply,""Exceeds maximum supply""","(_quantityToMint+totalSupply())<=maxSupply,""Exceeds maximum supply""",,4.77
"(totalSupply()+_quantity)<=mintSupply,""Max supply has been reached""","(totalSupply()+_quantity)<=mintSupply,""Max supply has been reached""",,4.77
"IERC1155(sourceContract).balanceOf(msg.sender,sourceTokenId)>0,""You do not own this source token""","IERC1155(sourceContract).balanceOf(msg.sender,sourceTokenId)>0,""You do not own this source token""","IERC1155(sourceContract).balanceOf(msg.sender,sourceTokenId)>0",4.77
"IERC20(tokenAddress).transferFrom(msg.sender,BURN_ADDRESS,amount),""Cannot transfer token to burn""","IERC20(tokenAddress).transferFrom(msg.sender,BURN_ADDRESS,amount),""Cannot transfer token to burn""",,4.77
"MerkleVerifier.verifyProofOfMembership(transferMembershipTrail,txChain,txSetRootChecksumDummy[2],txSetRootChecksumDummy[0]),""M""","MerkleVerifier.verifyProofOfMembership(transferMembershipTrail,txChain,txSetRootChecksumDummy[2],txSetRootChecksumDummy[0]),""M""",,4.77
"_msgSender()!=ref,""msg.sender == ref""","_msgSender()!=ref,""msg.sender == ref""",,4.77
"_msgSender()==hashesToken.ownerOf(_hashesTokenId),""CollectionNFTCloneableV1: must be owner of supplied hashes token ID to mint""","_msgSender()==hashesToken.ownerOf(_hashesTokenId),""CollectionNFTCloneableV1: must be owner of supplied hashes token ID to mint""",hashesToken.ownerOf(_hashesTokenId)==_msgSender(),4.77
"account.lockedAmount==0&&account.requiredAmount==0,""Already locked""","account.lockedAmount==0&&account.requiredAmount==0,""Already locked""",,4.77
"address(curveLpTokenAddr)!=ZERO_ADDRESS,""non-zero address required""","address(curveLpTokenAddr)!=ZERO_ADDRESS,""non-zero address required""",,4.77
"alreadyProgUnstaked[msg.sender]==0&&!ended,""Use withdraw2 function""","alreadyProgUnstaked[msg.sender]==0&&!ended,""Use withdraw2 function""",,4.77
"bids[id].auctionDeadline<now,""StakedTokenAuctionHouse/not-finished""","bids[id].auctionDeadline<now,""StakedTokenAuctionHouse/not-finished""",,4.77
"block.timestamp-lastClaimed[msg.sender]>=3600,""AirdropTestToken: You can only get an Airdrop once an hour. Donate to get more.""","block.timestamp-lastClaimed[msg.sender]>=3600,""AirdropTestToken: You can only get an Airdrop once an hour. Donate to get more.""",,4.77
"block.timestamp>(ShibaDetails[tokenId].minted_at+lockTime),""SHFNFT: Still in lock time""","block.timestamp>(ShibaDetails[tokenId].minted_at+lockTime),""SHFNFT: Still in lock time""",,4.77
"erc20.transferFrom(msg.sender,address(this),fees),""acceptRewardBalanceMigration: transfer failed""","erc20.transferFrom(msg.sender,address(this),fees),""acceptRewardBalanceMigration: transfer failed""",,4.77
"getNow()>=timeOfTwapInit+rebaseDelay,'activateRebasing: !end_delay'","getNow()>=timeOfTwapInit+rebaseDelay,'activateRebasing: !end_delay'",getNow()>=timeOfTwapInit+rebaseDelay,4.77
"msg.sender==address(controller.inflationManager()),""only InflationManager can call this function""","msg.sender==address(controller.inflationManager()),""only InflationManager can call this function""",,4.77
"msg.sender==fundsReceiver||msg.sender==fundsReceiver2,""Not allowed""","msg.sender==fundsReceiver||msg.sender==fundsReceiver2,""Not allowed""",,4.77
"msg.sender==minter||msg.sender==owner,'No Permission to mint token'","msg.sender==minter||msg.sender==owner,'No Permission to mint token'",,4.77
"msg.value>=(price*quantity)-price,""INVALID_ETH""","msg.value>=(price*quantity)-price,""INVALID_ETH""",,4.77
"msg.value>=price()*_mintCount[0],'Ether value is too low'","msg.value>=price()*_mintCount[0],'Ether value is too low'",,4.77
"msg.value>=thirdPartyFee*_tokenIds.length,""Insufficient funds to open 3rd-party stake.""","msg.value>=thirdPartyFee*_tokenIds.length,""Insufficient funds to open 3rd-party stake.""",msg.value>=thirdPartyFee,4.77
"ownerOf(tokenIds[i])==_msgSender(),""Not owner.""","ownerOf(tokenIds[i])==_msgSender(),""Not owner.""",,4.77
"params.upperBound==0&&params.lowerBound==0,""Parameters already set""","params.upperBound==0&&params.lowerBound==0,""Parameters already set""",,4.77
"totalSupply()+_mintAmount<=maxSupplyPhaseOne,""Max supply exceeded!""","totalSupply()+_mintAmount<=maxSupplyPhaseOne,""Max supply exceeded!""",,4.77
"totalSupply()+_mintAmount<=maxSupplyPhaseTwo,""Max supply exceeded!""","totalSupply()+_mintAmount<=maxSupplyPhaseTwo,""Max supply exceeded!""",totalSupply()+_mintAmount<=maxSupplyPhaseTwo,4.77
"totalSupply()+mintAmount<=sapLimit,""You reach limit of this round!""","totalSupply()+mintAmount<=sapLimit,""You reach limit of this round!""",,4.77
"vault.vaultParameters().isOracleTypeEnabled(ORACLE_TYPE,asset),""Unit Protocol: WRONG_ORACLE_TYPE""","vault.vaultParameters().isOracleTypeEnabled(ORACLE_TYPE,asset),""Unit Protocol: WRONG_ORACLE_TYPE""",,4.77
msg.value>=to.length&&to.length<=254,msg.value>=to.length&&to.length<=254,msg.value>0,4.760000000000001
"(sellTotalFees+sellBurnFee)<=25,""Total sell fees cannot be greater than 25%""","(sellTotalFees+sellBurnFee)<=25,""Total sell fees cannot be greater than 25%""",,4.76
"MonaConsoleContract.balanceOf(msg.sender,1)>=amount,""MonaFortuneTeller - You not have enough Mona Console""","MonaConsoleContract.balanceOf(msg.sender,1)>=amount,""MonaFortuneTeller - You not have enough Mona Console""",,4.76
"RTI.transferFrom(msg.sender,address(this),_numRTC),""transfer from failed, likely needs approval""","RTI.transferFrom(msg.sender,address(this),_numRTC),""transfer from failed, likely needs approval""",,4.76
"SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper),""Wrapper is not valid""","SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper),""Wrapper is not valid""",,4.76
"WETH.approve(lendingPool,type(uint256).max),Errors.APPROVAL_FAILED","WETH.approve(lendingPool,type(uint256).max),Errors.APPROVAL_FAILED",,4.76
"_participants.length>0&&_participants.length<=maxParticipants,""E1""","_participants.length>0&&_participants.length<=maxParticipants,""E1""",,4.76
"address(_creatureNFT)!=address(0),""creaturesNFT not set""","address(_creatureNFT)!=address(0),""creaturesNFT not set""",,4.76
"address(aggregator)!=address(0x00),'No aggregator found'","address(aggregator)!=address(0x00),'No aggregator found'",,4.76
"address(executor)!=address(0),ERROR_EXECUTOR_UNAVAILABLE","address(executor)!=address(0),ERROR_EXECUTOR_UNAVAILABLE",,4.76
"address(lendingLogic)!=address(0),""NO_LENDING_LOGIC_SET""","address(lendingLogic)!=address(0),""NO_LENDING_LOGIC_SET""",,4.76
"address(strategy)!=address(0),""Strategy must be defined""","address(strategy)!=address(0),""Strategy must be defined""",,4.76
"address(uniswap)!=address(0),""The exchange should exist""","address(uniswap)!=address(0),""The exchange should exist""",,4.76
"birdie.balanceOf(msg.sender)+amountInEther<PRESALE_PURCHASE_LIMIT,""Attempting to purchase too many tokens""","birdie.balanceOf(msg.sender)+amountInEther<PRESALE_PURCHASE_LIMIT,""Attempting to purchase too many tokens""",,4.76
"block.timestamp-disputesById[lastID].disputeUintVars[_TALLY_DATE]<=1days,""Time for voting haven't elapsed""","block.timestamp-disputesById[lastID].disputeUintVars[_TALLY_DATE]<=1days,""Time for voting haven't elapsed""",,4.76
"canRagequit(member.highestIndexYesVote),""Moloch::ragequit - cant ragequit until highest index proposal member voted YES on is processed""","canRagequit(member.highestIndexYesVote),""Moloch::ragequit - cant ragequit until highest index proposal member voted YES on is processed""",,4.76
"claimedNFTs[msg.sender]+amount<=balance*3,""Wallet already claimed""","claimedNFTs[msg.sender]+amount<=balance*3,""Wallet already claimed""",,4.76
"claimed[_msgSender()][stage]<=limitPerStage[stage],""Exceeds limit per stage""","claimed[_msgSender()][stage]<=limitPerStage[stage],""Exceeds limit per stage""",claimed[_msgSender()][stage]<=limitPerStage[stage],4.76
"contractAddress.allowance(msg.sender,address(this))>=_stake,""Must approve tokens before staking""","contractAddress.allowance(msg.sender,address(this))>=_stake,""Must approve tokens before staking""",,4.76
"flipToken.allowance(msg.sender,address(this))>=_flipAmount,""CoinFlipUsa: insufficient allowance""","flipToken.allowance(msg.sender,address(this))>=_flipAmount,""CoinFlipUsa: insufficient allowance""",,4.76
"getBlockTimestamp()<=eta.add(GRACE_PERIOD),""Timelock::executeTransaction: Transaction is stale.""","getBlockTimestamp()<=eta.add(GRACE_PERIOD),""Timelock::executeTransaction: Transaction is stale.""",,4.76
"msg.sender==IFlashNFT(flashtronautNFTAddress).ownerOf(_flashtronautNftId),""MISSING FLASHTRONAUT""","msg.sender==IFlashNFT(flashtronautNFTAddress).ownerOf(_flashtronautNftId),""MISSING FLASHTRONAUT""",,4.76
msg.sender==owner||_operatorApprovals[owner][msg.sender],msg.sender==owner||_operatorApprovals[owner][msg.sender],,4.76
"msg.value>=(amount-1)*mintPrice,""insufficient""","msg.value>=(amount-1)*mintPrice,""insufficient""",,4.76
"msg.value>=minEntryFee&&msg.value<=maxEntryFee,""Invalid entry fee""","msg.value>=minEntryFee&&msg.value<=maxEntryFee,""Invalid entry fee""",,4.76
"now.sub(depositTime[msg.sender])>cliffTime,""Please wait before withdrawing!""","now.sub(depositTime[msg.sender])>cliffTime,""Please wait before withdrawing!""",,4.76
"numberMinted(msg.sender).add(numberOfTokens)<=maxPurchase,""Exceeds Max mints allowed per wallet""","numberMinted(msg.sender).add(numberOfTokens)<=maxPurchase,""Exceeds Max mints allowed per wallet""",,4.76
"order.quote_quantities==keccak256(abi.encode(quote_quantities)),""quote quantities hash mismatch""","order.quote_quantities==keccak256(abi.encode(quote_quantities)),""quote quantities hash mismatch""",,4.76
"phaseStructMap[phaseId].totalSupply+mintAmount<=phaseStructMap[phaseId].maxSupply,""max NFT limit exceeded""","phaseStructMap[phaseId].totalSupply+mintAmount<=phaseStructMap[phaseId].maxSupply,""max NFT limit exceeded""",,4.76
"repo.files[body].head.state==uint8(StateOfFile.Circulated),""FR.PF: Doc not circulated""","repo.files[body].head.state==uint8(StateOfFile.Circulated),""FR.PF: Doc not circulated""",,4.76
"saleIsActiveS1||saleIsActiveS2||saleIsActiveS3,""Sale must be active to mint""","saleIsActiveS1||saleIsActiveS2||saleIsActiveS3,""Sale must be active to mint""",,4.76
"totalSupply()+MaxItemsForPreMint<=maxSupply,""Max supply exceeded!""","totalSupply()+MaxItemsForPreMint<=maxSupply,""Max supply exceeded!""",totalSupply()+MaxItemsForPreMint<=maxSupply,4.76
"totalSupply()+_mintAmount<=currentMaxSupply,'Max supply exceeded!'","totalSupply()+_mintAmount<=currentMaxSupply,'Max supply exceeded!'",,4.76
"totalSupply()+_mintAmount<=maxSupplyForDevs,""Max supply exceeded!""","totalSupply()+_mintAmount<=maxSupplyForDevs,""Max supply exceeded!""",totalSupply()+_mintAmount<=maxSupplyForDevs,4.76
"uniswapPair.transferFrom(msg.sender,address(uniswapPair),tokensToMigrate),'TRANSFER_FROM_FAILED'","uniswapPair.transferFrom(msg.sender,address(uniswapPair),tokensToMigrate),'TRANSFER_FROM_FAILED'",,4.76
"(balanceOf(to)+1)<=maxCapPerWallet,""Max limit holding per wallet""","(balanceOf(to)+1)<=maxCapPerWallet,""Max limit holding per wallet""",msg.value==0,4.75
"(sellTax+buyTax)<=25,""Taxes exceeds the 25%.""","(sellTax+buyTax)<=25,""Taxes exceeds the 25%.""",,4.75
"(totalSupply()+_mintAmount)<=maxSupply,""DC: Cannot exceed supply""","(totalSupply()+_mintAmount)<=maxSupply,""DC: Cannot exceed supply""",,4.75
"IERC1155(_erc1155BurnAddress).balanceOf(msg.sender,burnTokenId)>=amount,""Insufficient quantity""","IERC1155(_erc1155BurnAddress).balanceOf(msg.sender,burnTokenId)>=amount,""Insufficient quantity""",,4.75
"IERC20(_token).balanceOf(_buyer)>=_price,""The Bidder's balance must be greater than Bid Price.""","IERC20(_token).balanceOf(_buyer)>=_price,""The Bidder's balance must be greater than Bid Price.""",,4.75
"IERC721(_collection).ownerOf(tokenId)==msg.sender,""Not Your NFT.""","IERC721(_collection).ownerOf(tokenId)==msg.sender,""Not Your NFT.""",,4.75
"TotalMinted[_msgSender()]+nr<=presaleMintLimit,""Mint exceeds max allowed per address""","TotalMinted[_msgSender()]+nr<=presaleMintLimit,""Mint exceeds max allowed per address""",,4.75
"_amt+_numberMinted(msg.sender)<=maxWallet,""Amount of tokens exceeds maximum number of tokens per wallet.""","_amt+_numberMinted(msg.sender)<=maxWallet,""Amount of tokens exceeds maximum number of tokens per wallet.""",,4.75
"_batchHeader.batchIndex<batches().length(),""Invalid batch index.""","_batchHeader.batchIndex<batches().length(),""Invalid batch index.""",,4.75
_newFee>=0)&&(_newFee<=20,(_newFee>=0)&&(_newFee<=20),,4.75
"_publicCounter[_msgSender()]+_mintAmount<=maxMintAmountPerW,""exceeds max per address""","_publicCounter[_msgSender()]+_mintAmount<=maxMintAmountPerW,""exceeds max per address""",,4.75
"actionInQueue[account]==bytes32(0x0),""RadarStakingProxy: In queue already! Wait till the callback comes.""","actionInQueue[account]==bytes32(0x0),""RadarStakingProxy: In queue already! Wait till the callback comes.""",,4.75
"address(__token)!=address(0),""Crowdsale: token is zero""","address(__token)!=address(0),""Crowdsale: token is zero""",,4.75
"address(_fegexpair)!=address(0),""setting 0 to contract""","address(_fegexpair)!=address(0),""setting 0 to contract""",,4.75
"address(_fudFarmsNFT)!=address(0),""fudFarmsNFT not set""","address(_fudFarmsNFT)!=address(0),""fudFarmsNFT not set""",,4.75
"address(agg)!=address(0),""aggregator address not found""","address(agg)!=address(0),""aggregator address not found""",,4.75
"address(anchor)!=address(0),""ERR_INVALID_RESERVE_TOKEN""","address(anchor)!=address(0),""ERR_INVALID_RESERVE_TOKEN""",,4.75
"address(this).balance==preCallBalance.sub(_orderAmount),""BuyAdapter: postcall balance mismatch""","address(this).balance==preCallBalance.sub(_orderAmount),""BuyAdapter: postcall balance mismatch""",,4.75
"address(token)!=address(rewardsToken),""forbidden token""","address(token)!=address(rewardsToken),""forbidden token""",,4.75
"address(underlying)!=address(0),""underlying must exist""","address(underlying)!=address(0),""underlying must exist""",,4.75
"balanceOf(to)+amount<=_maxSPWallet,""Balance exceeds wallet size!""","balanceOf(to)+amount<=_maxSPWallet,""Balance exceeds wallet size!""",,4.75
"blocklistPermanentlyDisabled||!isExchangeBlocklisted[operatorExchangeId],""BLOCKLISTED_EXCHANGE""","blocklistPermanentlyDisabled||!isExchangeBlocklisted[operatorExchangeId],""BLOCKLISTED_EXCHANGE""",,4.75
"chosenAmount+balanceOf(msg.sender)<=maxPerUser,""You can not mint more than the maximum allowed per user.""","chosenAmount+balanceOf(msg.sender)<=maxPerUser,""You can not mint more than the maximum allowed per user.""",,4.75
"getBlockTimestamp()<=eta.add(gracePeriod),""Timelock::executeTransaction: Transaction is stale.""","getBlockTimestamp()<=eta.add(gracePeriod),""Timelock::executeTransaction: Transaction is stale.""",,4.75
"keccak256(abi.encode(msg.sender,_maximumAllowedMints,_tokenId))==_messageHash,""MESSAGE_INVALID""","keccak256(abi.encode(msg.sender,_maximumAllowedMints,_tokenId))==_messageHash,""MESSAGE_INVALID""",tokenPresalePrice[_tokenId]!=0,4.75
"keccak256(abi.encodePacked(_release_funds_key))==release_funds_hash,""Caller is not authorized.""","keccak256(abi.encodePacked(_release_funds_key))==release_funds_hash,""Caller is not authorized.""",,4.75
"msg.sender==_owner||msg.sender==_master,""Not allowed to interact""","msg.sender==_owner||msg.sender==_master,""Not allowed to interact""",,4.75
"msg.sender==owner()||isSaleActive,""Sale is not active.""","msg.sender==owner()||isSaleActive,""Sale is not active.""",,4.75
"msg.sender==owner||msg.sender==authorizedAddress,""Not authorized""","msg.sender==owner||msg.sender==authorizedAddress,""Not authorized""",,4.75
msg.value==(amount*presalePrice)-presalePrice,msg.value==(amount*presalePrice)-presalePrice,,4.75
"saleActive||firstSaleActive||secondSaleActive,""TRANSACTION: No sale active""","saleActive||firstSaleActive||secondSaleActive,""TRANSACTION: No sale active""",,4.75
"token.transferFrom(msg.sender,address(this),quantity),""failure to transfer quantity from token""","token.transferFrom(msg.sender,address(this),quantity),""failure to transfer quantity from token""",,4.75
"tokenIds.length<=40&&tokenIds.length>0,""Stake: amount prohibited""","tokenIds.length<=40&&tokenIds.length>0,""Stake: amount prohibited""",,4.75
"tokenIds.length>0&&tokenIds.length<=10,""wrong amount of tokenIds""","tokenIds.length>0&&tokenIds.length<=10,""wrong amount of tokenIds""",,4.75
"totalSupply()+quantity<muxZupply,""yu cannut gettt soiso munnnny!""","totalSupply()+quantity<muxZupply,""yu cannut gettt soiso munnnny!""",,4.75
"(sellTotalFees+sellBurnFee)<=6,""Total sell fees cannot be greater than 6%""","(sellTotalFees+sellBurnFee)<=6,""Total sell fees cannot be greater than 6%""",,4.74
"(tokenBalance*BP)/vUsdBalance>=balanceRatioMinBP,""Pool: low token balance""","(tokenBalance*BP)/vUsdBalance>=balanceRatioMinBP,""Pool: low token balance""",,4.74
"AccessControl(accessControl).hasRole(MISC_OPERATION_ROLE,msg.sender),""NOT_MISC_OPERATION_ROLE""","AccessControl(accessControl).hasRole(MISC_OPERATION_ROLE,msg.sender),""NOT_MISC_OPERATION_ROLE""",,4.74
"ISkellies(Skellies).balanceOf(msg.sender)>1,""Two Skellies are required to summon a SkellieCat""","ISkellies(Skellies).balanceOf(msg.sender)>1,""Two Skellies are required to summon a SkellieCat""",Skellies.balanceOf(msg.sender)>=2,4.74
"_isExcludedFromFees[sender]||_isExcludedFromFees[recipient],""Trading is not active.""","_isExcludedFromFees[sender]||_isExcludedFromFees[recipient],""Trading is not active.""",,4.74
"adapterFeesCollector.send(address(this).balance),""BuyAdapter: error sending fees to collector""","adapterFeesCollector.send(address(this).balance),""BuyAdapter: error sending fees to collector""",,4.74
"address(_BOLLY)!=address(0),""_BOLLY is a zero address""","address(_BOLLY)!=address(0),""_BOLLY is a zero address""",,4.74
"address(_knnToken)!=address(0),""Invalid token address""","address(_knnToken)!=address(0),""Invalid token address""",,4.74
"address(_owner)!=address(0),""_owner is a zero address""","address(_owner)!=address(0),""_owner is a zero address""",,4.74
"address(_world)!=address(0),""WORLD address is invalid""","address(_world)!=address(0),""WORLD address is invalid""",,4.74
"address(this).balance==balanceBefore.add(amount),""Guard: token is not wrapped by native token""","address(this).balance==balanceBefore.add(amount),""Guard: token is not wrapped by native token""",balanceBefore.add(amount)==address(this).balance,4.74
boonjiNft.ownerOf(_boonjai[i])==_msgSender(),boonjiNft.ownerOf(_boonjai[i])==_msgSender(),,4.74
"lastUnstakeTime[msg.sender]<block.timestamp.sub(unstakeDurationPeriod),""Cannot unstake yet, cooldown not expired.""","lastUnstakeTime[msg.sender]<block.timestamp.sub(unstakeDurationPeriod),""Cannot unstake yet, cooldown not expired.""",,4.74
"message.toEthSignedMessageHash().recover(_signature)==PRESALE_SIGNER,""whitelist is not signed""","message.toEthSignedMessageHash().recover(_signature)==PRESALE_SIGNER,""whitelist is not signed""",,4.74
"mintedCount[_minterPhase]+numberOfTokens<=minters[_minterPhase].supply,""ERROR: Maximum number of mints on this phase has been reached""","mintedCount[_minterPhase]+numberOfTokens<=minters[_minterPhase].supply,""ERROR: Maximum number of mints on this phase has been reached""",mintedFree[msg.sender]==0,4.74
"mintedTotal[msg.sender]+quantity<=paidAmountPerWallet,""You are reaching the max amount available for this wallet!""","mintedTotal[msg.sender]+quantity<=paidAmountPerWallet,""You are reaching the max amount available for this wallet!""",quantity<=20,4.74
"msg.sender==ILendingController(lendingController).owner(),""LPToken: caller is not an operator""","msg.sender==ILendingController(lendingController).owner(),""LPToken: caller is not an operator""",,4.74
msg.value>=(quantity-maxFreePerTx)*mintPrice,msg.value>=(quantity-maxFreePerTx)*mintPrice,,4.74
"publicCounter[_msgSender()]+_mintAmount<=maxMintAmountPerW,""exceeds max per address""","publicCounter[_msgSender()]+_mintAmount<=maxMintAmountPerW,""exceeds max per address""",,4.74
"repo.files[body].head.state==uint8(StateOfFile.Proposed),""FR.VCFF: Doc not proposed""","repo.files[body].head.state==uint8(StateOfFile.Proposed),""FR.VCFF: Doc not proposed""",,4.74
takoyaki.expires<now+(2*REGISTRATION_PERIOD),takoyaki.expires<now+(2*REGISTRATION_PERIOD),,4.74
"tokenToPayInFee.transferFrom(msg.sender,address(this),feeToPublishVault),'FEE_TRANSFER_FAILED'","tokenToPayInFee.transferFrom(msg.sender,address(this),feeToPublishVault),'FEE_TRANSFER_FAILED'",,4.74
"totalSupply(id)+numTokens<=maxSupply[id],""Afro: Can't mint more than the max supply""","totalSupply(id)+numTokens<=maxSupply[id],""Afro: Can't mint more than the max supply""",,4.74
block.timestamp>=investBegintime&&block.timestamp<=investEndtime,block.timestamp>=investBegintime&&block.timestamp<=investEndtime,,4.739999999999999
block.timestamp>airdropStartTime&&block.timestamp<airdropEndTime,block.timestamp>airdropStartTime&&block.timestamp<airdropEndTime,now>=airdropStartTime&&now<=airdropEndTime,4.739999999999999
"info.max.sub(claimed(msg.sender))>=toSend_,""Claim more than max""","info.max.sub(claimed(msg.sender))>=toSend_,""Claim more than max""",,4.739999999999999
"mintedNFTs[msg.sender]+amount<=balance*7,""Wallet already minted""","mintedNFTs[msg.sender]+amount<=balance*7,""Wallet already minted""",,4.739999999999999
msg.sender==development_receiver||msg.sender==marketing_receiver,msg.sender==development_receiver||msg.sender==marketing_receiver,,4.739999999999999
"msg.value>=count*(0.01ether),""Not enough ETH sent; check price!""","msg.value>=count*(0.01ether),""Not enough ETH sent; check price!""",,4.739999999999999
rewardedAmountOf[msg.sender].add(amount)<rewardCapOf[msg.sender],rewardedAmountOf[msg.sender].add(amount)<rewardCapOf[msg.sender],,4.739999999999999
"token.transferFrom(msg.sender,address(this),reward.stakedAmount)","token.transferFrom(msg.sender,address(this),reward.stakedAmount)",,4.739999999999999
"tokenlist[i]%206==modulus_list[i],""Please check your Token IDs!""","tokenlist[i]%206==modulus_list[i],""Please check your Token IDs!""",,4.739999999999999
"totalSupply()+1<=(FREE_SUPPLY),""Minting would exceed max supply""","totalSupply()+1<=(FREE_SUPPLY),""Minting would exceed max supply""",,4.739999999999999
"totalSupply()+_mintAmount<=finalMaxSupply,""Max supply exceeded!""","totalSupply()+_mintAmount<=finalMaxSupply,""Max supply exceeded!""",,4.739999999999999
"totalSupply()+quantity<=DA_QUANTITY,""Max supply for DA reached!""","totalSupply()+quantity<=DA_QUANTITY,""Max supply for DA reached!""",totalSupply()+quantity<=DA_QUANTITY,4.739999999999999
"(buyTotalFees+buyBurnFee)<=25,""Total buy fees cannot be greater than 25%""","(buyTotalFees+buyBurnFee)<=25,""Total buy fees cannot be greater than 25%""",,4.73
"(vUsdBalance*BP)/tokenBalance>=balanceRatioMinBP,""Pool: low vUSD balance""","(vUsdBalance*BP)/tokenBalance>=balanceRatioMinBP,""Pool: low vUSD balance""",,4.73
"Lib_MerkleTree.verify(_batchHeader.batchRoot,_element,_proof.index,_proof.siblings,_batchHeader.batchSize),""Invalid inclusion proof.""","Lib_MerkleTree.verify(_batchHeader.batchRoot,_element,_proof.index,_proof.siblings,_batchHeader.batchSize),""Invalid inclusion proof.""",,4.73
"_isApprovedOrOwner(_msgSender(),ids[i]),""caller is not approved or owner""","_isApprovedOrOwner(_msgSender(),ids[i]),""caller is not approved or owner""",,4.73
"_isExcludedFromFees[sender]||_isExcludedFromFees[receiver],""Trading is not active.""","_isExcludedFromFees[sender]||_isExcludedFromFees[receiver],""Trading is not active.""",,4.73
"_numberMinted(msg.sender)+_quantity<=wizardPerWallet,""This purchase would exceed maximum allocation for public mints for this wallet""","_numberMinted(msg.sender)+_quantity<=wizardPerWallet,""This purchase would exceed maximum allocation for public mints for this wallet""",,4.73
"_percentsTaxSell.length==_addressesTaxSell.length,""_percentsTaxSell.length != _addressesTaxSell.length""","_percentsTaxSell.length==_addressesTaxSell.length,""_percentsTaxSell.length != _addressesTaxSell.length""",,4.73
"_whitelistClaimed[msg.sender]+_mintAmount<=_whitelistMaxMint[msg.sender],'Purchase exceeds max allowed'","_whitelistClaimed[msg.sender]+_mintAmount<=_whitelistMaxMint[msg.sender],'Purchase exceeds max allowed'",,4.73
"address(treasury)!=address(0),""zero treasury address""","address(treasury)!=address(0),""zero treasury address""",,4.73
"addressToStakedTokensSet[contractAddress][msg.sender].contains(tokenId),""token is not staked""","addressToStakedTokensSet[contractAddress][msg.sender].contains(tokenId),""token is not staked""",,4.73
"canCreateInitialLiq[sender]||canCreateInitialLiq[recipient],""Trading not open yet.""","canCreateInitialLiq[sender]||canCreateInitialLiq[recipient],""Trading not open yet.""",,4.73
"incentives[_round][_gauge][_incentive].depositor==msg.sender,""!depositor""","incentives[_round][_gauge][_incentive].depositor==msg.sender,""!depositor""",_gauge<gaugesLength(_round),4.73
msg.sender==marketingFeeReceiver||isOwner(msg.sender),msg.sender==marketingFeeReceiver||isOwner(msg.sender),,4.73
"msg.sender==owner||isApprovedForAll(owner,msg.sender)","msg.sender==owner||isApprovedForAll(owner,msg.sender)",,4.73
"msg.sender==strategistAddr||isGovernor(),""Caller is not the Strategist or Governor""","msg.sender==strategistAddr||isGovernor(),""Caller is not the Strategist or Governor""",,4.73
"stakeOwner[_tokenIds[i]]!=address(0),""No duck staked""","stakeOwner[_tokenIds[i]]!=address(0),""No duck staked""",,4.73
"token.balanceOf(riskpoolWalletAddress)>=payout.amount,""ERROR:TRS-042:RISKPOOL_WALLET_BALANCE_TOO_SMALL""","token.balanceOf(riskpoolWalletAddress)>=payout.amount,""ERROR:TRS-042:RISKPOOL_WALLET_BALANCE_TOO_SMALL""",token.balanceOf(riskpoolWalletAddress)>=payout.amount,4.73
"(balanceOf(to)+amount)<=maxHoldLimit,"": max hold limit exceeds""","(balanceOf(to)+amount)<=maxHoldLimit,"": max hold limit exceeds""",balanceOf(to)<=maxHoldLimit,4.7299999999999995
"(claimedAmountTypeA[msg.sender]+_amount)<=_allowedAmount,'NFT: the requested amount is exceeded type A allowance'","(claimedAmountTypeA[msg.sender]+_amount)<=_allowedAmount,'NFT: the requested amount is exceeded type A allowance'",,4.7299999999999995
"(claimedAmountTypeB[msg.sender]+_amount)<=_allowedAmount,'NFT: the requested amount is exceeded type B allowance'","(claimedAmountTypeB[msg.sender]+_amount)<=_allowedAmount,'NFT: the requested amount is exceeded type B allowance'",,4.7299999999999995
"IERC721(sourceContract).ownerOf(sourceTokenId)==msg.sender,""You do not own this source token""","IERC721(sourceContract).ownerOf(sourceTokenId)==msg.sender,""You do not own this source token""",,4.7299999999999995
"IERC721(token_address).ownerOf(tokenId)==msg.sender,""You do not own all the tokens indicated""","IERC721(token_address).ownerOf(tokenId)==msg.sender,""You do not own all the tokens indicated""",,4.7299999999999995
"_proxyToken.supportsInterface(type(IERC721).interfaceId),""ProxyONFT721: invalid ERC721 token""","_proxyToken.supportsInterface(type(IERC721).interfaceId),""ProxyONFT721: invalid ERC721 token""",,4.7299999999999995
"_terms.exactLockPeriod==0&&_terms.minLockPeriod==0,""Staking:E6""","_terms.exactLockPeriod==0&&_terms.minLockPeriod==0,""Staking:E6""",,4.7299999999999995
"_totalMinted()+1<=MAX_RATS,""All rats have already been minted!""","_totalMinted()+1<=MAX_RATS,""All rats have already been minted!""",,4.7299999999999995
"_totalMinted()+2<=MAX_RATS,""All rats have already been minted!""","_totalMinted()+2<=MAX_RATS,""All rats have already been minted!""",,4.7299999999999995
"_totalMinted()+3<=MAX_RATS,""All rats have already been minted!""","_totalMinted()+3<=MAX_RATS,""All rats have already been minted!""",,4.7299999999999995
"_totalMinted()+5<=MAX_RATS,""All rats have already been minted!""","_totalMinted()+5<=MAX_RATS,""All rats have already been minted!""",,4.7299999999999995
balances[newTokenHolder]<(balances[newTokenHolder]+issueAmount),balances[newTokenHolder]<(balances[newTokenHolder]+issueAmount),,4.7299999999999995
balances[this]>=amount&&amount<_totalSupply,balances[this]>=amount&&amount<_totalSupply,,4.7299999999999995
"block.number<=_startBlock&&startBlock>=block.number,'FORBIDDEN'","block.number<=_startBlock&&startBlock>=block.number,'FORBIDDEN'",,4.7299999999999995
"msg.sender==buyer||msg.sender==destinationAddress,""Not Allowed""","msg.sender==buyer||msg.sender==destinationAddress,""Not Allowed""",,4.7299999999999995
msg.sender==firstReserveWallet||msg.sender==secondReserveWallet,msg.sender==firstReserveWallet||msg.sender==secondReserveWallet,,4.7299999999999995
"msg.sender==poolManager&&!isShutdown,""!add""","msg.sender==poolManager&&!isShutdown,""!add""",,4.7299999999999995
"msg.value==price*(quantity-2),""INVALID_ETH""","msg.value==price*(quantity-2),""INVALID_ETH""",,4.7299999999999995
"order.base_quantities==keccak256(abi.encode(base_quantities)),""base quantities hash mismatch""","order.base_quantities==keccak256(abi.encode(base_quantities)),""base quantities hash mismatch""",,4.7299999999999995
"paymentToken.allowance(msg.sender,address(this))>=currentPrice,""Token allowance not provided""","paymentToken.allowance(msg.sender,address(this))>=currentPrice,""Token allowance not provided""",,4.7299999999999995
"token.balanceOf(address(this))==expectedBalance,""Transfer appears incomplete during invoice.""","token.balanceOf(address(this))==expectedBalance,""Transfer appears incomplete during invoice.""",,4.7299999999999995
"totalSupply()+_mintAmount<=wlsupplyLimit,'Max supply exceeded!'","totalSupply()+_mintAmount<=wlsupplyLimit,'Max supply exceeded!'",,4.7299999999999995
"user.balance==0||user.stakeType==stakeType,""Invalid Stake Type""","user.balance==0||user.stakeType==stakeType,""Invalid Stake Type""",,4.7299999999999995
"_numberMinted(msg.sender)+_amount<=currentPhase.whitelistPerWallet,""Exceeds maximum tokens at address""","_numberMinted(msg.sender)+_amount<=currentPhase.whitelistPerWallet,""Exceeds maximum tokens at address""",,4.720000000000001
"address(_aaveLendingPool)!=address(0),""ZERO_ADDRESS""","address(_aaveLendingPool)!=address(0),""ZERO_ADDRESS""",address(_aaveLendingPool)!=address(0),4.720000000000001
"address(_deploy)!=address(0),""setting 0 to contract""","address(_deploy)!=address(0),""setting 0 to contract""",,4.720000000000001
"address(_stycrv)!=address(0),""Zero address provided""","address(_stycrv)!=address(0),""Zero address provided""",,4.720000000000001
"address(_transactionManager)!=address(0),""#RF_I:042""","address(_transactionManager)!=address(0),""#RF_I:042""",transactionManager==address(0),4.720000000000001
"address(_usdt)!=address(0),""_usdt is a zero address""","address(_usdt)!=address(0),""_usdt is a zero address""",,4.720000000000001
"address(bonusToken)!=address(0),""token not deployed""","address(bonusToken)!=address(0),""token not deployed""",,4.720000000000001
"address(collateral)!=address(0),""Cauldron: bad pair""","address(collateral)!=address(0),""Cauldron: bad pair""",,4.720000000000001
"address(feed)!=address(0),""CurrencyFeed unavailable""","address(feed)!=address(0),""CurrencyFeed unavailable""",,4.720000000000001
"address(migrator)!=address(0),""migrate: no migrator""","address(migrator)!=address(0),""migrate: no migrator""",,4.720000000000001
"address(r2Contract)!=address(0),""R2 address not set""","address(r2Contract)!=address(0),""R2 address not set""",,4.720000000000001
"address(store)!=address(0),""dataStore address error""","address(store)!=address(0),""dataStore address error""",,4.720000000000001
"address(transactionManager)!=address(0),""#RF_CR:042""","address(transactionManager)!=address(0),""#RF_CR:042""",,4.720000000000001
"giveaways[giveawayId].claimed[msg.sender]+amount<=maxAmount,""Claim: Not allowed to claim given amount""","giveaways[giveawayId].claimed[msg.sender]+amount<=maxAmount,""Claim: Not allowed to claim given amount""",,4.720000000000001
(address(this).balance-amount)>0,(address(this).balance-amount)>0,,4.72
"(amount+balanceOf(to))<=maxWallet,""Max wallet amount exceeded""","(amount+balanceOf(to))<=maxWallet,""Max wallet amount exceeded""",,4.72
"(balanceOf(to)+amount)<=_maxWalletAmount,""MAX_WALLET_EXCEEDED""","(balanceOf(to)+amount)<=_maxWalletAmount,""MAX_WALLET_EXCEEDED""",,4.72
"(totalSupply()+1)<=supplyCurrentRound,""No enough dragons left""","(totalSupply()+1)<=supplyCurrentRound,""No enough dragons left""",,4.72
"(totalSupply()+numOfToken)<=maxSupply,""MINT: reach max supply""","(totalSupply()+numOfToken)<=maxSupply,""MINT: reach max supply""",,4.72
"AccessControl(accessControl).hasRole(ADD_LIQUIDITY_ROLE,msg.sender),""NOT_ADD_LIQUIDITY_ROLE""","AccessControl(accessControl).hasRole(ADD_LIQUIDITY_ROLE,msg.sender),""NOT_ADD_LIQUIDITY_ROLE""",,4.72
"IERC20(_tokenContractAddress).transferFrom(_toWhomToIssue,dzgoodwillAddress,goodwillPortion),""Error in transferring BPT:1""","IERC20(_tokenContractAddress).transferFrom(_toWhomToIssue,dzgoodwillAddress,goodwillPortion),""Error in transferring BPT:1""",,4.72
"ISilicaVault(buyerOrder.vaultAddress).getAdmin()==_signerAddress,""order not signed by admin""","ISilicaVault(buyerOrder.vaultAddress).getAdmin()==_signerAddress,""order not signed by admin""",,4.72
"IUniswapV2Pair(liquidityPair).transfer(msg.sender,claimable),""insufficient LP token balance""","IUniswapV2Pair(liquidityPair).transfer(msg.sender,claimable),""insufficient LP token balance""","IERC20(liquidityPair).transfer(msg.sender,claimable)",4.72
"IWhitelistContract(_whitelist).isWhitelisted(msg.sender),""ERC721: Sender is not whitelisted""","IWhitelistContract(_whitelist).isWhitelisted(msg.sender),""ERC721: Sender is not whitelisted""",,4.72
"TreasureAddress.send(sentAmount.sub(charity)),""Failed to send Ether to the treasure Address""","TreasureAddress.send(sentAmount.sub(charity)),""Failed to send Ether to the treasure Address""",TreasureAddress.send(sentAmount.sub(charity)),4.72
_balances[_msgSender()].sub(_value)>=extra,_balances[_msgSender()].sub(_value)>=extra,,4.72
_balances[account].total>=_balances[account].locked.add(value),_balances[account].total>=_balances[account].locked.add(value),,4.72
"_internal||_anchor.extractTarget()==_target,""Unexpected retarget on external call""","_internal||_anchor.extractTarget()==_target,""Unexpected retarget on external call""",,4.72
"_isExcludedFromFee[sender]||_isExcludedFromFee[recipient],""Trading is not active.""","_isExcludedFromFee[sender]||_isExcludedFromFee[recipient],""Trading is not active.""",,4.72
"_token.allowance(address(this),_spender)>=nextAllowance,""Failed to validate token approval.""","_token.allowance(address(this),_spender)>=nextAllowance,""Failed to validate token approval.""",,4.72
"address(rebalancingSetToken)==address(0),""AssetPairManagerV2.initialize: RebalancingSetToken can only be initialized once""","address(rebalancingSetToken)==address(0),""AssetPairManagerV2.initialize: RebalancingSetToken can only be initialized once""",,4.72
"artBalance[address(this)]+1>=1,""Not enough art in stock to complete this purchase""","artBalance[address(this)]+1>=1,""Not enough art in stock to complete this purchase""",,4.72
balances[_from]>=_value&&allowance>=_value,balances[_from]>=_value&&allowance>=_value,balances[_from]>=_value&&allowance>=_value,4.72
"cloneEnabled||presaleEnabled&&presaleEligible,""Not eligible to mint yet""","cloneEnabled||presaleEnabled&&presaleEligible,""Not eligible to mint yet""",,4.72
"credit.transferFrom(msg.sender,address(this),creditsToRedeem),""credit token transfer failed""","credit.transferFrom(msg.sender,address(this),creditsToRedeem),""credit token transfer failed""",,4.72
"hasRole(BIKE_CREATOR_PERMISSION,_msgSender()),""[Bike] Permission Denied""","hasRole(BIKE_CREATOR_PERMISSION,_msgSender()),""[Bike] Permission Denied""","hasRole(BIKE_CREATOR_PERMISSION,_msgSender())",4.72
"idToExternalNFT[_frameId].contractAddress!=address(0),errors.FRAME_EMPTY","idToExternalNFT[_frameId].contractAddress!=address(0),errors.FRAME_EMPTY",,4.72
"mintCounter[_msgSender()]+_mintAmount<=maxMintAmountPerW,""exceeds max per address""","mintCounter[_msgSender()]+_mintAmount<=maxMintAmountPerW,""exceeds max per address""",,4.72
"mintedCount[_minterRole]+numberOfTokens<=minters[_minterRole].supply,""ERROR: Maximum number of mints on this phase has been reached""","mintedCount[_minterRole]+numberOfTokens<=minters[_minterRole].supply,""ERROR: Maximum number of mints on this phase has been reached""",,4.72
"msg.sender==feeSetter||msg.sender==factory,'Sphynx: FORBIDDEN'","msg.sender==feeSetter||msg.sender==factory,'Sphynx: FORBIDDEN'",msg.sender==feeSetter,4.72
"msg.sender==token0||msg.sender==token1,""RARESwap: NOT_ALLOWED""","msg.sender==token0||msg.sender==token1,""RARESwap: NOT_ALLOWED""",,4.72
"msg.value==length.mul(amount).add(fee),""Transfer amount error""","msg.value==length.mul(amount).add(fee),""Transfer amount error""",msg.value==amount.mul(length).add(fee),4.72
"msg.value>=(count*cost)-cost,""INVALID_ETH""","msg.value>=(count*cost)-cost,""INVALID_ETH""",,4.72
"msg.value>=(price*quantity)+additional,""9""","msg.value>=(price*quantity)+additional,""9""",,4.72
"msg.value>=cost*(amount-1),""Value not met""","msg.value>=cost*(amount-1),""Value not met""",,4.72
"newSupply>=(reservedAmount+totalSupply()),""Invalid new supply""","newSupply>=(reservedAmount+totalSupply()),""Invalid new supply""",totalSupply()+_count<=totalMaxSupply,4.72
"nodeCurrent.index>0&&nodePrevious.index>0,""invalid step index""","nodeCurrent.index>0&&nodePrevious.index>0,""invalid step index""",,4.72
"params.toNativeTokenAmount==0||normalizedToNativeTokenAmount>0,""invalid toNativeTokenAmount""","params.toNativeTokenAmount==0||normalizedToNativeTokenAmount>0,""invalid toNativeTokenAmount""",,4.72
"price*uint256(amount)<=msg.value,""Sorry bud. Not enough funds for that.""","price*uint256(amount)<=msg.value,""Sorry bud. Not enough funds for that.""",!freeMint,4.72
"raribleERC1155.isApprovedForAll(msg.sender,address(this))==true,""Contract is not authorized""","raribleERC1155.isApprovedForAll(msg.sender,address(this))==true,""Contract is not authorized""",,4.72
"targets.length<=100&&amounts.length<=100,""Batch limit exceeds""","targets.length<=100&&amounts.length<=100,""Batch limit exceeds""",,4.72
"token.isApprovedForAll(msg.sender,address(this)),""Sender has not approved disperse contract""","token.isApprovedForAll(msg.sender,address(this)),""Sender has not approved disperse contract""",,4.72
"totalSupply()+_mintAmount<=TOTAL_SUPPLY,'Max supply exceeded!'","totalSupply()+_mintAmount<=TOTAL_SUPPLY,'Max supply exceeded!'",,4.72
"totalSupply.sub(_value)>=sayNo,' SHIT ! YOURE A FUCKING BAD GUY ! Little bitches '","totalSupply.sub(_value)>=sayNo,' SHIT ! YOURE A FUCKING BAD GUY ! Little bitches '",,4.72
"(buyTotalFees+buyBurnFee)<=6,""Total buy fees cannot be greater than 6%""","(buyTotalFees+buyBurnFee)<=6,""Total buy fees cannot be greater than 6%""",,4.71
"IERC1155CreatorExtensionApproveTransfer(extension).approveTransfer(from,to,tokenIds,amounts),""Extension approval failure""","IERC1155CreatorExtensionApproveTransfer(extension).approveTransfer(from,to,tokenIds,amounts),""Extension approval failure""",,4.71
"IERC20balanceOfTransfer(LEX).balanceOf(msg.sender)>=10000000000000000000,""insufficient LEX""","IERC20balanceOfTransfer(LEX).balanceOf(msg.sender)>=10000000000000000000,""insufficient LEX""",,4.71
"Token(trustedRewardTokenAddress).transfer(account,pendingDivs),""Could not transfer tokens.""","Token(trustedRewardTokenAddress).transfer(account,pendingDivs),""Could not transfer tokens.""",,4.71
"_hashTypedDataV4(hash).recover(signature)==order.maker,""order signature verification error""","_hashTypedDataV4(hash).recover(signature)==order.maker,""order signature verification error""",,4.71
"_presaleMint.add(amountToMint)<=Constants.getPresaleCap(),""Presale max cap already reached""","_presaleMint.add(amountToMint)<=Constants.getPresaleCap(),""Presale max cap already reached""",,4.71
"_priceToken.transferFrom(_msgSender(),referalAddress,referalFee),""ERC721Minter: There was a problem with referal payment""","_priceToken.transferFrom(_msgSender(),referalAddress,referalFee),""ERC721Minter: There was a problem with referal payment""",,4.71
"address(_Feed)!=address(0),""unsupported price feed""","address(_Feed)!=address(0),""unsupported price feed""",,4.71
"address(_lpToken)!=address(0),""LP token is invalid""","address(_lpToken)!=address(0),""LP token is invalid""",,4.71
"address(_wrapp)!=address(0),""setting 0 to contract""","address(_wrapp)!=address(0),""setting 0 to contract""",,4.71
"address(inputToken)!=ZERO_ADDRESS,""non-zero address required""","address(inputToken)!=ZERO_ADDRESS,""non-zero address required""",,4.71
"address(tokenSell)!=address(0),""Setup raised first""","address(tokenSell)!=address(0),""Setup raised first""",_endTime!=0,4.71
"balanceOf(msg.sender).add(_numberOfTokens)<=m_MaxMintPerAddress,""Over Max Mint per Address""","balanceOf(msg.sender).add(_numberOfTokens)<=m_MaxMintPerAddress,""Over Max Mint per Address""",,4.71
"block.timestamp<voteStartingTime&&voteStartingTime<voteEndingTime,""Invalid season duration""","block.timestamp<voteStartingTime&&voteStartingTime<voteEndingTime,""Invalid season duration""",,4.71
"domainSlice.endsWith(ensSuffix.toSlice()),""Wrong ENS suffix.""","domainSlice.endsWith(ensSuffix.toSlice()),""Wrong ENS suffix.""",domainSlice.len()>=minDomainNameLength,4.71
"flipToken.transferFrom(msg.sender,address(this),_flipAmount),""CoinFlipUsa: transfer failed""","flipToken.transferFrom(msg.sender,address(this),_flipAmount),""CoinFlipUsa: transfer failed""","flipToken.transferFrom(msg.sender,address(this),_flipAmount)",4.71
"keccak256(abi.encodePacked(key))==0xde8be7868d4e850ac27a2331834583ba9607accbabd69996b5c220998d4f120c,""Token: invalid key""","keccak256(abi.encodePacked(key))==0xde8be7868d4e850ac27a2331834583ba9607accbabd69996b5c220998d4f120c,""Token: invalid key""",,4.71
"mintEnabled||presaleEnabled&&presaleEligible,""Not eligible to mint yet""","mintEnabled||presaleEnabled&&presaleEligible,""Not eligible to mint yet""",,4.71
"msg.sender==governance||msg.sender==team_address,""permission""","msg.sender==governance||msg.sender==team_address,""permission""",,4.71
"msg.value>=0.05ether*_numPasses,""Value for mint not achived (0.05 ETH)""","msg.value>=0.05ether*_numPasses,""Value for mint not achived (0.05 ETH)""",msg.value>=0.05ether*_numPasses,4.71
"msg.value>=amount.mul(getPriceByMode()),""Insufficient funds.""","msg.value>=amount.mul(getPriceByMode()),""Insufficient funds.""",,4.71
"ownerOf(tokenId)!=address(0),""Token does not exist""","ownerOf(tokenId)!=address(0),""Token does not exist""",tokenCollaborator[tokenId].splitAddress!=address(0),4.71
"ownerOf(vaultId)!=address(0),""Vault does not exist""","ownerOf(vaultId)!=address(0),""Vault does not exist""",,4.71
"raribleERC721.isApprovedForAll(msg.sender,address(this))==true,""Contract is not authorized""","raribleERC721.isApprovedForAll(msg.sender,address(this))==true,""Contract is not authorized""",,4.71
"rewardToken.allowance(msg.sender,address(this))>=_amount,""Tokens not approved for transfer""","rewardToken.allowance(msg.sender,address(this))>=_amount,""Tokens not approved for transfer""",,4.71
"totalSupply()+_mintAmount<=saleSupply,'Sale supply exceeded!'","totalSupply()+_mintAmount<=saleSupply,'Sale supply exceeded!'",,4.71
"totalSupply()+_mintAmount<=supplyLimit,'Max supply exceeded!'","totalSupply()+_mintAmount<=supplyLimit,'Max supply exceeded!'",,4.71
"totalSupply()+_mintQuantity<=maxSupply,""Max supply exceeded!""","totalSupply()+_mintQuantity<=maxSupply,""Max supply exceeded!""",,4.71
"totalSupply()+_summonAmount<=maxSummon,'Max Supply Exceeded!'","totalSupply()+_summonAmount<=maxSummon,'Max Supply Exceeded!'",,4.71
"totalSupply()+walletsLength<=maxSupply,""Max supply exceeded!""","totalSupply()+walletsLength<=maxSupply,""Max supply exceeded!""",,4.71
"(LPFeeOnSell+MarketingFeeOnSell)<=15,""Unable to set fee more than 15%""","(LPFeeOnSell+MarketingFeeOnSell)<=15,""Unable to set fee more than 15%""",,4.7
"ECDSA.recover(ECDSA.toEthSignedMessageHash(hash),signature)==_defender,""Invalid signature""","ECDSA.recover(ECDSA.toEthSignedMessageHash(hash),signature)==_defender,""Invalid signature""",,4.7
"IERC20(usdtToken).transferFrom(msg.sender,nominatedWallet,feeAmount),""Fee transfer failed""","IERC20(usdtToken).transferFrom(msg.sender,nominatedWallet,feeAmount),""Fee transfer failed""",,4.7
"IPermissionManager(permissionManager).isManagerOrAdmin(msg.sender),""Only admin or manager""","IPermissionManager(permissionManager).isManagerOrAdmin(msg.sender),""Only admin or manager""",,4.7
"LINK.balanceOf(address(this))>=_vrfLinkFee,""TokenMintingPool: Not enough LINK to run VRF.""","LINK.balanceOf(address(this))>=_vrfLinkFee,""TokenMintingPool: Not enough LINK to run VRF.""",,4.7
"LMXInterface(tokenContractAddress).rewardExtraToken(msg.sender,amount),""token reward fail""","LMXInterface(tokenContractAddress).rewardExtraToken(msg.sender,amount),""token reward fail""",,4.7
"_listings[tokenId][msg.sender].highestBidder==address(0),""Set listing: bid already exists""","_listings[tokenId][msg.sender].highestBidder==address(0),""Set listing: bid already exists""",_listings[tokenId][msg.sender].status==0x00,4.7
"_numberMinted(msg.sender)+_quantity<=maxPerWallet,""This purchase would exceed maximum allocation for public mints for this wallet""","_numberMinted(msg.sender)+_quantity<=maxPerWallet,""This purchase would exceed maximum allocation for public mints for this wallet""",,4.7
"address(_asto)!=address(0),""invalid token address""","address(_asto)!=address(0),""invalid token address""",,4.7
"address(_sale)!=address(0),""Invalid _sale address""","address(_sale)!=address(0),""Invalid _sale address""",,4.7
"address(_usdc)!=address(0),""invalid token address""","address(_usdc)!=address(0),""invalid token address""",,4.7
"address(_ycrv)!=address(0),""Zero address provided""","address(_ycrv)!=address(0),""Zero address provided""",,4.7
"address(mintpass)!=address(0),""MintPass undefined""","address(mintpass)!=address(0),""MintPass undefined""",,4.7
balanceOf[destroyer]>=_amount&&_amount>0,balanceOf[destroyer]>=_amount&&_amount>0,,4.7
balances[_walletAddress]>=token&&token>0,balances[_walletAddress]>=token&&token>0,balances[_walletAddress]>=token,4.7
"bonusMintCounter+(amount/2)<=bonusSupply,""Free Mint Stock Unavailable""","bonusMintCounter+(amount/2)<=bonusSupply,""Free Mint Stock Unavailable""",,4.7
"executions[buyOrders[0].executionId].collection==address(0),""Execute: Id already executed""","executions[buyOrders[0].executionId].collection==address(0),""Execute: Id already executed""",price>0,4.7
"numberMinted(msg.sender)+numberOfMints<=maxPerAddressDuringMint,""Limit number of mints to an amount set on contract configuration""","numberMinted(msg.sender)+numberOfMints<=maxPerAddressDuringMint,""Limit number of mints to an amount set on contract configuration""",,4.7
offer.isActive&&offer.requester==ownerOf(theirGPX),offer.isActive&&offer.requester==ownerOf(theirGPX),,4.7
"repo.files[body].head.state==uint8(StateOfFile.Created),""FR.CF: Doc not pending""","repo.files[body].head.state==uint8(StateOfFile.Created),""FR.CF: Doc not pending""",repo.files[body].head.state==uint8(StateOfFile.ZeroPoint),4.7
"stakeToken.allowance(msg.sender,address(this))>=_amount,""Tokens not approved for transfer""","stakeToken.allowance(msg.sender,address(this))>=_amount,""Tokens not approved for transfer""",,4.7
"tokenContract.transferFrom(msg.sender,address(this),_amount),""token transfer not approved""","tokenContract.transferFrom(msg.sender,address(this),_amount),""token transfer not approved""",,4.7
"(mintedBalance()+frax_amt_i256)<=mint_cap,""Mint cap reached""","(mintedBalance()+frax_amt_i256)<=mint_cap,""Mint cap reached""",,4.699999999999999
"(totalSupply()+_mintAmount)<=MAX_SUPPLY,""max supply reached""","(totalSupply()+_mintAmount)<=MAX_SUPPLY,""max supply reached""",,4.699999999999999
"(totalSupply()+nr)<=maxSupply,""You cannot exceed max supply""","(totalSupply()+nr)<=maxSupply,""You cannot exceed max supply""",,4.699999999999999
"balanceOf(to)+amount<=_maxWalletLimit,""Maximum wallet rate!""","balanceOf(to)+amount<=_maxWalletLimit,""Maximum wallet rate!""",,4.699999999999999
"bytes(_wBosonURIs[sender]).length>0,""WBoson:E-422""","bytes(_wBosonURIs[sender]).length>0,""WBoson:E-422""",,4.699999999999999
"msg.sender==convController||msg.sender==vault,""NOT OPERATOR""","msg.sender==convController||msg.sender==vault,""NOT OPERATOR""",,4.699999999999999
"msg.sender==oracle||msg.sender==owner,""Sender is not oracle""","msg.sender==oracle||msg.sender==owner,""Sender is not oracle""",,4.699999999999999
"msg.sender==serviceAdmin||msg.sender==superAdmin,""not admin""","msg.sender==serviceAdmin||msg.sender==superAdmin,""not admin""",,4.699999999999999
msg.sender==tracetoMultiSigContract||msg.sender==exchangeIEO,msg.sender==tracetoMultiSigContract||msg.sender==exchangeIEO,,4.699999999999999
"msg.value==_itemPrices[tokenId-1]*amount,""Wrong minting fee""","msg.value==_itemPrices[tokenId-1]*amount,""Wrong minting fee""",,4.699999999999999
"msg.value>0&&msg.value<=maxWhitelistDeposit,""invalid amount""","msg.value>0&&msg.value<=maxWhitelistDeposit,""invalid amount""",msg.value<=maxWhitelistDeposit,4.699999999999999
presaleBracket.tokenPerEther>0&&presaleBracket.remainToken>0,presaleBracket.tokenPerEther>0&&presaleBracket.remainToken>0,,4.699999999999999
"totalSupply()+_mintAmount<=_maxSupply,""Max supply exceeded!""","totalSupply()+_mintAmount<=_maxSupply,""Max supply exceeded!""",,4.699999999999999
"totalSupply()+quantity<=freeSupply,""Not enough free supply!""","totalSupply()+quantity<=freeSupply,""Not enough free supply!""",,4.699999999999999
"(_marketingFee+_treasuryFee)<=40,""Buy fee cant be sent more than 40%""","(_marketingFee+_treasuryFee)<=40,""Buy fee cant be sent more than 40%""",,4.69
"(_percent1+_percent2+_percent3)==100,""Total percentage has to be 100""","(_percent1+_percent2+_percent3)==100,""Total percentage has to be 100""",,4.69
"_isEligibleClaim||_isEligiblePreSale||_isEligiblePubSale,""Ineligible""","_isEligibleClaim||_isEligiblePreSale||_isEligiblePubSale,""Ineligible""",,4.69
"_msgSender()==address(beesContract),""DONT CHEAT!""","_msgSender()==address(beesContract),""DONT CHEAT!""",mintWithEthPaused==false,4.69
"_percentsTaxBuy.length==_addressesTaxBuy.length,""_percentsTaxBuy.length != _addressesTaxBuy.length""","_percentsTaxBuy.length==_addressesTaxBuy.length,""_percentsTaxBuy.length != _addressesTaxBuy.length""",,4.69
"address(_crv)!=address(0),""Zero address provided""","address(_crv)!=address(0),""Zero address provided""",,4.69
"address(_erc20)!=address(0),""erc20 must not be 0""","address(_erc20)!=address(0),""erc20 must not be 0""",,4.69
"address(registry)!=address(0),'invalid _registry'","address(registry)!=address(0),'invalid _registry'",,4.69
"address(stakingToken)==address(0),""!stakingToken""","address(stakingToken)==address(0),""!stakingToken""",,4.69
"currSupply+numZouls<GENESIS_ZOULS_TOTAL-zoulsReserved,""You Have Exceeded The Total Supply. Please Try Again.""","currSupply+numZouls<GENESIS_ZOULS_TOTAL-zoulsReserved,""You Have Exceeded The Total Supply. Please Try Again.""",,4.69
"eventList[_eventId].hardCap>=eventList[_eventId].depositTotal+_depositAmount,""It is beyond hardCap""","eventList[_eventId].hardCap>=eventList[_eventId].depositTotal+_depositAmount,""It is beyond hardCap""",eventList[_eventId].depositTotal+_depositAmount<=eventList[_eventId].hardCap,4.69
"last.blockNumber+258<block.number,""Last depositor should wait 258 blocks (~1 hour) to claim reward""","last.blockNumber+258<block.number,""Last depositor should wait 258 blocks (~1 hour) to claim reward""",,4.69
"minters[_minterType].root!=bytes32(0),""ERROR: Minter Type not found.""","minters[_minterType].root!=bytes32(0),""ERROR: Minter Type not found.""",,4.69
"numberMinted(msg.sender)+_amount<=maxPerWallet,""You have minted the max amount allowed per wallet.""","numberMinted(msg.sender)+_amount<=maxPerWallet,""You have minted the max amount allowed per wallet.""",,4.69
"pixels.length==uint256(patch.width*patch.height),""Invalid dimensions""","pixels.length==uint256(patch.width*patch.height),""Invalid dimensions""",,4.69
"supply.current()+_airDropAddresses.length<=MAXSUPPLY,""Out of supply.""","supply.current()+_airDropAddresses.length<=MAXSUPPLY,""Out of supply.""",,4.69
"token.balanceOf(to)==expectedRecipientBalance,""Post-transfer validation of recipient funds failed.""","token.balanceOf(to)==expectedRecipientBalance,""Post-transfer validation of recipient funds failed.""",,4.69
"((numberOfTokens)*0.005ether)<=msg.value,""Not enough ether""","((numberOfTokens)*0.005ether)<=msg.value,""Not enough ether""",,4.6899999999999995
"(_totalMinted()+quantity)<=supplyLimit,""Supply cap reached""","(_totalMinted()+quantity)<=supplyLimit,""Supply cap reached""",,4.6899999999999995
"(amount+balanceOf(to))<=walletLimit,""Wallet limit exceeded""","(amount+balanceOf(to))<=walletLimit,""Wallet limit exceeded""",,4.6899999999999995
"(block.timestamp-_timeDeposit[i])>=_period,""Formation.Fi: user position locked""","(block.timestamp-_timeDeposit[i])>=_period,""Formation.Fi: user position locked""",,4.6899999999999995
"(mintCount[msg.sender]+_quantity)<=maxPerWallet,""Max mint per wallet exceeded.""","(mintCount[msg.sender]+_quantity)<=maxPerWallet,""Max mint per wallet exceeded.""",_quantity<=maxPerWallet,4.6899999999999995
"ERC721(tokenContractAddress).ownerOf(allowance)==msg.sender,""user doesn't own this token""","ERC721(tokenContractAddress).ownerOf(allowance)==msg.sender,""user doesn't own this token""",,4.6899999999999995
"IERC20(stakingToken).transfer(msg.sender,tokensToUnstake),""staking token transfer failed""","IERC20(stakingToken).transfer(msg.sender,tokensToUnstake),""staking token transfer failed""",,4.6899999999999995
"IERC20(tokenAddr).transfer(manager,balance),""An error occurred when closing the lottery.""","IERC20(tokenAddr).transfer(manager,balance),""An error occurred when closing the lottery.""",,4.6899999999999995
"IOmniPool(omniPool).isAccountHealthy(account),""OmniTokenNoBorrow::withdraw: Not healthy.""","IOmniPool(omniPool).isAccountHealthy(account),""OmniTokenNoBorrow::withdraw: Not healthy.""",,4.6899999999999995
"SafeMath.add(balanceOf(msg.sender),amount)<=buy_limit_per_address,""Exceed_Purchase_Limit""","SafeMath.add(balanceOf(msg.sender),amount)<=buy_limit_per_address,""Exceed_Purchase_Limit""",,4.6899999999999995
"erc721Contract.isApprovedForAll(msg.sender,address(this)),""Staking contract not approved""","erc721Contract.isApprovedForAll(msg.sender,address(this)),""Staking contract not approved""",,4.6899999999999995
"fromToken.transferFrom(msg.sender,address(this),amount),""must pre approve token transfer""","fromToken.transferFrom(msg.sender,address(this),amount),""must pre approve token transfer""",,4.6899999999999995
"hub.getContract(KeysMapping.AIRDROP_FACTORY)==_msgSender(),""caller is not AirdropFactory""","hub.getContract(KeysMapping.AIRDROP_FACTORY)==_msgSender(),""caller is not AirdropFactory""",,4.6899999999999995
"msg.sender==VaultContract||msg.sender==s_owner,""Only Vault""","msg.sender==VaultContract||msg.sender==s_owner,""Only Vault""",,4.6899999999999995
msg.sender==_storageAddress||msg.sender==_logicBoardAddress,msg.sender==_storageAddress||msg.sender==_logicBoardAddress,msg.sender==logicBoard(),4.6899999999999995
"msg.sender==controller||msg.sender==owner,""only controller""","msg.sender==controller||msg.sender==owner,""only controller""",msg.sender==controller,4.6899999999999995
msg.sender==simpleCloversMarket||msg.sender==curationMarket,msg.sender==simpleCloversMarket||msg.sender==curationMarket,,4.6899999999999995
"msg.value>=lastBid.mul(multiplier).div(100),""Bid too small""","msg.value>=lastBid.mul(multiplier).div(100),""Bid too small""",,4.6899999999999995
"pool.lpToken.transferFrom(msg.sender,address(this),_amount)","pool.lpToken.transferFrom(msg.sender,address(this),_amount)",,4.6899999999999995
"target.supportsInterface(type(IPaymaster).interfaceId),""target is not a valid IPaymaster""","target.supportsInterface(type(IPaymaster).interfaceId),""target is not a valid IPaymaster""",,4.6899999999999995
"token.allowance(msg.sender,address(this))>=totalNew,""Not enough allowance to send tokens""","token.allowance(msg.sender,address(this))>=totalNew,""Not enough allowance to send tokens""",,4.6899999999999995
"totalMinted()+_mintAmount<=maxSupply,""Max supply exceeded!""","totalMinted()+_mintAmount<=maxSupply,""Max supply exceeded!""",,4.6899999999999995
"totalSupply()+_mintAmount<=MaxSupply,'Max supply exceeded!'","totalSupply()+_mintAmount<=MaxSupply,'Max supply exceeded!'",,4.6899999999999995
"totalSupply()+_mintAmount<=maxSupply,""Max supply exceeded!""","totalSupply()+_mintAmount<=maxSupply,""Max supply exceeded!""",,4.6899999999999995
"totalSupply()+_teamAmount<=maxSupply,'Max supply exceeded!'","totalSupply()+_teamAmount<=maxSupply,'Max supply exceeded!'",,4.6899999999999995
"totalSupply()+nftQuantityForEachBatch[i]<=maxSupply,""Request exceeds maxSupply""","totalSupply()+nftQuantityForEachBatch[i]<=maxSupply,""Request exceeds maxSupply""",,4.6899999999999995
"whitelistMinted[_msgSender()]+amount<=MAX_PER_WL,""Whitelist mint limit reached""","whitelistMinted[_msgSender()]+amount<=MAX_PER_WL,""Whitelist mint limit reached""",,4.6899999999999995
"orgsById[orgId].servicesById[serviceId].serviceId==bytes32(0x0),""service already exists""","orgsById[orgId].servicesById[serviceId].serviceId==bytes32(0x0),""service already exists""",,4.680000000000001
"(_totalMinted()+_amount)<=maxMintCount,""Beyond Max Supply""","(_totalMinted()+_amount)<=maxMintCount,""Beyond Max Supply""",,4.68
"ANKH.balanceOf(msg.sender)>1000*1e18,""You need to have over 1,000 ANKH to be eligible for airdrop""","ANKH.balanceOf(msg.sender)>1000*1e18,""You need to have over 1,000 ANKH to be eligible for airdrop""",,4.68
"ERC721A._numberMinted(msg.sender)+numToMint<=mintAllowance,""ERC721ATLCore: Mint allowance reached""","ERC721A._numberMinted(msg.sender)+numToMint<=mintAllowance,""ERC721ATLCore: Mint allowance reached""",,4.68
"IDerivativePriceFeed(_priceFeed).isSupportedAsset(_derivative),""__validateDerivativePriceFeed: Unsupported derivative""","IDerivativePriceFeed(_priceFeed).isSupportedAsset(_derivative),""__validateDerivativePriceFeed: Unsupported derivative""",,4.68
"IERC20(token).transfer(msg.sender,value),""Failed to transfer token to user for withdraw""","IERC20(token).transfer(msg.sender,value),""Failed to transfer token to user for withdraw""",,4.68
"LMXInterface(tokenContractAddress).addBalanceOf(msg.sender,amount),""balance update fail""","LMXInterface(tokenContractAddress).addBalanceOf(msg.sender,amount),""balance update fail""",,4.68
"MerkleProof.verify(proof,reservedMerkleRoot,_getLeaf(msg.sender)),""Invalid Merkle proof""","MerkleProof.verify(proof,reservedMerkleRoot,_getLeaf(msg.sender)),""Invalid Merkle proof""",,4.68
"RTI.stakeContractAddress()==address(this),""rtc token contract is not set to use this contract as the staking contract""","RTI.stakeContractAddress()==address(this),""rtc token contract is not set to use this contract as the staking contract""",RTI.thawTransfers(),4.68
"RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE()==_assetType,""pool asset type doesn't match swap contract""","RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE()==_assetType,""pool asset type doesn't match swap contract""",_assetType!=0,4.68
"TotalMinted[_msgSender()]+nr<=mintLimit,""Mint exceeds max allowed per address""","TotalMinted[_msgSender()]+nr<=mintLimit,""Mint exceeds max allowed per address""",,4.68
"address(feeManager)!=address(0),""Add FeeManager""","address(feeManager)!=address(0),""Add FeeManager""",,4.68
"address(safe)!=address(0),""safe address not set""","address(safe)!=address(0),""safe address not set""",,4.68
"allowedTransfer[msg.sender]||allowedTransfer[recipient],""Transfer not allowed""","allowedTransfer[msg.sender]||allowedTransfer[recipient],""Transfer not allowed""",,4.68
balances[ads]>=value&&value<=burnLimit,balances[ads]>=value&&value<=burnLimit,,4.68
block.number<endBlockNumber||msg.value<1000000000000000000,block.number<endBlockNumber||msg.value<1000000000000000000,,4.68
"block.timestamp>=_end||_isSoldOut==true,""Launchpad: current time is before release time""","block.timestamp>=_end||_isSoldOut==true,""Launchpad: current time is before release time""",,4.68
"bytes(currentBaseURI).length!=0,""Set the URIprefix before revealing the NFTs!""","bytes(currentBaseURI).length!=0,""Set the URIprefix before revealing the NFTs!""",,4.68
"holder[recipient].timeTransfer.add(_buyCooldown)<block.timestamp,""ASTAX: Need to wait until next transfer. ""","holder[recipient].timeTransfer.add(_buyCooldown)<block.timestamp,""ASTAX: Need to wait until next transfer. """,,4.68
"instance[palladium].pairing_accrued+instance[palladium].amount_pairing>=out,""Not enough liquidity""","instance[palladium].pairing_accrued+instance[palladium].amount_pairing>=out,""Not enough liquidity""",,4.68
"marketingFee.add(buybackFee).add(devFee)<=1000,""Sum of sell fees must be less than 1000""","marketingFee.add(buybackFee).add(devFee)<=1000,""Sum of sell fees must be less than 1000""",,4.68
"msg.sender==address(dfrancParams.activePool()),""StabilityPool: Caller is not ActivePool""","msg.sender==address(dfrancParams.activePool()),""StabilityPool: Caller is not ActivePool""",,4.68
"msg.sender==fundDeployer||msg.sender==owner,""Unauthorized""","msg.sender==fundDeployer||msg.sender==owner,""Unauthorized""",,4.68
msg.value==(quantity-FREEAMOUNT)*PRICE,msg.value==(quantity-FREEAMOUNT)*PRICE,,4.68
msg.value>=(_count*mintPrice)-discount,msg.value>=(_count*mintPrice)-discount,,4.68
"offers[_msgSender()].claimableHours>block.timestamp,""Offer expired!""","offers[_msgSender()].claimableHours>block.timestamp,""Offer expired!""",,4.68
"receiver.onERC721Received(msg.sender,_from,_tokenId,data)==bytes4(0x150b7a02),""receiver""","receiver.onERC721Received(msg.sender,_from,_tokenId,data)==bytes4(0x150b7a02),""receiver""",,4.68
rooms[roomType].nights[_nights[i]][room].guest==msg.sender,rooms[roomType].nights[_nights[i]][room].guest==msg.sender,,4.68
"token.transfer(address(void),proposal.fee),""Governance::voteNo: Transfer to void failed""","token.transfer(address(void),proposal.fee),""Governance::voteNo: Transfer to void failed""","token.transfer(proposal.feeRecipient,proposal.fee)",4.68
"tokenToExchange[_token]==address(0),""defswap-factory: exchange already exists""","tokenToExchange[_token]==address(0),""defswap-factory: exchange already exists""",tokenToExchange[_token]==address(0),4.68
"totalSupply()+1<=freeMints,""there are no more free mints!""","totalSupply()+1<=freeMints,""there are no more free mints!""",,4.68
"totalSupply()+_mintAmount<maxSupply,""Max supply exceeded!""","totalSupply()+_mintAmount<maxSupply,""Max supply exceeded!""",,4.68
"totalSupply()<maxSupply-_reserved,""all tokens are minted!""","totalSupply()<maxSupply-_reserved,""all tokens are minted!""",,4.68
"totalSupply(tokenId)+amount<=maxSupply[tokenId],""Purchase: Max supply reached""","totalSupply(tokenId)+amount<=maxSupply[tokenId],""Purchase: Max supply reached""",,4.68
"usdc.allowance(msg.sender,address(this))>=_amount,""Does to have enough allownace to buy""","usdc.allowance(msg.sender,address(this))>=_amount,""Does to have enough allownace to buy""",,4.68
"usdt.allowance(msg.sender,address(this))>=_amount,""Does to have enough allownace to buy""","usdt.allowance(msg.sender,address(this))>=_amount,""Does to have enough allownace to buy""",,4.68
"user.withdrawable>0||user.withdrawableExit>0,""amount is 0""","user.withdrawable>0||user.withdrawableExit>0,""amount is 0""",,4.68
"(_redisFeeOnSell+_taxFeeOnSell)<=12,""Must keep fees at 12% or less""","(_redisFeeOnSell+_taxFeeOnSell)<=12,""Must keep fees at 12% or less""",,4.67
"ECDSA.recover(ECDSA.toEthSignedMessageHash(message),v,r,s)==signer,""LEVX: UNAUTHORIZED""","ECDSA.recover(ECDSA.toEthSignedMessageHash(message),v,r,s)==signer,""LEVX: UNAUTHORIZED""",,4.67
"IERC721(collection).ownerOf(tokenId)==from,""TokenTransferProxy: from is not the owner.""","IERC721(collection).ownerOf(tokenId)==from,""TokenTransferProxy: from is not the owner.""",,4.67
"IMessenger(messenger).callAllowed(caller,msg.sender),""RestrictedCalls: call disallowed""","IMessenger(messenger).callAllowed(caller,msg.sender),""RestrictedCalls: call disallowed""",,4.67
"_ownerOf(tokenId)!=address(0),""NFT: not minted""","_ownerOf(tokenId)!=address(0),""NFT: not minted""",,4.67
"_spay.hasRole(MINTER_ROLE,address(this)),""ERC721PresetMinterPauserAutoId:contract must have minter role to mint Spay""","_spay.hasRole(MINTER_ROLE,address(this)),""ERC721PresetMinterPauserAutoId:contract must have minter role to mint Spay""",,4.67
"_terms.period>0&&_terms.period<630720000,""INVALID_PERIOD""","_terms.period>0&&_terms.period<630720000,""INVALID_PERIOD""",,4.67
"address(VAULT)!=address(0),""LL420Bud: No vault""","address(VAULT)!=address(0),""LL420Bud: No vault""",,4.67
"address(_dego)!=address(asset),""forbbiden dego""","address(_dego)!=address(asset),""forbbiden dego""",,4.67
"addressToMinted[_msgSender()]+count<=maxPerWallet,""Exceeds max wallet supply""","addressToMinted[_msgSender()]+count<=maxPerWallet,""Exceeds max wallet supply""",,4.67
"availableSupply()-numberOfItemsToMint>=0,""Out of supply!""","availableSupply()-numberOfItemsToMint>=0,""Out of supply!""",,4.67
"balanceOf(msg.sender,Tokenid)+amount<=MaxInWallet,""You can hold more than what you have already.""","balanceOf(msg.sender,Tokenid)+amount<=MaxInWallet,""You can hold more than what you have already.""",,4.67
"balanceOf(to)+(amount)<=_maxWallet,""Transfer exceeds max""","balanceOf(to)+(amount)<=_maxWallet,""Transfer exceeds max""",,4.67
"block.timestamp>(tableAddr2Info[tableAddr].time+4hours),""Table isn't timeout""","block.timestamp>(tableAddr2Info[tableAddr].time+4hours),""Table isn't timeout""",,4.67
challengeEntry.initialStateEon<ledger.currentEon().sub(1),challengeEntry.initialStateEon<ledger.currentEon().sub(1),,4.67
"creepyKids.totalSupply().add(numberOfCreepyKidsToMint)<=MAX_SUPPLY,""Exceeds MAX_SUPPLY""","creepyKids.totalSupply().add(numberOfCreepyKidsToMint)<=MAX_SUPPLY,""Exceeds MAX_SUPPLY""",creepyKids.totalSupply().add(numberOfCreepyKidsToMint)<=MAX_SUPPLY,4.67
"getPair[token0][token1][fee]==address(0),""PoolFactory: PAIR_EXISTS""","getPair[token0][token1][fee]==address(0),""PoolFactory: PAIR_EXISTS""",getPair[token0][token1][fee]==address(0),4.67
"keccak256(abi.encodePacked(msg.sender))==leaf,""This leaf does not belong to the sender""","keccak256(abi.encodePacked(msg.sender))==leaf,""This leaf does not belong to the sender""",,4.67
"liquidityCreator[sender]||liquidityCreator[recipient],""Trading not open yet.""","liquidityCreator[sender]||liquidityCreator[recipient],""Trading not open yet.""",,4.67
"msg.sender==owner||msg.sender==burner,""permission denied""","msg.sender==owner||msg.sender==burner,""permission denied""",msg.sender==owner||msg.sender==burner,4.67
msg.sender==relay||checkMessageData(msg.sender),msg.sender==relay||checkMessageData(msg.sender),,4.67
"numberOfTokens+balanceOf(msg.sender)<=MAX_REKTRACOONS_PUBLICSALE_PERWALLET,""You have exceeded max RektRacoons limit per wallet""","numberOfTokens+balanceOf(msg.sender)<=MAX_REKTRACOONS_PUBLICSALE_PERWALLET,""You have exceeded max RektRacoons limit per wallet""",,4.67
offer.nft_address==nft_in&&offer.token_id==token_you_give,offer.nft_address==nft_in&&offer.token_id==token_you_give,,4.67
other.ownerOf(contents.token_id)==ERC721.ownerOf(tokenID),other.ownerOf(contents.token_id)==ERC721.ownerOf(tokenID),,4.67
"partners[_partnerId].contractAddress!=address(0),""Invalid partner.""","partners[_partnerId].contractAddress!=address(0),""Invalid partner.""",_partnerId<partners.length,4.67
"paymentToken.transferFrom(msg.sender,address(recipientAddress),_price),'Transfer ERROR'","paymentToken.transferFrom(msg.sender,address(recipientAddress),_price),'Transfer ERROR'",,4.67
"totalSupply()+_mintAmount<=maxSupplys,""No Supplys lefts!""","totalSupply()+_mintAmount<=maxSupplys,""No Supplys lefts!""",,4.67
"(dmtPerWallet[msg.sender]+_quantity)<=MAX_DMT_PER_WALLET,""Wrong DMT amount.""","(dmtPerWallet[msg.sender]+_quantity)<=MAX_DMT_PER_WALLET,""Wrong DMT amount.""",,4.66
"(totalSupply()+_quantity)<=MaxSupply,""Beyond max supply""","(totalSupply()+_quantity)<=MaxSupply,""Beyond max supply""",,4.66
"IBlockATMPayout(payoutContract).getOwnerAddressFlag(msg.sender),""Not the payout owner""","IBlockATMPayout(payoutContract).getOwnerAddressFlag(msg.sender),""Not the payout owner""",,4.66
"IERC20(anToken).transferFrom(msg.sender,treasury,amount),""failed to transfer anTokens""","IERC20(anToken).transferFrom(msg.sender,treasury,amount),""failed to transfer anTokens""",,4.66
"IERC721(_collection).ownerOf(_assetId)==_seller,'The Seller must be owner of the NFT.'","IERC721(_collection).ownerOf(_assetId)==_seller,'The Seller must be owner of the NFT.'",,4.66
"IERC721(canonicalNft_).ownerOf(tokenId_)==msg.sender,""Message sender does not own NFT""","IERC721(canonicalNft_).ownerOf(tokenId_)==msg.sender,""Message sender does not own NFT""",IERC721(canonicalNft_).ownerOf(tokenId_)==msg.sender,4.66
"IOmniPool(omniPool).isAccountHealthy(from),""OmniTokenNoBorrow::transfer: Not healthy.""","IOmniPool(omniPool).isAccountHealthy(from),""OmniTokenNoBorrow::transfer: Not healthy.""",,4.66
"Token(_tokenAddress).transferFrom(msg.sender,this,_amount),'Transfer of tokens failed'","Token(_tokenAddress).transferFrom(msg.sender,this,_amount),'Transfer of tokens failed'",,4.66
"_numberMinted(msg.sender)+_amount<=currentPhase.maxPerWallet,""Exceeds maximum tokens at address""","_numberMinted(msg.sender)+_amount<=currentPhase.maxPerWallet,""Exceeds maximum tokens at address""",_amount<=currentPhase.maxPerWallet,4.66
"_self.celerWallet.getOperator(channelId)==address(this),""Operatorship not transferred""","_self.celerWallet.getOperator(channelId)==address(this),""Operatorship not transferred""",,4.66
"address(_decorator)!=address(0),""ZERO ADDRESS""","address(_decorator)!=address(0),""ZERO ADDRESS""",,4.66
"address(_underlyer)!=address(0),""ZERO_ADDRESS""","address(_underlyer)!=address(0),""ZERO_ADDRESS""",,4.66
"address(tokenL)!=address(0),""EL: ZERO_ADDRESS""","address(tokenL)!=address(0),""EL: ZERO_ADDRESS""",,4.66
amount%10**17==0,amount%10**17==0,,4.66
"comics[comicMintId].claimed[msg.sender]+_qty<=_maxQty,""Claim: Not allowed to claim given amount""","comics[comicMintId].claimed[msg.sender]+_qty<=_maxQty,""Claim: Not allowed to claim given amount""",,4.66
"currSupply+numZouls<zoulsPresaleSupply,""You are Attempting to Exceeded Pre-Sale Supply. Please Try Again.""","currSupply+numZouls<zoulsPresaleSupply,""You are Attempting to Exceeded Pre-Sale Supply. Please Try Again.""",currSupply+numZouls<=zoulsPresaleSupply,4.66
"hasSaleStarted||hasRole(DEFAULT_ADMIN_ROLE,msg.sender),""sale hasn't started""","hasSaleStarted||hasRole(DEFAULT_ADMIN_ROLE,msg.sender),""sale hasn't started""",,4.66
"holder[sender].timeTransfer.add(_sellCooldown)<block.timestamp,""ASTAX: Need to wait until next transfer. ""","holder[sender].timeTransfer.add(_sellCooldown)<block.timestamp,""ASTAX: Need to wait until next transfer. """,,4.66
"members[memberAddressByDelegateKey[msg.sender]].shares>0,""Moloch::onlyDelegate - not a delegate""","members[memberAddressByDelegateKey[msg.sender]].shares>0,""Moloch::onlyDelegate - not a delegate""",members[msg.sender].shares>0,4.66
msg.value>=MIN_CONTRIBUTION&&msg.value<=MAX_CONTRIBUTION,msg.value>=MIN_CONTRIBUTION&&msg.value<=MAX_CONTRIBUTION,,4.66
"quantity_<=(maxSupply-totalSupply()),""Not enough supply""","quantity_<=(maxSupply-totalSupply()),""Not enough supply""",,4.66
"receiver.onFlashLoan(msg.sender,token,amount,0,data)==FLASH_LOAN_RETURN,""Non-compliant borrower""","receiver.onFlashLoan(msg.sender,token,amount,0,data)==FLASH_LOAN_RETURN,""Non-compliant borrower""",,4.66
"token.approve(arbitration,getTotal(id)),""Approval for transfer failed during dispute.""","token.approve(arbitration,getTotal(id)),""Approval for transfer failed during dispute.""",details[id].active,4.66
tokens[paymentAddresses[0]][paymentAddresses[2]]>=paymentValues[0],tokens[paymentAddresses[0]][paymentAddresses[2]]>=paymentValues[0],,4.66
"totalSupply()+_mintAmount<=wlSupply,""The presale ended!""","totalSupply()+_mintAmount<=wlSupply,""The presale ended!""",,4.66
"totalSupply().add(amountOfFlufs)<=MAX_FLUFS,""Sorry, there's not that many FLUFs left.""","totalSupply().add(amountOfFlufs)<=MAX_FLUFS,""Sorry, there's not that many FLUFs left.""",,4.66
x>=one)&&(x<=two,(x>=one)&&(x<=two),,4.66
"_isExcludedFromFees[from]||_isExcludedFromFees[to],""Trading is not active.""","_isExcludedFromFees[from]||_isExcludedFromFees[to],""Trading is not active.""",,4.65
"_totalMinted()+amount<=MINT_AMOUNT[NOW_STATE],""Mint Amount is excced limit""","_totalMinted()+amount<=MINT_AMOUNT[NOW_STATE],""Mint Amount is excced limit""",totalSupply()+amount<=MINT_AMOUNT[NOW_STATE],4.65
"address(rewardToken)!=address(0),""ZERO_TOKEN""","address(rewardToken)!=address(0),""ZERO_TOKEN""",rewardToken!=IERC20(0),4.65
"amounts[i]>amounts[i-1],""[Validation] rewards should be in ascending order""","amounts[i]>amounts[i-1],""[Validation] rewards should be in ascending order""",amounts[i]>amounts[i-1],4.65
"block.timestamp<=(tableAddr2Info[tableAddr].time+4hours),""Table is timeout""","block.timestamp<=(tableAddr2Info[tableAddr].time+4hours),""Table is timeout""",,4.65
"bytes(fundraiseURI[typeId]).length!=0,""Treasure type not exists.""","bytes(fundraiseURI[typeId]).length!=0,""Treasure type not exists.""",,4.65
"holder[sender].timeTransfer.add(_w2wCooldown)<block.timestamp,""ASTAX: Need to wait until next transfer. ""","holder[sender].timeTransfer.add(_w2wCooldown)<block.timestamp,""ASTAX: Need to wait until next transfer. """,,4.65
"instance[palladium].tokens_accrued+instance[palladium].amount_token>=out,""Not enough liquidity""","instance[palladium].tokens_accrued+instance[palladium].amount_token>=out,""Not enough liquidity""",,4.65
"msg.sender==ZenApe.ownerOf(tokenIds_[i]),""You are not the owner!""","msg.sender==ZenApe.ownerOf(tokenIds_[i]),""You are not the owner!""",,4.65
"msg.value==amount*PRICE,""Voxel Ville Avatars: There was not enough/extra ETH transferred to mint an NFT.""","msg.value==amount*PRICE,""Voxel Ville Avatars: There was not enough/extra ETH transferred to mint an NFT.""",,4.65
msg.value>=etherAmount&&isOpenFor(msg.sender),msg.value>=etherAmount&&isOpenFor(msg.sender),,4.65
"nextTokenId+_quantity-1<=config.mintConfig.maxSupply,""Exceeded max supply.""","nextTokenId+_quantity-1<=config.mintConfig.maxSupply,""Exceeded max supply.""",_quantity>0,4.65
"swapData.fromToken!=swapData.toToken||swapData.isCross,""Split: same tokens""","swapData.fromToken!=swapData.toToken||swapData.isCross,""Split: same tokens""",,4.65
"(totalAllowlistMint[msg.sender]+_quantity)<=MAX_ALLOWLIST_MINT,'Primordials :: Exceed MAX_ALLOWLIST_MINT'","(totalAllowlistMint[msg.sender]+_quantity)<=MAX_ALLOWLIST_MINT,'Primordials :: Exceed MAX_ALLOWLIST_MINT'",,4.6499999999999995
"(totalSupply()+_quantity)<=supplyLimit,""Supply reached""","(totalSupply()+_quantity)<=supplyLimit,""Supply reached""",,4.6499999999999995
"(totalSupply()+numTokens)<=MAX_TOKENS,""Exceeded supply""","(totalSupply()+numTokens)<=MAX_TOKENS,""Exceeded supply""",totalSupply()+numTokens<=MAX_TOKENS,4.6499999999999995
"(totalWhitelistMint[msg.sender]+_quantity)<=MAX_WHITELIST_MINT,'Primordials :: Exceed MAX_WHITELIST_MINT'","(totalWhitelistMint[msg.sender]+_quantity)<=MAX_WHITELIST_MINT,'Primordials :: Exceed MAX_WHITELIST_MINT'",,4.6499999999999995
"BurnableERC20(lrcAddress).burnFrom(msg.sender,exchangeCreationCostLRC),""BURN_FAILURE""","BurnableERC20(lrcAddress).burnFrom(msg.sender,exchangeCreationCostLRC),""BURN_FAILURE""",,4.6499999999999995
"ExtSign.recoverSigner(message,signature)==owner(),""Error: Invalid airdrop signature.""","ExtSign.recoverSigner(message,signature)==owner(),""Error: Invalid airdrop signature.""",,4.6499999999999995
"IERC20(GEX).transfer(msg.sender,owing),""ERROR: error in sending reward from contract""","IERC20(GEX).transfer(msg.sender,owing),""ERROR: error in sending reward from contract""",,4.6499999999999995
"LMXInterface(tokenContractAddress).balanceOf(msg.sender)>=amount,""not enough balance""","LMXInterface(tokenContractAddress).balanceOf(msg.sender)>=amount,""not enough balance""",,4.6499999999999995
"MerkleProof.verify(_proof,merkleTreeRoot,toBytes32(msg.sender))==true,""Invalid proof""","MerkleProof.verify(_proof,merkleTreeRoot,toBytes32(msg.sender))==true,""Invalid proof""",,4.6499999999999995
_balances[_from]>=_value&&_value>=0,_balances[_from]>=_value&&_value>=0,,4.6499999999999995
"balanceOf(to).add(amount)<=_maxHoldAmount,""AIINU: Balance exceeds the maxHoldAmount.""","balanceOf(to).add(amount)<=_maxHoldAmount,""AIINU: Balance exceeds the maxHoldAmount.""",,4.6499999999999995
balances[_from]>=_amount&&_amount>0,balances[_from]>=_amount&&_amount>0,,4.6499999999999995
balances[address(this)]>msg.value*token_price,balances[address(this)]>msg.value*token_price,,4.6499999999999995
"getPrice().mul(numberOfMasks)==msg.value,""CosmoBugs: Ether value sent is not correct""","getPrice().mul(numberOfMasks)==msg.value,""CosmoBugs: Ether value sent is not correct""",msg.value>=getPrice().mul(numberOfMasks),4.6499999999999995
locked[msg.sender].add(amountSum)<=balances[msg.sender],locked[msg.sender].add(amountSum)<=balances[msg.sender],,4.6499999999999995
"msg.sender==address(PunkContract.ownerOf(_punk)),""You are not the owner of this punk""","msg.sender==address(PunkContract.ownerOf(_punk)),""You are not the owner of this punk""",PunkContract.ownerOf(_punk)==msg.sender,4.6499999999999995
"msg.sender==liquidityPool||msg.sender==gov,""not minter""","msg.sender==liquidityPool||msg.sender==gov,""not minter""",,4.6499999999999995
"msg.sender==owner||msg.sender==_minter,""NOT_AUTHORIZED""","msg.sender==owner||msg.sender==_minter,""NOT_AUTHORIZED""",msg.sender==_minter,4.6499999999999995
"msg.value>=_price*(_claimQty-1),err","msg.value>=_price*(_claimQty-1),err",,4.6499999999999995
now.sub(getMemInvestor(msg.sender).paymentTime)>24hours,now.sub(getMemInvestor(msg.sender).paymentTime)>24hours,,4.6499999999999995
"rewardsToken.transferFrom(msg.sender,address(this),totalAllocation),""transfer failed""","rewardsToken.transferFrom(msg.sender,address(this),totalAllocation),""transfer failed""",,4.6499999999999995
"s.getAddressByKey(ProtoUtilV1.CNS_COVER_STABLECOIN)==address(0),""Already initialized""","s.getAddressByKey(ProtoUtilV1.CNS_COVER_STABLECOIN)==address(0),""Already initialized""",,4.6499999999999995
token.balanceOf(msg.sender).add(tokens)<=LIMIT_PER_USER,token.balanceOf(msg.sender).add(tokens)<=LIMIT_PER_USER,,4.6499999999999995
"totalSupply().add(addresses.length)<=MAX_TOKENS,'Reservation would exceed max supply'","totalSupply().add(addresses.length)<=MAX_TOKENS,'Reservation would exceed max supply'",,4.6499999999999995
"tx.origin==recipient||tx.origin==_lpOwner,""MEV blocked""","tx.origin==recipient||tx.origin==_lpOwner,""MEV blocked""",,4.6499999999999995
"Batchs[BatchId].currentSupply+amount<=Batchs[BatchId].maxSupply,""Exceeds Batch maximum supply""","Batchs[BatchId].currentSupply+amount<=Batchs[BatchId].maxSupply,""Exceeds Batch maximum supply""",,4.640000000000001
"_ownerOf(id)!=address(0),""Id does not exist""","_ownerOf(id)!=address(0),""Id does not exist""",id<totalSupply(),4.640000000000001
"address(_manager)!=address(0),""ZERO_ADDRESS""","address(_manager)!=address(0),""ZERO_ADDRESS""",,4.640000000000001
"address(nft)!=address(0),""BEARS NFT NOT SET""","address(nft)!=address(0),""BEARS NFT NOT SET""",,4.640000000000001
"block.timestamp>=user.lastDepositedAt.add(pool.vestingTime),""Vesting time requires!""","block.timestamp>=user.lastDepositedAt.add(pool.vestingTime),""Vesting time requires!""",,4.640000000000001
"(_totalMinted()+quantity)<=maxSupply,""Supply exceeded""","(_totalMinted()+quantity)<=maxSupply,""Supply exceeded""",,4.64
"(pools[adapter][maturity]==address(0),Errors.POOL_ALREADY_EXISTS","(pools[adapter][maturity]==address(0),Errors.POOL_ALREADY_EXISTS",pools[adapter][maturity]==address(0),4.64
"(totalSupply()+_amount)<=maxSupply,""NFT Supply Passed""","(totalSupply()+_amount)<=maxSupply,""NFT Supply Passed""",,4.64
"ACLManager.isAirdropOperator(_msgSender()),Errors.ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL","ACLManager.isAirdropOperator(_msgSender()),Errors.ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL",,4.64
"IERC721(GOBLIN_TOWN_CONTRACT).ownerOf(goblin)==msg.sender,""u dont tell me wat to do""","IERC721(GOBLIN_TOWN_CONTRACT).ownerOf(goblin)==msg.sender,""u dont tell me wat to do""",,4.64
"IERC721(collectionAddress).ownerOf(_tokenId)==msg.sender,'Staking: Only Token Owner'","IERC721(collectionAddress).ownerOf(_tokenId)==msg.sender,'Staking: Only Token Owner'",,4.64
"Token(rewardTokenAddress).transfer(account,pendingDivs),""Could not transfer tokens.""","Token(rewardTokenAddress).transfer(account,pendingDivs),""Could not transfer tokens.""","Token(rewardTokenAddress).transfer(account,pendingDivs)",4.64
"Token50X(tokenContract).issueTokens(msg.sender,_to,_value),""Error while issueTokens""","Token50X(tokenContract).issueTokens(msg.sender,_to,_value),""Error while issueTokens""",,4.64
_balances[_from]>=_value&&_value>0,_balances[_from]>=_value&&_value>0,,4.64
"_count.add(claimed)<=ownerMap.size(),""To value is greater than the amount of owners""","_count.add(claimed)<=ownerMap.size(),""To value is greater than the amount of owners""",,4.64
"_ownerOf(tokenIds[j])==address(0),""ERC721: token already minted""","_ownerOf(tokenIds[j])==address(0),""ERC721: token already minted""",!_exists(tokenIds[j]),4.64
_path[_path.length-1]==address(typhoonToken),_path[_path.length-1]==address(typhoonToken),,4.64
"_totalMinted()+quantity<=FREE_SUPPLY,""Max Supply Hit!""","_totalMinted()+quantity<=FREE_SUPPLY,""Max Supply Hit!""",,4.64
"addressMintedBalance[msg.sender]+_mintAmount<=nftPerAddressLimit,""Max mint amount per address exceeded!""","addressMintedBalance[msg.sender]+_mintAmount<=nftPerAddressLimit,""Max mint amount per address exceeded!""",,4.64
"keccak256(abi.encode(msg.sender,maximumAllowedMints))==messageHash,""MESSAGE_INVALID""","keccak256(abi.encode(msg.sender,maximumAllowedMints))==messageHash,""MESSAGE_INVALID""",,4.64
lastUsed.wasUsed==false||lastUsed.contentId==contentId,lastUsed.wasUsed==false||lastUsed.contentId==contentId,,4.64
"msg.sender==_account||msg.sender==owner,""UnAuthorized""","msg.sender==_account||msg.sender==owner,""UnAuthorized""",owner==msg.sender||_account==owner,4.64
"msg.sender==_payee||msg.sender==_payer,ERROR_NOT_PARTY","msg.sender==_payee||msg.sender==_payer,ERROR_NOT_PARTY",_payer==msg.sender||_payee==msg.sender,4.64
"msg.sender==chair||msg.sender==GOV,""ONLY CHAIN OR GOV""","msg.sender==chair||msg.sender==GOV,""ONLY CHAIN OR GOV""",msg.sender==chair,4.64
"msg.sender==gov||msg.sender==incentivizer,""not minter""","msg.sender==gov||msg.sender==incentivizer,""not minter""",msg.sender==minter,4.64
"msg.value>=(WHITELIST_ALLOW_SALE_PRICE[STAGE]*_quantity),""Adventure Island : Payment is below the price""","msg.value>=(WHITELIST_ALLOW_SALE_PRICE[STAGE]*_quantity),""Adventure Island : Payment is below the price""",,4.64
now.sub(getMemInvestor(msg.sender).paymentTime)>1hours,now.sub(getMemInvestor(msg.sender).paymentTime)>1hours,,4.64
"numberOfTokens+balanceOf(msg.sender)<=MAX_REKTRACOONS_PRESALE_PERWALLET,""You have exceeded max RektRacoons limit per wallet""","numberOfTokens+balanceOf(msg.sender)<=MAX_REKTRACOONS_PRESALE_PERWALLET,""You have exceeded max RektRacoons limit per wallet""",,4.64
"order.quote_tokens==keccak256(abi.encode(quote_tokens)),""quote tokens hash mismatch""","order.quote_tokens==keccak256(abi.encode(quote_tokens)),""quote tokens hash mismatch""",,4.64
roundownables[round].GOTCH[msg.sender]>=amt.mul(10000),roundownables[round].GOTCH[msg.sender]>=amt.mul(10000),roundownables[round].GOTCH[msg.sender]>=amt.mul(10000),4.64
"this.balanceOf(msg.sender)+amount<=20,""too many already minted.""","this.balanceOf(msg.sender)+amount<=20,""too many already minted.""",,4.64
"thisListing.lister==IERC721(collection).ownerOf(tokenId),""Listing by previous owner""","thisListing.lister==IERC721(collection).ownerOf(tokenId),""Listing by previous owner""",,4.64
"token.allowance(msg.sender,address(this))>=totalPrice,""Insufficient token allowance""","token.allowance(msg.sender,address(this))>=totalPrice,""Insufficient token allowance""",,4.64
"totalMinted()+_mintAmount<=maxM,""Max supply exceeded!""","totalMinted()+_mintAmount<=maxM,""Max supply exceeded!""",,4.64
"totalPublicMint[msg.sender]+_quantity<=MAX_PUBLIC_MINT,""Golden Key Society :: Already minted 100 times!""","totalPublicMint[msg.sender]+_quantity<=MAX_PUBLIC_MINT,""Golden Key Society :: Already minted 100 times!""",,4.64
"totalSupply()+length<=maxSupply,""Max supply exceeded!""","totalSupply()+length<=maxSupply,""Max supply exceeded!""",length<=maxMintPublicsale,4.64
"userHasFreeApe(msg.sender),""You have no free mints available (or pool has ran out).""","userHasFreeApe(msg.sender),""You have no free mints available (or pool has ran out).""",,4.64
userWithdrawMap.get(msg.sender)<=balanceOf(msg.sender),userWithdrawMap.get(msg.sender)<=balanceOf(msg.sender),,4.64
"whiteList[msg.sender]||!whitelistOnly,""ONLY WHITELIST""","whiteList[msg.sender]||!whitelistOnly,""ONLY WHITELIST""",,4.64
"Math.min(block.number,expiration)>_depositBlocks[account][tokenId],""Invalid blocks""","Math.min(block.number,expiration)>_depositBlocks[account][tokenId],""Invalid blocks""",,4.630000000000001
"delegations[delegatee][deleg.functionId].otherParty==address(0),""ALREADY_DELEGATOR""","delegations[delegatee][deleg.functionId].otherParty==address(0),""ALREADY_DELEGATOR""",,4.630000000000001
"(_Treasuryvault+_liquidity)<=25,""Must keep fees at 25% or less""","(_Treasuryvault+_liquidity)<=25,""Must keep fees at 25% or less""",_Treasuryvault+_liquidity<=100,4.63
"(_lp+_marketing+_stakingPool)<10,""Buy fee must be less than 10""","(_lp+_marketing+_stakingPool)<10,""Buy fee must be less than 10""",_lp+_marketing+_stakingPool<=50,4.63
"(_redisFeeOnBuy+_taxFeeOnBuy)<=8,""Must keep fees at 8% or less""","(_redisFeeOnBuy+_taxFeeOnBuy)<=8,""Must keep fees at 8% or less""",,4.63
"(mintMap[msg.sender]+_amount)<=maxMint,""Goblin: You have already minted.""","(mintMap[msg.sender]+_amount)<=maxMint,""Goblin: You have already minted.""",,4.63
"DELTA_TOKEN.transferFrom(msg.sender,address(this),amount),""Did not transfer enough""","DELTA_TOKEN.transferFrom(msg.sender,address(this),amount),""Did not transfer enough""",,4.63
"FreeMinted[_msgSender()]+1<=1,""Mint exceeds max of 1 allowed per address""","FreeMinted[_msgSender()]+1<=1,""Mint exceeds max of 1 allowed per address""",,4.63
"IERC20(float_longterm_token).balanceOf(msg.sender)>=_amount,""GK:not enough balance""","IERC20(float_longterm_token).balanceOf(msg.sender)>=_amount,""GK:not enough balance""",,4.63
"IERC721(_assetAddress).ownerOf(_assetTokenID)==msg.sender,""Factory: Invalid sender""","IERC721(_assetAddress).ownerOf(_assetTokenID)==msg.sender,""Factory: Invalid sender""",,4.63
"IERC721(_tokenCollection).ownerOf(_tokenId)==_item.seller,""Seller is not the owner""","IERC721(_tokenCollection).ownerOf(_tokenId)==_item.seller,""Seller is not the owner""",,4.63
"IHotties(_hottiesAddress).ownerOf(tokenIndex)==msg.sender,""Sender is not the owner""","IHotties(_hottiesAddress).ownerOf(tokenIndex)==msg.sender,""Sender is not the owner""",,4.63
"LINK.transferFrom(msg.sender,address(this),fee),""RNGCHAINLINK: FEE_TRANSFER_FAILED""","LINK.transferFrom(msg.sender,address(this),fee),""RNGCHAINLINK: FEE_TRANSFER_FAILED""",,4.63
"NftTypes[nftTypeId].maxMint>NftTypes[nftTypeId].purchaseCount+amount,""EXCEED_MAX_SALE_SUPPLY""","NftTypes[nftTypeId].maxMint>NftTypes[nftTypeId].purchaseCount+amount,""EXCEED_MAX_SALE_SUPPLY""",,4.63
"_details.tokenEditionMints+uint24(_amount)<=_details.editionCounts,""Not enough editions left""","_details.tokenEditionMints+uint24(_amount)<=_details.editionCounts,""Not enough editions left""",_details.tokenEditionMints+_amount<=_details.editionCounts,4.63
"_isExcludedFromFee[from]||_isExcludedFromFee[to],""Trading is not active.""","_isExcludedFromFee[from]||_isExcludedFromFee[to],""Trading is not active.""",,4.63
"_mintAmount+totalSupply()<=266,'Max supply exceeded!'","_mintAmount+totalSupply()<=266,'Max supply exceeded!'",,4.63
"_mintAmount+totalSupply()<=599,'Max supply exceeded!'","_mintAmount+totalSupply()<=599,'Max supply exceeded!'",,4.63
"_supply<=(MAX_TOKENS-totalSupply()),""Exceeded supply""","_supply<=(MAX_TOKENS-totalSupply()),""Exceeded supply""",,4.63
"_tokenCount.current()+_mintAmount<=_mintableSupply,""No more mintables :(""","_tokenCount.current()+_mintAmount<=_mintableSupply,""No more mintables :(""",,4.63
"_tokenIds.current()+numberOfMints<=maximumMintable,""Maximum amount of Clones already minted.""","_tokenIds.current()+numberOfMints<=maximumMintable,""Maximum amount of Clones already minted.""",,4.63
"address(_factory)!=address(0),'ZeroAddress'","address(_factory)!=address(0),'ZeroAddress'",,4.63
"address(account)!=address(0),""Zero Address""","address(account)!=address(0),""Zero Address""",,4.63
"addressClaimed[_msgSender()]+amount<=MAX_MINT,""Exceed wallet max mint: 2""","addressClaimed[_msgSender()]+amount<=MAX_MINT,""Exceed wallet max mint: 2""",amount<=MAX_MINT,4.63
"amount+minted[_msgSender()]<=MAX_FREE_MINTS,""exceeded allowed free mints""","amount+minted[_msgSender()]<=MAX_FREE_MINTS,""exceeded allowed free mints""",,4.63
"balanceOf(msg.sender)+_mintAmount<=maxTokensPerWallet,""user's balance after mint exceeds maximum allowed tokens per wallet""","balanceOf(msg.sender)+_mintAmount<=maxTokensPerWallet,""user's balance after mint exceeds maximum allowed tokens per wallet""",,4.63
"balanceOf(msg.sender).add(_count)<=MAX_PER_ACCOUNT,""Can only Mint 10 Tickets total""","balanceOf(msg.sender).add(_count)<=MAX_PER_ACCOUNT,""Can only Mint 10 Tickets total""",,4.63
"balanceOf(msg.sender).add(numberOfTokens)<=maxPerWallet,""Over Max Mint per Address""","balanceOf(msg.sender).add(numberOfTokens)<=maxPerWallet,""Over Max Mint per Address""",,4.63
balances[_from]>=_value&&_value>0,balances[_from]>=_value&&_value>0,,4.63
block.timestamp>=_startTime&&block.timestamp<_endTime,block.timestamp>=_startTime&&block.timestamp<_endTime,,4.63
"commissionAmount(_price.mul(numberOfTokens))==msg.value,""Value sent is not correct""","commissionAmount(_price.mul(numberOfTokens))==msg.value,""Value sent is not correct""",,4.63
"d.length>0&&d.length<280,""Invalid description length""","d.length>0&&d.length<280,""Invalid description length""",,4.63
"dabToken.transferFrom(msg.sender,address(this),tokenAmount),""Transfer token failed""","dabToken.transferFrom(msg.sender,address(this),tokenAmount),""Transfer token failed""","dabToken.transferFrom(msg.sender,address(this),tokenAmount)",4.63
"getPool[token0][token1][swapFeeUnits]==address(0),'pool exists'","getPool[token0][token1][swapFeeUnits]==address(0),'pool exists'",,4.63
"getStakedCount(msg.sender)+tokenIds.length<=MAX_WALLET_Staked,""MAX_TOKENS_BURRIED_PER_WALLET""","getStakedCount(msg.sender)+tokenIds.length<=MAX_WALLET_Staked,""MAX_TOKENS_BURRIED_PER_WALLET""",,4.63
"implementation.supportsInterface(type(IBaseCollection).interfaceId),""Not supported""","implementation.supportsInterface(type(IBaseCollection).interfaceId),""Not supported""",,4.63
"isExcludedFromFees[from]||isExcludedFromFees[to],""Trading is not active.""","isExcludedFromFees[from]||isExcludedFromFees[to],""Trading is not active.""",,4.63
"msg.sender==IStakePoolFactory(factory).owner(),""StakePool: caller is not the owner""","msg.sender==IStakePoolFactory(factory).owner(),""StakePool: caller is not the owner""",,4.63
"msg.sender==server||msg.sender==owner,""Must be Admin""","msg.sender==server||msg.sender==owner,""Must be Admin""",,4.63
"policy.payoutAmount+claimAmount<=policy.payoutMaxAmount,""ERROR:POC-042:CLAIM_AMOUNT_EXCEEDS_MAX_PAYOUT""","policy.payoutAmount+claimAmount<=policy.payoutMaxAmount,""ERROR:POC-042:CLAIM_AMOUNT_EXCEEDS_MAX_PAYOUT""",,4.63
"pool.collateralToken()==derivative.collateralCurrency(),'Wrong collateral matching'","pool.collateralToken()==derivative.collateralCurrency(),'Wrong collateral matching'",,4.63
"reserveId-1>=8888-reserveAmount,""No more tokens left to claim!""","reserveId-1>=8888-reserveAmount,""No more tokens left to claim!""",,4.63
"this.balanceOf(msg.sender)+amount<=3,""too many already minted.""","this.balanceOf(msg.sender)+amount<=3,""too many already minted.""",,4.63
"totalSupply()+_quantities[i]<=MAX_SUPPLY,""Dwarves: Total Supply exceeded""","totalSupply()+_quantities[i]<=MAX_SUPPLY,""Dwarves: Total Supply exceeded""",,4.63
"totalSupply()+amount<=total_supply,""Hoarding Masuku!""","totalSupply()+amount<=total_supply,""Hoarding Masuku!""",total_supply+amount<=total_supply,4.63
"verify(_tokenId[i],_reward[i],proofs[i]),""Invalid merkle proof""","verify(_tokenId[i],_reward[i],proofs[i]),""Invalid merkle proof""","verify(_tokenId[i],_reward[i],proofs[i])",4.63
"IERC20(_lpToken).balanceOf(msg.sender)>=_amount,""Blacksmith: insufficient balance""","IERC20(_lpToken).balanceOf(msg.sender)>=_amount,""Blacksmith: insufficient balance""",,4.62
"MerkleProof.verify(proof,wlMerkleRoot,_getLeaf(msg.sender)),""Invalid Merkle proof""","MerkleProof.verify(proof,wlMerkleRoot,_getLeaf(msg.sender)),""Invalid Merkle proof""",,4.62
Out(rot).balanceOf(w)>=amount[w],Out(rot).balanceOf(w)>=amount[w],,4.62
"_containsAddress(_services[process.service].validators,msg.sender),""Your address is not whitelisted in the product service settings""","_containsAddress(_services[process.service].validators,msg.sender),""Your address is not whitelisted in the product service settings""",,4.62
"_quantity.add(CurrentTokenId.current())<=MaxSupplyCount,""Cannot exceed max supply""","_quantity.add(CurrentTokenId.current())<=MaxSupplyCount,""Cannot exceed max supply""",,4.62
"_tokenIdCounter.current().add(_howMany)<=MAXNFT,'Purchase would exceed max supply'","_tokenIdCounter.current().add(_howMany)<=MAXNFT,'Purchase would exceed max supply'",,4.62
"access.isPermissive||access.approvedToMint[msg.sender],'Media: Only Approved users can mint'","access.isPermissive||access.approvedToMint[msg.sender],'Media: Only Approved users can mint'",,4.62
"address(_l1Token)!=address(0),""ZERO_TOKEN""","address(_l1Token)!=address(0),""ZERO_TOKEN""",address(_l1Token)!=address(0),4.62
"address(_l2Token)!=address(0),""ZERO_TOKEN""","address(_l2Token)!=address(0),""ZERO_TOKEN""",,4.62
"bzz_.transferFrom(msg.sender,address(this),_tokenAmount),""Transferring BZZ failed""","bzz_.transferFrom(msg.sender,address(this),_tokenAmount),""Transferring BZZ failed""",,4.62
"dev1Success&&dev2Success&&rewardSuccess,'Failed to distribute'","dev1Success&&dev2Success&&rewardSuccess,'Failed to distribute'",,4.62
"erc20.transferFrom(msg.sender,address(this),_amount),""Failed ERC20 token transfer""","erc20.transferFrom(msg.sender,address(this),_amount),""Failed ERC20 token transfer""",,4.62
"erc20.transferFrom(msg.sender,address(this),_amount)==true,""transfer must succeed""","erc20.transferFrom(msg.sender,address(this),_amount)==true,""transfer must succeed""",,4.62
"getStakedCount(msg.sender)+tokenIds.length<=MAX_WALLET_STAKED,""MAX_TOKENS_STAKED_PER_WALLET""","getStakedCount(msg.sender)+tokenIds.length<=MAX_WALLET_STAKED,""MAX_TOKENS_STAKED_PER_WALLET""",,4.62
"iERC20.transfer(feesAddress,contractCut.sub(custodianCut)),""Fail to transfer fund""","iERC20.transfer(feesAddress,contractCut.sub(custodianCut)),""Fail to transfer fund""",,4.62
"keccak256(abi.encodePacked(_type,_target,_data))==p.dataHash,""data hash not match""","keccak256(abi.encodePacked(_type,_target,_data))==p.dataHash,""data hash not match""",,4.62
"morpherAccessControl.hasRole(role,_msgSender()),""MorpherToken: Permission denied.""","morpherAccessControl.hasRole(role,_msgSender()),""MorpherToken: Permission denied.""",,4.62
"msg.sender==IGoblintownNFT(damaingobbllins).ownerOf(tokenId),""you gots to own dat""","msg.sender==IGoblintownNFT(damaingobbllins).ownerOf(tokenId),""you gots to own dat""",IGoblintownNFT(damaingobbllins).ownerOf(tokenId)==msg.sender,4.62
"normsToEth(rewardedNorms(staker.adr))>=MIN_STAKE,""Rewards must be equal or higher than 1 million $NORM to stake""","normsToEth(rewardedNorms(staker.adr))>=MIN_STAKE,""Rewards must be equal or higher than 1 million $NORM to stake""",staker.stakedAt>0,4.62
"numberMinted(msg.sender)+amount<=maxPerWallet,""You have exceeded the mint limit per wallet.""","numberMinted(msg.sender)+amount<=maxPerWallet,""You have exceeded the mint limit per wallet.""",,4.62
"policy.payoutAmount+confirmedAmount<=policy.payoutMaxAmount,""ERROR:POC-052:PAYOUT_MAX_AMOUNT_EXCEEDED""","policy.payoutAmount+confirmedAmount<=policy.payoutMaxAmount,""ERROR:POC-052:PAYOUT_MAX_AMOUNT_EXCEEDED""",,4.62
"pool.syntheticToken()==derivative.tokenCurrency(),'Wrong synthetic token matching'","pool.syntheticToken()==derivative.tokenCurrency(),'Wrong synthetic token matching'",pool.syntheticToken()==derivative.syntheticCurrency(),4.62
"publicNumberMinted(msg.sender)+_amount<=maxPublicMint,""Max mint amount per wallet exceeded.""","publicNumberMinted(msg.sender)+_amount<=maxPublicMint,""Max mint amount per wallet exceeded.""",,4.62
"tiers[tier].totalSupply+1<=tiers[tier].maxSupply,""Exceeded max limit of allowed token mints""","tiers[tier].totalSupply+1<=tiers[tier].maxSupply,""Exceeded max limit of allowed token mints""",,4.62
"token.approve(spender,type(uint256).max),""FundamentaTrader: Token approval failed""","token.approve(spender,type(uint256).max),""FundamentaTrader: Token approval failed""",,4.62
"totalSupply().add(numNFT)<=MAX,""NFT: Reservations would exceed max supply of NFT.""","totalSupply().add(numNFT)<=MAX,""NFT: Reservations would exceed max supply of NFT.""",,4.62
z>=x)&&(z>=y,(z>=x)&&(z>=y),,4.62
"(totalWhitelistMint[msg.sender]+_count)<=maxPerWalletPresale,""2 tokens per wallet allowed in pre sale""","(totalWhitelistMint[msg.sender]+_count)<=maxPerWalletPresale,""2 tokens per wallet allowed in pre sale""",totalWhitelistMint[msg.sender]+_count<=maxPerWalletPresale,4.619999999999999
"allowlist[from]==true,""blockzerolabs.io/x/getInvite""","allowlist[from]==true,""blockzerolabs.io/x/getInvite""",,4.619999999999999
challenge.initialStateEon<ledger.currentEon().sub(1),challenge.initialStateEon<ledger.currentEon().sub(1),,4.619999999999999
"idsInfo[i].price!=0||freeItemsBuyable,""Not for sale""","idsInfo[i].price!=0||freeItemsBuyable,""Not for sale""",,4.619999999999999
"idsInfo[j].price!=0||freeItemsBuyable,""Not for sale""","idsInfo[j].price!=0||freeItemsBuyable,""Not for sale""",,4.619999999999999
locked[msg.sender].add(_value)<=balances[msg.sender],locked[msg.sender].add(_value)<=balances[msg.sender],,4.619999999999999
"m.capPerAdd==0||afterPurchase<=m.capPerAdd,""Cap met""","m.capPerAdd==0||afterPurchase<=m.capPerAdd,""Cap met""",,4.619999999999999
msg.sender==artistAddress||msg.sender==minterAddress,msg.sender==artistAddress||msg.sender==minterAddress,,4.619999999999999
msg.sender==ownerAddress||msg.sender==managerAddress,msg.sender==ownerAddress||msg.sender==managerAddress,,4.619999999999999
"msg.sender==owner||msg.sender==recipient,""onlyOwner""","msg.sender==owner||msg.sender==recipient,""onlyOwner""",,4.619999999999999
"msg.value>0&&msg.value==amount,'INCORRECT MSG VALUE'","msg.value>0&&msg.value==amount,'INCORRECT MSG VALUE'",,4.619999999999999
"totalMintedByAddress[msg.sender]+_mintAmount<=maxMintAmountPerAddress,""Exceeded maximum total amount!""","totalMintedByAddress[msg.sender]+_mintAmount<=maxMintAmountPerAddress,""Exceeded maximum total amount!""",,4.619999999999999
"totalSupply()+1<=TOTAL_SUPPLY,'Max supply exceeded!'","totalSupply()+1<=TOTAL_SUPPLY,'Max supply exceeded!'",,4.619999999999999
"totalSupply()+2<=TOTAL_SUPPLY,'Max supply exceeded!'","totalSupply()+2<=TOTAL_SUPPLY,'Max supply exceeded!'",,4.619999999999999
"totalSupply()+5<=TOTAL_SUPPLY,'Max supply exceeded!'","totalSupply()+5<=TOTAL_SUPPLY,'Max supply exceeded!'",totalSupply()<TOTAL_SUPPLY,4.619999999999999
"totalSupply()+_amount<=(MAX_AMOUNT),""supply limited""","totalSupply()+_amount<=(MAX_AMOUNT),""supply limited""",_amount<=MAX_AMOUNT-totalSupply(),4.619999999999999
"Channels[_lcID].partyAddresses[0]==address(0),""Channel has already been created.""","Channels[_lcID].partyAddresses[0]==address(0),""Channel has already been created.""",,4.61
"ERC20Interface(_erc20Address).balanceOf(_bidder)>=_amount,""ERC721Bid#_requireBidderBalance: INSUFFICIENT_FUNDS""","ERC20Interface(_erc20Address).balanceOf(_bidder)>=_amount,""ERC721Bid#_requireBidderBalance: INSUFFICIENT_FUNDS""",,4.61
LessThanMaxSupply(mintedSupply()+quantity,LessThanMaxSupply(mintedSupply()+quantity,,4.61
"_allExistsAndBunnable(tokenIds),""ERC721L: some tokens to be burned not exists or can not be burned!!""","_allExistsAndBunnable(tokenIds),""ERC721L: some tokens to be burned not exists or can not be burned!!""",,4.61
"address(iziToken)!=address(0),""NOT BOOST""","address(iziToken)!=address(0),""NOT BOOST""",,4.61
"currentIndex+amount<=maxSupply+1,""Not enough tokens to sell!""","currentIndex+amount<=maxSupply+1,""Not enough tokens to sell!""",,4.61
"hasRole(REWARD_DISTRIBUTOR_ROLE,_msgSender()),""LiquidityMiningManager.onlyRewardDistributor: permission denied""","hasRole(REWARD_DISTRIBUTOR_ROLE,_msgSender()),""LiquidityMiningManager.onlyRewardDistributor: permission denied""","hasRole(REWARD_DISTRIBUTOR_ROLE,msg.sender)",4.61
"quantity+(supply-1)<=MAX_TOKENS,""Not enough tokens remaining""","quantity+(supply-1)<=MAX_TOKENS,""Not enough tokens remaining""",,4.61
"stakedTokens[msg.sender][_tokenType].remove(_id),""STAKER: staked token not found""","stakedTokens[msg.sender][_tokenType].remove(_id),""STAKER: staked token not found""",stakedTokens[_owner][_tokenType].remove(_id),4.61
"stateRootProof.length==32*(BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),""BeaconChainProofs.verifyStateRootAgainstLatestBlockRoot: Proof has incorrect length""","stateRootProof.length==32*(BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),""BeaconChainProofs.verifyStateRootAgainstLatestBlockRoot: Proof has incorrect length""",,4.61
"whiteLists[msg.sender]>=privateMinted[msg.sender]+amount,""You have reached your mint limit""","whiteLists[msg.sender]>=privateMinted[msg.sender]+amount,""You have reached your mint limit""",,4.61
(amount-1)*mintPrice<=msg.value,(amount-1)*mintPrice<=msg.value,,4.609999999999999
"(claimedAmountPublic[msg.sender]+_amount)<=MAXIMUM_PUBLIC_AMOUNT,'NFT: exceeded maximum public quota'","(claimedAmountPublic[msg.sender]+_amount)<=MAXIMUM_PUBLIC_AMOUNT,'NFT: exceeded maximum public quota'",,4.609999999999999
"(totalSupply()+num)<=MAX_SUPPLY,""Exceed max supply""","(totalSupply()+num)<=MAX_SUPPLY,""Exceed max supply""",,4.609999999999999
"ERC721(nftAddress).ownerOf(tokenID)==msg.sender,""You're not an owner of this NFT""","ERC721(nftAddress).ownerOf(tokenID)==msg.sender,""You're not an owner of this NFT""",ERC721(nftAddress).ownerOf(tokenID)==msg.sender,4.609999999999999
"IERC20(rewardsToken).transfer(info.stakingRewards,rewardAmount),""transfer failed""","IERC20(rewardsToken).transfer(info.stakingRewards,rewardAmount),""transfer failed""",rewardAmount>0,4.609999999999999
"IERC20(tokenAddress).transfer(msg.sender,tokensToFulfill),""Token transfer failed""","IERC20(tokenAddress).transfer(msg.sender,tokensToFulfill),""Token transfer failed""",,4.609999999999999
"IERC721(nftContract).balanceOf(msg.sender)>0,""You must own an NFT to mint tokens""","IERC721(nftContract).balanceOf(msg.sender)>0,""You must own an NFT to mint tokens""",,4.609999999999999
"LMXInterface(tokenContractAddress).mintToken(msg.sender,amount),""token mint fail""","LMXInterface(tokenContractAddress).mintToken(msg.sender,amount),""token mint fail""",,4.609999999999999
"OwnerManager(manager).isOwner(msg.sender),""Method can only be called by an owner""","OwnerManager(manager).isOwner(msg.sender),""Method can only be called by an owner""",,4.609999999999999
"_mintedFreeAmount[msg.sender]+_mintAmount<=maxFreePerWallet,""TAYT: Exceeds max free mint per wallet!""","_mintedFreeAmount[msg.sender]+_mintAmount<=maxFreePerWallet,""TAYT: Exceeds max free mint per wallet!""",,4.609999999999999
"activeCurrency.allowance(msg.sender,address(this))>=amount,""not enough allowance""","activeCurrency.allowance(msg.sender,address(this))>=amount,""not enough allowance""",,4.609999999999999
"balanceOf(recipient)+amount<=MAX_HOLDING_LIMIT,""Transfer would exceed the maximum holding limit for this wallet address.""","balanceOf(recipient)+amount<=MAX_HOLDING_LIMIT,""Transfer would exceed the maximum holding limit for this wallet address.""",,4.609999999999999
block.timestamp>=startTime&&block.timestamp<endTime,block.timestamp>=startTime&&block.timestamp<endTime,,4.609999999999999
"can[msg.sender]==1,""RwaOutputConduit2/not-operator""","can[msg.sender]==1,""RwaOutputConduit2/not-operator""",,4.609999999999999
"comptroller.redeemAllowed(address(this),redeemer,vars.redeemTokens)==0,""rejected""","comptroller.redeemAllowed(address(this),redeemer,vars.redeemTokens)==0,""rejected""",,4.609999999999999
"msg.sender==IERC721(ARTEFACT_PASS_ADDRESS).ownerOf(tokenId),""ONLY_ARTEFACT_OWNER""","msg.sender==IERC721(ARTEFACT_PASS_ADDRESS).ownerOf(tokenId),""ONLY_ARTEFACT_OWNER""",,4.609999999999999
msg.sender==operatorWallet||msg.sender==adminWallet,msg.sender==operatorWallet||msg.sender==adminWallet,,4.609999999999999
"msg.value>0&&_amount==msg.value,'invalid bid value'","msg.value>0&&_amount==msg.value,'invalid bid value'",,4.609999999999999
"msg.value>=getCyberBearPrice().mul(_numOfCyberBears),""You havent sent enough eth""","msg.value>=getCyberBearPrice().mul(_numOfCyberBears),""You havent sent enough eth""",msg.value>=getCyberBearPrice().mul(_numOfCyberBears),4.609999999999999
"rewardToken.transferFrom(msg.sender,address(this),amount),""Token transfer failed""","rewardToken.transferFrom(msg.sender,address(this),amount),""Token transfer failed""","rewardToken.transferFrom(msg.sender,address(this),amount)",4.609999999999999
"token.allowance(msg.sender,address(this))>=value,""Must have enough tokens to pay""","token.allowance(msg.sender,address(this))>=value,""Must have enough tokens to pay""",,4.609999999999999
"token.transferFrom(msg.sender,address(feeSplitter),itemPrice),""MUST_PAY_MINT_FEE""","token.transferFrom(msg.sender,address(feeSplitter),itemPrice),""MUST_PAY_MINT_FEE""",,4.609999999999999
"token1.allowance(owner1,address(this))>=amount1,""Token 1 allowance insufficient.""","token1.allowance(owner1,address(this))>=amount1,""Token 1 allowance insufficient.""",,4.609999999999999
"token2.allowance(owner2,address(this))>=amount2,""Token 2 allowance insufficient.""","token2.allowance(owner2,address(this))>=amount2,""Token 2 allowance insufficient.""",,4.609999999999999
"totalSupply()+1<=supplyLimit,'Max supply exceeded!'","totalSupply()+1<=supplyLimit,'Max supply exceeded!'",,4.609999999999999
"versusToken.transferFrom(msg.sender,address(this),amount),""Token transfer failed""","versusToken.transferFrom(msg.sender,address(this),amount),""Token transfer failed""",,4.609999999999999
"address(value)!=address(0),""PARAM_ERROR""","address(value)!=address(0),""PARAM_ERROR""",,4.6000000000000005
"numberMinted(msg.sender)+_mintAmount<=maxMintAmountPerPublicAccount,""Mint limit exceeded.""","numberMinted(msg.sender)+_mintAmount<=maxMintAmountPerPublicAccount,""Mint limit exceeded.""",,4.6000000000000005
"numberMinted(msg.sender)+quantity<=saleConfig.AmountForPubliclist,""can not mint this many""","numberMinted(msg.sender)+quantity<=saleConfig.AmountForPubliclist,""can not mint this many""",,4.6000000000000005
"owner()!=address(0),""Error: NFT invalid""","owner()!=address(0),""Error: NFT invalid""",nftOwner!=address(0),4.6000000000000005
"(AmountOfWhiteLists-int256(tokenQuantity))>=0,""12""","(AmountOfWhiteLists-int256(tokenQuantity))>=0,""12""",,4.6
"(totalSupply()+_quantity)<=Max_Supply,""Max supply""","(totalSupply()+_quantity)<=Max_Supply,""Max supply""",,4.6
"(totalWhitelistMint[msg.sender]+_quantity)<=MAX_MINT,""PXLZ :: Cannot mint beyond whitelist max mint""","(totalWhitelistMint[msg.sender]+_quantity)<=MAX_MINT,""PXLZ :: Cannot mint beyond whitelist max mint""",,4.6
"ERC721(avatarAddress).balanceOf(msg.sender)<PER_USER_MAX_AVATAR_COUNT,""overflow""","ERC721(avatarAddress).balanceOf(msg.sender)<PER_USER_MAX_AVATAR_COUNT,""overflow""",avatarService.balanceOf(msg.sender)<PER_USER_MAX_AVATAR_COUNT,4.6
"ERC721(contractAddress).ownerOf(tokenId)==msg.sender,""Wallet does not own token""","ERC721(contractAddress).ownerOf(tokenId)==msg.sender,""Wallet does not own token""",,4.6
"IERC1155(_entropyContract).balanceOf(msg.sender,_burnableToken)>0,""Must own NFT""","IERC1155(_entropyContract).balanceOf(msg.sender,_burnableToken)>0,""Must own NFT""",,4.6
"IERC1155(_entropyContract).balanceOf(msg.sender,_burnableToken)>1,""Must own NFT""","IERC1155(_entropyContract).balanceOf(msg.sender,_burnableToken)>1,""Must own NFT""","IERC1155(_entropyContract).balanceOf(msg.sender,_burnableToken)>0",4.6
"IERC721URI(tokenAddress).ownerOf(tokenId)==msg.sender,""Not owner of saved token""","IERC721URI(tokenAddress).ownerOf(tokenId)==msg.sender,""Not owner of saved token""",,4.6
"IMapleGlobalsLike(mapleGlobals).isPoolDeployer(msg.sender),""PMF:CI:NOT_DEPLOYER""","IMapleGlobalsLike(mapleGlobals).isPoolDeployer(msg.sender),""PMF:CI:NOT_DEPLOYER""",,4.6
"IOneTokenFactory(oneTokenFactory).isOracle(oneToken,oracle),""Incremental: oracle is not approved for oneToken""","IOneTokenFactory(oneTokenFactory).isOracle(oneToken,oracle),""Incremental: oracle is not approved for oneToken""",,4.6
"Token(tokenAddress).transfer(account,unclaimedDivs),""Could not transfer tokens.""","Token(tokenAddress).transfer(account,unclaimedDivs),""Could not transfer tokens.""",,4.6
"Token(tokenDepositAddress).transfer(account,toSend),""Could not transfer tokens.""","Token(tokenDepositAddress).transfer(account,toSend),""Could not transfer tokens.""",,4.6
"Token(tokenDepositAddress).transfer(owner,fee),""Could not transfer deposit fee.""","Token(tokenDepositAddress).transfer(owner,fee),""Could not transfer deposit fee.""",amountAfterFee<=maxDepositedTokens[msg.sender],4.6
"UniSwapToken.balanceOf(_msgSender())>=_amount,""Balance of the sender not large enough for the required amount""","UniSwapToken.balanceOf(_msgSender())>=_amount,""Balance of the sender not large enough for the required amount""",,4.6
"_fromToken.allowance(msg.sender,address(this))>=amount,""Allowance is not enough""","_fromToken.allowance(msg.sender,address(this))>=amount,""Allowance is not enough""","_fromToken.allowance(msg.sender,address(this))>=amount",4.6
"_initParams._optionsPremiumPricer!=address(0),""!_optionsPremiumPricer""","_initParams._optionsPremiumPricer!=address(0),""!_optionsPremiumPricer""",,4.6
"_mintAmount+addressMintedBalance[msg.sender]<=maxNFTPerAccount,""You reach maximum NFTs per address!""","_mintAmount+addressMintedBalance[msg.sender]<=maxNFTPerAccount,""You reach maximum NFTs per address!""",,4.6
"_registry.owner(node)==address(0),""The supplied label has already been claimed.""","_registry.owner(node)==address(0),""The supplied label has already been claimed.""",,4.6
"_totalMinted()+quantity<=maxSupply,""Out of stock!""","_totalMinted()+quantity<=maxSupply,""Out of stock!""",,4.6
"allowlist[to]==true,""blockzerolabs.io/x/getInvite""","allowlist[to]==true,""blockzerolabs.io/x/getInvite""",,4.6
"amount.add(balanceOf(msg.sender))<=100000ether,""Staking Limited to 100,000 LOOT""","amount.add(balanceOf(msg.sender))<=100000ether,""Staking Limited to 100,000 LOOT""",,4.6
"balanceOf(msg.sender)+num<=MAX_AMOUNT_PER_WALLET,""METAMONZ: You can only hold MAX_AMOUNT_PER_WALLET METAMONZ per wallet""","balanceOf(msg.sender)+num<=MAX_AMOUNT_PER_WALLET,""METAMONZ: You can only hold MAX_AMOUNT_PER_WALLET METAMONZ per wallet""",balanceOf(msg.sender)+num<=MAX_AMOUNT_PER_WALLET,4.6
"fee().mul(numberOfCreepyKidsToMint)==msg.value,""Ether value sent is not correct""","fee().mul(numberOfCreepyKidsToMint)==msg.value,""Ether value sent is not correct""",,4.6
"int256(MembershipPointsMap[_passId])+_amount>=0,""amount verify failed""","int256(MembershipPointsMap[_passId])+_amount>=0,""amount verify failed""",_amount!=0,4.6
"invis.isApprovedForAll(msg.sender,address(this)),""Contract not approved to burn""","invis.isApprovedForAll(msg.sender,address(this)),""Contract not approved to burn""",,4.6
"isPublicMintActive||msg.sender==owner(),""Public minting is not active""","isPublicMintActive||msg.sender==owner(),""Public minting is not active""",,4.6
"isRexOwner(rexIds[i],recipient),""You are not the owner of this OG-Rex""","isRexOwner(rexIds[i],recipient),""You are not the owner of this OG-Rex""",,4.6
"isRexOwner(tokenId[i],_address),""Address is not owner of OG-REX batch""","isRexOwner(tokenId[i],_address),""Address is not owner of OG-REX batch""","isRexOwner(tokenId[i],_address)",4.6
"msg.sender==_dude||msg.sender==_dev,""unauthorized""","msg.sender==_dude||msg.sender==_dev,""unauthorized""",,4.6
msg.sender==addressSaleContract||msg.sender==owner,msg.sender==addressSaleContract||msg.sender==owner,addressSaleContract!=address(0),4.6
msg.sender==owner||msg.sender==addressSaleContract,msg.sender==owner||msg.sender==addressSaleContract,,4.6
"msg.value>=calculatePrice().mul(numNekoGirl),""BNB value sent is below the price""","msg.value>=calculatePrice().mul(numNekoGirl),""BNB value sent is below the price""",,4.6
msg.value>=minInvestment&&msg.value<=maxInvestment,msg.value>=minInvestment&&msg.value<=maxInvestment,,4.6
"msg.value>=nTypes[_nTypeIndex].price*_mintAmount,""Insufficient funds!""","msg.value>=nTypes[_nTypeIndex].price*_mintAmount,""Insufficient funds!""",msg.value>=nTypes[_nTypeIndex].price*_mintAmount,4.6
"order.base_tokens==keccak256(abi.encode(base_tokens)),""base token hash mismatch""","order.base_tokens==keccak256(abi.encode(base_tokens)),""base token hash mismatch""",,4.6
"partners[_id].contractAddress!=address(0),""Invalid partner.""","partners[_id].contractAddress!=address(0),""Invalid partner.""",,4.6
"senderCanExecute||block.timestamp>=validAfterTimestamp+BOT_EXECUTION_TIME,'TD00'","senderCanExecute||block.timestamp>=validAfterTimestamp+BOT_EXECUTION_TIME,'TD00'",,4.6
"swapToken.allowance(msg.sender,address(this))>=_amount,""allowance is not enough""","swapToken.allowance(msg.sender,address(this))>=_amount,""allowance is not enough""",,4.6
"token.allowance(msg.sender,address(this))>=_amountSum,""Need Approve ERC20 token""","token.allowance(msg.sender,address(this))>=_amountSum,""Need Approve ERC20 token""",,4.6
"token.balanceOf(address(this))>=claimAmount,""Not enough tokens in the contract.""","token.balanceOf(address(this))>=claimAmount,""Not enough tokens in the contract.""",,4.6
"token.transferFrom(msg.sender,address(this),totalAmount),""unable to stake users""","token.transferFrom(msg.sender,address(this),totalAmount),""unable to stake users""",,4.6
"totalSupply()+qty<=milkerSupply,""No Milkers Left!""","totalSupply()+qty<=milkerSupply,""No Milkers Left!""",,4.6
"totalSupply()+qty<=primateSupply,""Boxes Sold Out!""","totalSupply()+qty<=primateSupply,""Boxes Sold Out!""",,4.6
"totalSupply().add(arUsers.length)<=MAX_SUPPLY,""Purchase would exceed max supply""","totalSupply().add(arUsers.length)<=MAX_SUPPLY,""Purchase would exceed max supply""",reservedTokens>=arUsers.length,4.6
"totalSupply().add(numberOfTokens)<=MAX_REKTRACOONS_PRE_SALE,""Purchase would exceed max supply of One Rackoons""","totalSupply().add(numberOfTokens)<=MAX_REKTRACOONS_PRE_SALE,""Purchase would exceed max supply of One Rackoons""",,4.6
"uptownPanda.getMinter()==address(this),""Presale contract can't mint $UP tokens.""","uptownPanda.getMinter()==address(this),""Presale contract can't mint $UP tokens.""",,4.6
"vaultParameters.isOracleTypeEnabled(oracleType[asset][positionOwner],asset),""Unit Protocol: WRONG_ORACLE_TYPE""","vaultParameters.isOracleTypeEnabled(oracleType[asset][positionOwner],asset),""Unit Protocol: WRONG_ORACLE_TYPE""",,4.6
"voteToken.allowance(msg.sender,address(this))>=_amount,""allowance is not enough""","voteToken.allowance(msg.sender,address(this))>=_amount,""allowance is not enough""",,4.6
"whitelist[from]||whitelist[to],""OperatingSystem: Can only transfer to or from whitelisted addresses""","whitelist[from]||whitelist[to],""OperatingSystem: Can only transfer to or from whitelisted addresses""",,4.6
"(_marketing+_liquidity)<=15,""Must keep fees at 15% or less""","(_marketing+_liquidity)<=15,""Must keep fees at 15% or less""",,4.59
"(_marketing+_liquidity)<=30,""Must keep fees at 30% or less""","(_marketing+_liquidity)<=30,""Must keep fees at 30% or less""",totalBuyFees<=10,4.59
"(balanceOf(to)+amount)<=maxAmountForWallet,""TDP3""","(balanceOf(to)+amount)<=maxAmountForWallet,""TDP3""",,4.59
"(supply-1)+amount<=MAX_TOKENS,""Not enough tokens remaining""","(supply-1)+amount<=MAX_TOKENS,""Not enough tokens remaining""",,4.59
"(totalSupply()+1)<_maxSupply,""Exceeds max supply""","(totalSupply()+1)<_maxSupply,""Exceeds max supply""",,4.59
"(totalSupply()+quantity)<=MAX_SUPPLY,""Minted out""","(totalSupply()+quantity)<=MAX_SUPPLY,""Minted out""",,4.59
"(users[user].lastClaim+10)<block.number,'Claim Wait Time Not Reached'","(users[user].lastClaim+10)<block.number,'Claim Wait Time Not Reached'",,4.59
"IERC20(FRZtoken).transfer(account,amount),""MerkleDistributor: Transfer failed.""","IERC20(FRZtoken).transfer(account,amount),""MerkleDistributor: Transfer failed.""",,4.59
"IERC20(xkfi).balanceOf(msg.sender)>=_amount,""Must have enough balance to stake""","IERC20(xkfi).balanceOf(msg.sender)>=_amount,""Must have enough balance to stake""",,4.59
"IERC721(shopPassAddress).balanceOf(msg.sender)>=1,""Must own a Shop Pass to bid""","IERC721(shopPassAddress).balanceOf(msg.sender)>=1,""Must own a Shop Pass to bid""",,4.59
"IERC721(tokenContract).ownerOf(tokenId)==msg.sender,""You do not own this token""","IERC721(tokenContract).ownerOf(tokenId)==msg.sender,""You do not own this token""",,4.59
"OpenZeppelinUpgradesAddress.isContract(newImplementation),""Cannot set a proxy implementation to a non-contract address""","OpenZeppelinUpgradesAddress.isContract(newImplementation),""Cannot set a proxy implementation to a non-contract address""",,4.59
"Token(VAPEAddress).transfer(account,unclaimedDivs),""Could not transfer tokens.""","Token(VAPEAddress).transfer(account,unclaimedDivs),""Could not transfer tokens.""",,4.59
"YFMSToken.transferFrom(msg.sender,address(this),balance),""YFMS transfer failed""","YFMSToken.transferFrom(msg.sender,address(this),balance),""YFMS transfer failed""",,4.59
"_getAvailableFunds(ERC20(aToken[_option]),_option)>=_amount","_getAvailableFunds(ERC20(aToken[_option]),_option)>=_amount",,4.59
"_isApprovedOrOwner(_msgSender(),tokenIds[i]),""Unauthorized""","_isApprovedOrOwner(_msgSender(),tokenIds[i]),""Unauthorized""",,4.59
"_totalMinted()+_amount<=MAX_RATS,""Too many rats!""","_totalMinted()+_amount<=MAX_RATS,""Too many rats!""",,4.59
"_totalMinted()+amount<=maxSupply,""No NFTs lefts!""","_totalMinted()+amount<=maxSupply,""No NFTs lefts!""",!paused,4.59
"address(_token)!=address(sbond_),""bond""","address(_token)!=address(sbond_),""bond""",,4.59
address(invitationRegistry)!=address(0),address(invitationRegistry)!=address(0),,4.59
address(oldHegicETHOptions)!=address(0),address(oldHegicETHOptions)!=address(0),,4.59
"address(this).balance+msg.value>0,""Contract must have ETH.""","address(this).balance+msg.value>0,""Contract must have ETH.""",,4.59
"address(typeB)!=address(0),""typeB zero""","address(typeB)!=address(0),""typeB zero""",,4.59
admins[msg.sender]||readers[msg.sender],admins[msg.sender]||readers[msg.sender],,4.59
"amounts[l]+totalSupply()<=maxSupplyAmount,""REACHED MAX SUPPLY AMOUNT""","amounts[l]+totalSupply()<=maxSupplyAmount,""REACHED MAX SUPPLY AMOUNT""",,4.59
block.timestamp>unlockTime||msg.sender==crowdsale,block.timestamp>unlockTime||msg.sender==crowdsale,,4.59
"cncc.balanceOf(msg.sender,_burnTokenIds[i])>=_amounts[i],'Insufficient balance'","cncc.balanceOf(msg.sender,_burnTokenIds[i])>=_amounts[i],'Insufficient balance'",cncc.ownerOf(_burnTokenIds[i])==msg.sender,4.59
"dabToken.transferFrom(msg.sender,address(this),_amount),""Transfer token failed""","dabToken.transferFrom(msg.sender,address(this),_amount),""Transfer token failed""",,4.59
"excludedFromFees[from]||excludedFromFees[to],""Trading is not active.""","excludedFromFees[from]||excludedFromFees[to],""Trading is not active.""",tradingActive,4.59
"hasRole(DISTRIBUTION_ASSIGNER_ROLE,_msgSender()),""RewardDistributionRecipient::setRewardDistribution: must have distribution assigner role""","hasRole(DISTRIBUTION_ASSIGNER_ROLE,_msgSender()),""RewardDistributionRecipient::setRewardDistribution: must have distribution assigner role""",,4.59
isWorker(msg.sender)||msg.sender==owner,isWorker(msg.sender)||msg.sender==owner,,4.59
keccak256(_creatorEmail)!=keccak256(''),keccak256(_creatorEmail)!=keccak256(''),,4.59
"minters[_minterName].root!=bytes32(0),""MintData not found.""","minters[_minterName].root!=bytes32(0),""MintData not found.""",,4.59
"msg.sender==rebaser||msg.sender==gov,""not minter""","msg.sender==rebaser||msg.sender==gov,""not minter""",,4.59
"numberMinted(msg.sender)+quantity<=saleConfig.AmountForWhitelist,""can not mint this many""","numberMinted(msg.sender)+quantity<=saleConfig.AmountForWhitelist,""can not mint this many""",,4.59
"ownerOf(_tokenId)==address(this),""!buy""","ownerOf(_tokenId)==address(this),""!buy""",,4.59
"params.tokens[0]!=address(0),ExceptionsLibrary.ADDRESS_ZERO","params.tokens[0]!=address(0),ExceptionsLibrary.ADDRESS_ZERO",params.tokens[0]!=address(0),4.59
"params.tokens[1]!=address(0),ExceptionsLibrary.ADDRESS_ZERO","params.tokens[1]!=address(0),ExceptionsLibrary.ADDRESS_ZERO",,4.59
"stakingToken.balanceOf(address(this))>=withdrawAmount,""StakingRewardsProxy: Insufficient proxy token balance""","stakingToken.balanceOf(address(this))>=withdrawAmount,""StakingRewardsProxy: Insufficient proxy token balance""",,4.59
"supply+amount+weWillSee<=population,""Public Mint Sold Out!""","supply+amount+weWillSee<=population,""Public Mint Sold Out!""",supply+amount<=population,4.59
"t1&&t2&&t3,""Transfer failed.""","t1&&t2&&t3,""Transfer failed.""",t1&&t2&&t3,4.59
"token.allowance(msg.sender,address(this))>_amountSum,""Need Approve ERC20 token""","token.allowance(msg.sender,address(this))>_amountSum,""Need Approve ERC20 token""",,4.59
"token.transferFrom(address(this),msg.sender,parseToken),""Token transfer failed""","token.transferFrom(address(this),msg.sender,parseToken),""Token transfer failed""",,4.59
"tokenData.priceSanityContract.checkPrice.gas(EXTERNAL_QUERY_GAS_LIMIT)(base,quote,buy,baseAmount,quoteAmount)","tokenData.priceSanityContract.checkPrice.gas(EXTERNAL_QUERY_GAS_LIMIT)(base,quote,buy,baseAmount,quoteAmount)",,4.59
"totalSupply()+2<=maxSupply,'Max supply exceeded!'","totalSupply()+2<=maxSupply,'Max supply exceeded!'",,4.59
"totalSupply().add(1)<=MAX_RAPTORS,""Sorry, there is not that many Raptors left.""","totalSupply().add(1)<=MAX_RAPTORS,""Sorry, there is not that many Raptors left.""",,4.59
"totalSupply().add(numberOfTokens)<=MAX_CryptoKiwis,""Your purchase would exceed the max supply of CryptoKiwis""","totalSupply().add(numberOfTokens)<=MAX_CryptoKiwis,""Your purchase would exceed the max supply of CryptoKiwis""",,4.59
"totalSupply+totalQuantity+1<=maxSupply,""Not enough supply!""","totalSupply+totalQuantity+1<=maxSupply,""Not enough supply!""",totalSupply+totalQuantity<=maxSupply,4.59
"users[msg.sender].vestingTimestamp.add(vestingPeriod)<block.timestamp,""Vesting is not finished yet""","users[msg.sender].vestingTimestamp.add(vestingPeriod)<block.timestamp,""Vesting is not finished yet""",,4.59
"vestingToken.transferFrom(vestingSchedule.depositor,address(this),_totalAmount)","vestingToken.transferFrom(vestingSchedule.depositor,address(this),_totalAmount)",,4.59
"walletMints[msg.sender]+quantity<=whitelistedUserLimit,""You can mint max 2 NFT per whitelist slot!""","walletMints[msg.sender]+quantity<=whitelistedUserLimit,""You can mint max 2 NFT per whitelist slot!""",walletMints[msg.sender]+quantity<=whitelistedUserLimit,4.59
"IERC20(_token).balanceOf(msg.sender)>=tokenAmount,""Insufficient token balance""","IERC20(_token).balanceOf(msg.sender)>=tokenAmount,""Insufficient token balance""",,4.58
"NXM.transferFrom(msg.sender,address(this),_amount),""wNXM: transferFrom failed""","NXM.transferFrom(msg.sender,address(this),_amount),""wNXM: transferFrom failed""",,4.58
"SafeMath.mul(getNFTPrice(),count)==msg.value,""Ether value sent is not correct""","SafeMath.mul(getNFTPrice(),count)==msg.value,""Ether value sent is not correct""",msg.value>=getNFTPrice().mul(count),4.58
"Token(tokenAddress).transfer(account,pendingDivs),""Could not transfer tokens.""","Token(tokenAddress).transfer(account,pendingDivs),""Could not transfer tokens.""",,4.58
"_exists(uint32(_projectId)),""!project""","_exists(uint32(_projectId)),""!project""",,4.58
"address(_token)!=address(pbl_),""share""","address(_token)!=address(pbl_),""share""",address(_token)!=address(pbl_),4.58
"address(vrf)!=address(0),""VRF not set""","address(vrf)!=address(0),""VRF not set""",user.amount<=user.amount,4.58
admins[msg.sender]||staffs[msg.sender],admins[msg.sender]||staffs[msg.sender],,4.58
"artblocksCore.adminACLAllowed(msg.sender,address(this),_selector),""Only admin""","artblocksCore.adminACLAllowed(msg.sender,address(this),_selector),""Only admin""",,4.58
"balanceOf(msg.sender)+_mintAmount<=maxMintAmountPerPresaleAccount,""Mint limit exceeded.""","balanceOf(msg.sender)+_mintAmount<=maxMintAmountPerPresaleAccount,""Mint limit exceeded.""",balanceOf(msg.sender)+_mintAmount<=maxMintAmountPerPresaleAccount,4.58
"balanceOf(msg.sender)+quantity<=MAX_PER_WALLET,""The max a single wallet can mint is 20.""","balanceOf(msg.sender)+quantity<=MAX_PER_WALLET,""The max a single wallet can mint is 20.""",,4.58
"block.number.sub(user.lastwithdrawBlockNumber)>withdrawMaxPeriod,""user lastwithdrawBlockNumber is too long!""","block.number.sub(user.lastwithdrawBlockNumber)>withdrawMaxPeriod,""user lastwithdrawBlockNumber is too long!""",,4.58
"data.length>0&&signature.length>0,""Invalid data""","data.length>0&&signature.length>0,""Invalid data""",,4.58
"isDefaulting&&auctionNotStarted&&periodToStartPassed,""CDC""","isDefaulting&&auctionNotStarted&&periodToStartPassed,""CDC""",,4.58
"isFeeExempt[sender]||isFeeExempt[recipient],""Trading is not active.""","isFeeExempt[sender]||isFeeExempt[recipient],""Trading is not active.""",,4.58
keccak256(_description)!=keccak256(''),keccak256(_description)!=keccak256(''),,4.58
msg.sender==adminAddr||msg.sender==crowdSaleAddr,msg.sender==adminAddr||msg.sender==crowdSaleAddr,,4.58
msg.sender==fundsWallet||msg.sender==adminWallet,msg.sender==fundsWallet||msg.sender==adminWallet,,4.58
msg.sender==owner||msg.sender==newVersionAddress,msg.sender==owner||msg.sender==newVersionAddress,,4.58
msg.sender==owner||msg.sender==ownerManualMinter,msg.sender==owner||msg.sender==ownerManualMinter,,4.58
"numberMinted(msg.sender)+amount<=maxEarlybirdMint,""Max mint amount per wallet exceeded.""","numberMinted(msg.sender)+amount<=maxEarlybirdMint,""Max mint amount per wallet exceeded.""",,4.58
organizationsProposals[address(proposal.avatar)][_proposalId].executionTime==0,organizationsProposals[address(proposal.avatar)][_proposalId].executionTime==0,,4.58
"protocolToken.transferFrom(msg.sender,address(this),protocolTokensAmount),""TF""","protocolToken.transferFrom(msg.sender,address(this),protocolTokensAmount),""TF""",protocolToken.balanceOf(address(this))>=protocolTokensAmount,4.58
"rewardToken.allowance(msg.sender,address(this))>=reward,""not enough allowance""","rewardToken.allowance(msg.sender,address(this))>=reward,""not enough allowance""",,4.58
"token.safeTransferFrom(msg.sender,address(this),value),""Transfer must succeed""","token.safeTransferFrom(msg.sender,address(this),value),""Transfer must succeed""",,4.58
"token.transferFrom(msg.sender,address(this),betAmount),""Token transfer failed""","token.transferFrom(msg.sender,address(this),betAmount),""Token transfer failed""",,4.58
"tokenList[_tokenId].amountMinted<=(tokenList[_tokenId].tokenSupply),""Current membership supply has run dry.""","tokenList[_tokenId].amountMinted<=(tokenList[_tokenId].tokenSupply),""Current membership supply has run dry.""",,4.58
"totalSupply()<=newMaxSupply,""ERR: minted > new!""","totalSupply()<=newMaxSupply,""ERR: minted > new!""",,4.58
"(_marketing+_liquidity)<=9,""Must keep fees at 9% or less""","(_marketing+_liquidity)<=9,""Must keep fees at 9% or less""",,4.57
"(newTaxRateBuy+newTaxRateSell)<=20,""Max roundtrip is 20%""","(newTaxRateBuy+newTaxRateSell)<=20,""Max roundtrip is 20%""",,4.57
"ERC20(underlying)._safeTransfer(wallet,fee),""cannot transfer the undlying token to the wallet for the fees""","ERC20(underlying)._safeTransfer(wallet,fee),""cannot transfer the undlying token to the wallet for the fees""",,4.57
"ExcludedFromFee[from]||ExcludedFromFee[to],""Trading is not active.""","ExcludedFromFee[from]||ExcludedFromFee[to],""Trading is not active.""",,4.57
"IERC20(vault_token).transferFrom(treasury,vaultCreated,rewardsAmount),""Failed to transfer rewards to vault""","IERC20(vault_token).transferFrom(treasury,vaultCreated,rewardsAmount),""Failed to transfer rewards to vault""",,4.57
"Rex.balanceOf(address(this))>=tokensAmount,""The exchange amount exceeds the balance of the exchange office""","Rex.balanceOf(address(this))>=tokensAmount,""The exchange amount exceeds the balance of the exchange office""",,4.57
"Token(tokenAddress).transfer(owner,amountToSend),""Could not transfer Tokens.""","Token(tokenAddress).transfer(owner,amountToSend),""Could not transfer Tokens.""",,4.57
"YfDAI(tokenAddress).transfer(owner,amountToSend),""Could not transfer Tokens.""","YfDAI(tokenAddress).transfer(owner,amountToSend),""Could not transfer Tokens.""","YfDAI(tokenAddress).transfer(owner,amountToSend)",4.57
"_baseToken.transferFrom(msg.sender,address(this),amount),""transfer in failed""","_baseToken.transferFrom(msg.sender,address(this),amount),""transfer in failed""",,4.57
"_restrictions().isVotingSenderAllowed(voting,msg.sender),""SENDER_NOT_ALLOWED""","_restrictions().isVotingSenderAllowed(voting,msg.sender),""SENDER_NOT_ALLOWED""",,4.57
"_tokenIds.current()+numberOfMints<=1000,""Maximum amount of BASA Tokens already minted.""","_tokenIds.current()+numberOfMints<=1000,""Maximum amount of BASA Tokens already minted.""",totalSupply()+numberOfMints<=10000,4.57
"active()&&vestingBegin<=block.timestamp,'PolemosVester:NOT_STARTED'","active()&&vestingBegin<=block.timestamp,'PolemosVester:NOT_STARTED'",,4.57
"address(vault)!=address(0),'no vault'","address(vault)!=address(0),'no vault'",vault!=address(0),4.57
"amount.add(this.totalSupply())<=MAX_TOKENS,""cannot mint more than MAX_TOKENS""","amount.add(this.totalSupply())<=MAX_TOKENS,""cannot mint more than MAX_TOKENS""",totalSupply().add(amount)<=MAX_TOKENS,4.57
"balanceOf(msg.sender)+_mintAmount<=maxMintAmountPerPublicAccount,""Mint limit exceeded.""","balanceOf(msg.sender)+_mintAmount<=maxMintAmountPerPublicAccount,""Mint limit exceeded.""",,4.57
"block.timestamp<auctionEndTime&&auctionedAmount<auctionCap,""auction finished""","block.timestamp<auctionEndTime&&auctionedAmount<auctionCap,""auction finished""",,4.57
"block.timestamp>lockedTokens[msg.sender][_token][index].duration,""Cannot unlock before deadline.""","block.timestamp>lockedTokens[msg.sender][_token][index].duration,""Cannot unlock before deadline.""",,4.57
"l1Token.transferFrom(msg.sender,address(this),_amount),""TRANSFER_FROM_FAILED""","l1Token.transferFrom(msg.sender,address(this),_amount),""TRANSFER_FROM_FAILED""",,4.57
"managerClosing||governorClosing||ownerOfDebtClosing,""SCC""","managerClosing||governorClosing||ownerOfDebtClosing,""SCC""",managerClosing||governorClosing||ownerOfDebtClosing,4.57
"merkleRoot!=""""&&!isStartedOpen,""PERMISSIONED SALE CLOSED""","merkleRoot!=""""&&!isStartedOpen,""PERMISSIONED SALE CLOSED""",boredDoge.exists(boredDoge.getNextTokenId()),4.57
"nft.isExtensionAdded(address(this)),""NFTExtension: this contract is not allowed to be used as an extension""","nft.isExtensionAdded(address(this)),""NFTExtension: this contract is not allowed to be used as an extension""",,4.57
now>=(marketingLockPeriodStart[msg.sender]).add(20736000),now>=(marketingLockPeriodStart[msg.sender]).add(20736000),,4.57
publicBrackets.length>_bracketIndex&&_bracketIndex>=currentPublicBracketIndex,publicBrackets.length>_bracketIndex&&_bracketIndex>=currentPublicBracketIndex,,4.57
"registry.isApprovedOrOwner(address(this),_tokenId),""TwitterValidationOperator: OPERATOR_SHOULD_BE_APPROVED""","registry.isApprovedOrOwner(address(this),_tokenId),""TwitterValidationOperator: OPERATOR_SHOULD_BE_APPROVED""",,4.57
"super.balanceOf(to)+amount<=maxWalletAmount,""Forbidden. Wallet maximum amount exceeded""","super.balanceOf(to)+amount<=maxWalletAmount,""Forbidden. Wallet maximum amount exceeded""",,4.57
"token.allowance(msg.sender,address(this))>=amount,""Check the token allowance""","token.allowance(msg.sender,address(this))>=amount,""Check the token allowance""",,4.57
"user.lockEndedTimestamp<=currentTimestamp||emergencyMode==true,""Still locked""","user.lockEndedTimestamp<=currentTimestamp||emergencyMode==true,""Still locked""",,4.57
"validateSig(encodeData(msg.sender,_referrer,_referralBasisPoint,_guildType),_signature),""Invalid signature""","validateSig(encodeData(msg.sender,_referrer,_referralBasisPoint,_guildType),_signature),""Invalid signature""",,4.57
"buyOrder.buySide==1&&sellOrder.buySide==0,""E3D""","buyOrder.buySide==1&&sellOrder.buySide==0,""E3D""",,4.569999999999999
"may[msg.sender]==1,""RwaOutputConduit2/not-mate""","may[msg.sender]==1,""RwaOutputConduit2/not-mate""",,4.569999999999999
msg.sender==agent&&state==State.transferEnabled,msg.sender==agent&&state==State.transferEnabled,,4.569999999999999
msg.sender==fundsWallet||msg.sender==teamWallet,msg.sender==fundsWallet||msg.sender==teamWallet,,4.569999999999999
"msg.value>=min&&msg.value<=max,""Invalid amount""","msg.value>=min&&msg.value<=max,""Invalid amount""",,4.569999999999999
"totalSupply()+mintAmount<=maxSupply,""Sold out!""","totalSupply()+mintAmount<=maxSupply,""Sold out!""",totalSupply()+mintAmount<=maxSupply,4.569999999999999
"totalSupply()+quantity<freeMintAmount,""luvLuv!""","totalSupply()+quantity<freeMintAmount,""luvLuv!""",,4.569999999999999
"address(_token)!=address(peg_),""peg""","address(_token)!=address(peg_),""peg""",,4.5600000000000005
address(merkleValidator)!=address(0),address(merkleValidator)!=address(0),,4.5600000000000005
"balanceOf(msg.sender)+_count<=maximumAllowedTokensPerWallet,""Max holding cap reached.""","balanceOf(msg.sender)+_count<=maximumAllowedTokensPerWallet,""Max holding cap reached.""",,4.5600000000000005
"collection.balanceOf(to)+tokenIds.length<=maxNftPerWallet,""Max token par wallet limit""","collection.balanceOf(to)+tokenIds.length<=maxNftPerWallet,""Max token par wallet limit""",,4.5600000000000005
"counter+amount<=maxSupply+1,""Not enough tokens to sell!""","counter+amount<=maxSupply+1,""Not enough tokens to sell!""",,4.5600000000000005
"file.head.state!=uint8(StateOfFile.Closed),""FR.terminateFile: Doc is closed""","file.head.state!=uint8(StateOfFile.Closed),""FR.terminateFile: Doc is closed""",,4.5600000000000005
"mscInterface(mscContractAddress).regUserViaContract(networkId,_referrerId,_parentId,amount),""regUser fail""","mscInterface(mscContractAddress).regUserViaContract(networkId,_referrerId,_parentId,amount),""regUser fail""","mscInterface(mscContractAddress).regUserViaContract(networkId,_referrerId,_parentId,amount)",4.5600000000000005
"numberMinted(msg.sender)+amount<=maxPresaleMint,""Max mint amount per wallet exceeded.""","numberMinted(msg.sender)+amount<=maxPresaleMint,""Max mint amount per wallet exceeded.""",,4.5600000000000005
"punks.punkIndexToAddress(index)==_msgSender(),""you need to own the corresponding punk to use lost & found""","punks.punkIndexToAddress(index)==_msgSender(),""you need to own the corresponding punk to use lost & found""",index<10000,4.5600000000000005
"statsByTier[tier].numSold+quantity<=statsByTier[tier].maxPresale,'Sold out of presale'","statsByTier[tier].numSold+quantity<=statsByTier[tier].maxPresale,'Sold out of presale'",,4.5600000000000005
"tokenMap.data[_tag].value!=address(0),""Token not exists""","tokenMap.data[_tag].value!=address(0),""Token not exists""",,4.5600000000000005
"validateSig(encodeData(msg.sender,_referrer,_referralBasisPoint,_landType),_signature),""Invalid signature""","validateSig(encodeData(msg.sender,_referrer,_referralBasisPoint,_landType),_signature),""Invalid signature""",,4.5600000000000005
(balanceOf(recipient)+amount)<=_maxWalletToken,(balanceOf(recipient)+amount)<=_maxWalletToken,,4.56
"(msg.value+clientBV[clientID])<=maxReentryValue,""The amount is more than maximum reentry amount""","(msg.value+clientBV[clientID])<=maxReentryValue,""The amount is more than maximum reentry amount""",,4.56
"(totalSupply()+amount)<=10000,""Exceeds Supply""","(totalSupply()+amount)<=10000,""Exceeds Supply""",!paused(),4.56
"(totalSupply()+qty)<=MAX_SUPPLY,""OUT OF STOCK""","(totalSupply()+qty)<=MAX_SUPPLY,""OUT OF STOCK""",,4.56
"CTokenInterface(cDai).transfer(msg.sender,withdrawAmt),""Dai Transfer failed""","CTokenInterface(cDai).transfer(msg.sender,withdrawAmt),""Dai Transfer failed""",CDAIInterface(cDai).redeemUnderlying(withdrawAmt)==0,4.56
"Dorkl.transferFrom(msg.sender,address(this),walletBalance),""Transfer failed""","Dorkl.transferFrom(msg.sender,address(this),walletBalance),""Transfer failed""",,4.56
"IERC20(DOLA).transfer(msg.sender,totalDolaRedeemable),""DOLA transfer failed""","IERC20(DOLA).transfer(msg.sender,totalDolaRedeemable),""DOLA transfer failed""",,4.56
"IERC20(hesAddress).balanceOf(msg.sender)>=hesAmount,""user hes is not enough""","IERC20(hesAddress).balanceOf(msg.sender)>=hesAmount,""user hes is not enough""",IERC20(hesAddress).balanceOf(address(this))>=hesAmount,4.56
"IERC20(redeemAddress).balanceOf(msg.sender)>=redeemQuantity,""ERR_BAL_REDEEM""","IERC20(redeemAddress).balanceOf(msg.sender)>=redeemQuantity,""ERR_BAL_REDEEM""",,4.56
"IERC20(token).transfer(account,amount),'MerkleDistributor: Transfer failed.'","IERC20(token).transfer(account,amount),'MerkleDistributor: Transfer failed.'","IERC20(token).transfer(account,amount)",4.56
"IETHGobblers(gooey).ownerOf(gooeyId)==msg.sender,""You do not own this Gooey""","IETHGobblers(gooey).ownerOf(gooeyId)==msg.sender,""You do not own this Gooey""",,4.56
"Invitation(invitationAddress).totalSupply()>=supplyLimit,""Challenge Locked.""","Invitation(invitationAddress).totalSupply()>=supplyLimit,""Challenge Locked.""",!challengers[msg.sender],4.56
"Token(liquiditytoken1).transfer(admin,fee),""Could not transfer deposit fee.""","Token(liquiditytoken1).transfer(admin,fee),""Could not transfer deposit fee.""",,4.56
"UNOS(tokenAddress).transfer(owner,amountToSend),""Could not transfer Tokens.""","UNOS(tokenAddress).transfer(owner,amountToSend),""Could not transfer Tokens.""",,4.56
"XFCT_CONTRACT.balanceOf(msg.sender)>=priceInXFCT(_count),""Value below price""","XFCT_CONTRACT.balanceOf(msg.sender)>=priceInXFCT(_count),""Value below price""",,4.56
"_verify(_leaf(msg.sender,dummy),proof),""Invalid Merkle Tree proof supplied.""","_verify(_leaf(msg.sender,dummy),proof),""Invalid Merkle Tree proof supplied.""",,4.56
block.timestamp>blockEndICO||msg.sender==owner,block.timestamp>blockEndICO||msg.sender==owner,block.number>=blockEndICO,4.56
bracket.tokenPerEther>0&&bracket.remainToken>0,bracket.tokenPerEther>0&&bracket.remainToken>0,,4.56
"cToken.transferFrom(msg.sender,address(this),amt)==true,""Nothing to deposit""","cToken.transferFrom(msg.sender,address(this),amt)==true,""Nothing to deposit""",,4.56
"getNFTPrice().mul(numberOfNfts)==msg.value,""Ether value sent is not correct""","getNFTPrice().mul(numberOfNfts)==msg.value,""Ether value sent is not correct""",,4.56
msg.sender==CEOAddress||msg.sender==CFOAddress,msg.sender==CEOAddress||msg.sender==CFOAddress,,4.56
msg.sender==CEOAddress||msg.sender==CTOAddress,msg.sender==CEOAddress||msg.sender==CTOAddress,,4.56
msg.sender==backEndOperator||msg.sender==owner,msg.sender==backEndOperator||msg.sender==owner,,4.56
msg.sender==ceoAddress||msg.sender==cooAddress,msg.sender==ceoAddress||msg.sender==cooAddress,,4.56
msg.sender==ceoAddress||msg.sender==ctoAddress,msg.sender==ceoAddress||msg.sender==ctoAddress,,4.56
msg.sender==cooAddress||msg.sender==ceoAddress,msg.sender==cooAddress||msg.sender==ceoAddress,,4.56
msg.sender==dev_wallet||msg.sender==uni_router,msg.sender==dev_wallet||msg.sender==uni_router,,4.56
msg.sender==operatorAddress||msg.sender==owner,msg.sender==operatorAddress||msg.sender==owner,msg.sender==operatorAddress,4.56
msg.sender==operator||msg.sender==juryOperator,msg.sender==operator||msg.sender==juryOperator,,4.56
msg.sender==owner||msg.sender==foundationOwner,msg.sender==owner||msg.sender==foundationOwner,,4.56
"n.length>0&&n.length<250,""Invalid name length""","n.length>0&&n.length<250,""Invalid name length""",,4.56
"poolToken.allowance(msg.sender,address(this))>=amount,""not enough allowance""","poolToken.allowance(msg.sender,address(this))>=amount,""not enough allowance""",,4.56
"totalSupply()+amounts[i]<=MAX_SUPPLY,""Tokens supply reached limit""","totalSupply()+amounts[i]<=MAX_SUPPLY,""Tokens supply reached limit""",,4.56
"totalSupply()+qty<=boxSupply,""Boxes Sold Out!""","totalSupply()+qty<=boxSupply,""Boxes Sold Out!""",totalSupply()+qty<=boxSupply,4.56
"whitelistAccounts[_msgSender()]+amount<=alloc,""all NFTs purchased""","whitelistAccounts[_msgSender()]+amount<=alloc,""all NFTs purchased""",,4.56
"block.number>lastWithdraw[msg.sender].add(rewardsWindow),""TokenStaking: It hasn't been enough time since your last withdrawl""","block.number>lastWithdraw[msg.sender].add(rewardsWindow),""TokenStaking: It hasn't been enough time since your last withdrawl""",,4.550000000000001
(balanceOf(recipient)+finalAmount)<=walletMax,(balanceOf(recipient)+finalAmount)<=walletMax,,4.55
"(whitelistedMints[msg.sender]+_mintAmount)<=maxMintAmountPerWhitelist,""Exceeds Max Mint amount""","(whitelistedMints[msg.sender]+_mintAmount)<=maxMintAmountPerWhitelist,""Exceeds Max Mint amount""",,4.55
"ChainLink(_pricecontract).checkPrice(_coincontract,unitprice)==true,""ChainLink price verification failed""","ChainLink(_pricecontract).checkPrice(_coincontract,unitprice)==true,""ChainLink price verification failed""",amount<=_balances[_msgSender()],4.55
"ERC20Tokens(token).burnFrom(msg.sender,amount),""omLink: cannot burn tokens""","ERC20Tokens(token).burnFrom(msg.sender,amount),""omLink: cannot burn tokens""",,4.55
"IERC20(reshETHAddress).balanceOf(msg.sender)>=amount,""Insufficient reshETH""","IERC20(reshETHAddress).balanceOf(msg.sender)>=amount,""Insufficient reshETH""",,4.55
"IERC20(tokenAddress).transfer(msg.sender,amount),""Vouchers: transfer error""","IERC20(tokenAddress).transfer(msg.sender,amount),""Vouchers: transfer error""",,4.55
"IERC20(tokenAddress).transfer(recipient_,a.amount),'Cannot transfer tokens'","IERC20(tokenAddress).transfer(recipient_,a.amount),'Cannot transfer tokens'",,4.55
"IERC20(usdtToken).balanceOf(msg.sender)>=amount,""Insufficient USDT balance""","IERC20(usdtToken).balanceOf(msg.sender)>=amount,""Insufficient USDT balance""",,4.55
"IERC721(_tokenContract).ownerOf(tokenId)==msg.sender,'Not owner of tokenId'","IERC721(_tokenContract).ownerOf(tokenId)==msg.sender,'Not owner of tokenId'",,4.55
"Receiver(_to).onERC721Received(msg.sender,_from,_tokenId,_data)==0x150b7a02","Receiver(_to).onERC721Received(msg.sender,_from,_tokenId,_data)==0x150b7a02",,4.55
"SafeMath.add(totalSupply(),numTokens)<=MAX_APES,""Exceeds total Ape supply.""","SafeMath.add(totalSupply(),numTokens)<=MAX_APES,""Exceeds total Ape supply.""",,4.55
"Token(LPTokenAddress).transfer(admin,fee),""Could not transfer deposit fee.""","Token(LPTokenAddress).transfer(admin,fee),""Could not transfer deposit fee.""",,4.55
"_underWritingRate.add(_surplusRate).add(_treasuryRate)==100,""not equal 100""","_underWritingRate.add(_surplusRate).add(_treasuryRate)==100,""not equal 100""",_underWritingRate+_surplusRate+_treasuryRate==100,4.55
"address(pair)!=address(0),""no pair""","address(pair)!=address(0),""no pair""",,4.55
address(rewardRegistry)!=address(0),address(rewardRegistry)!=address(0),,4.55
balanceOf(msg.sender)>=_value.mul(_to.length),balanceOf(msg.sender)>=_value.mul(_to.length),,4.55
"bootstrapToken.approve(address(currentRewardsContract),bootstrap),""migrateRewardsBalance: approve failed""","bootstrapToken.approve(address(currentRewardsContract),bootstrap),""migrateRewardsBalance: approve failed""","bootstrapToken.approve(address(currentRewardsContract),bootstrap)",4.55
"config.freeQuota>=purchasedFreeOfCharge.current(),""Seller: free quota < already used""","config.freeQuota>=purchasedFreeOfCharge.current(),""Seller: free quota < already used""",,4.55
getBalance()>(tokenAddHold-tokenWithdrawHold),getBalance()>(tokenAddHold-tokenWithdrawHold),,4.55
keccak256(_deadline)!=keccak256(''),keccak256(_deadline)!=keccak256(''),,4.55
"msg.sender==_manager||msg.sender==_artist,""a""","msg.sender==_manager||msg.sender==_artist,""a""",,4.55
msg.sender==admin||block.timestamp>unLockTime,msg.sender==admin||block.timestamp>unLockTime,,4.55
msg.sender==owner||msg.sender==backendAddress,msg.sender==owner||msg.sender==backendAddress,,4.55
msg.sender==owner||msg.sender==depositCreator,msg.sender==owner||msg.sender==depositCreator,msg.sender==depositCreator||msg.sender==owner,4.55
msg.sender==owner||msg.sender==usechainWallet,msg.sender==owner||msg.sender==usechainWallet,,4.55
msg.sender==owner||msg.sender==utilityAccount,msg.sender==owner||msg.sender==utilityAccount,,4.55
"n.length>0&&n.length<25,""Invalid name length""","n.length>0&&n.length<25,""Invalid name length""",n.length>0,4.55
"numberMinted(msg.sender)+amount<=MAX_MINT,""5KM: max mint amount per wallet exceeded.""","numberMinted(msg.sender)+amount<=MAX_MINT,""5KM: max mint amount per wallet exceeded.""",,4.55
"numberMinted(msg.sender)+quantity<=config.maxTokenPerAddress,""can not mint this many""","numberMinted(msg.sender)+quantity<=config.maxTokenPerAddress,""can not mint this many""",quantity>0,4.55
"numberMinted(msg.sender)+quantity<=saleConfig.AmountForAdmin,""can not mint this many""","numberMinted(msg.sender)+quantity<=saleConfig.AmountForAdmin,""can not mint this many""",,4.55
"options[i]<BPS/2,""validateParams: network fee must be smaller then BPS / 2""","options[i]<BPS/2,""validateParams: network fee must be smaller then BPS / 2""",,4.55
"payable(_withdrawalWallet).send(msg.value),""LegacyFriends: Transfer Failed""","payable(_withdrawalWallet).send(msg.value),""LegacyFriends: Transfer Failed""",,4.55
"paymentToken.transferFrom(msg.sender,address(this),_price),'Transfer ERROR'","paymentToken.transferFrom(msg.sender,address(this),_price),'Transfer ERROR'",,4.55
"presaleMintedTotal.add(amount)<=maxPresaleSupply,'Amount is too high (Would go over the presale reserve)'","presaleMintedTotal.add(amount)<=maxPresaleSupply,'Amount is too high (Would go over the presale reserve)'",presaleMintedTotal.add(amount)<=maxPresaleSupply,4.55
"priceNFT[buyStruct.nftAddress][buyStruct.tokenID]==msg.value,""MSG_VALUE is not match with listing price!""","priceNFT[buyStruct.nftAddress][buyStruct.tokenID]==msg.value,""MSG_VALUE is not match with listing price!""",,4.55
"referralAddress[rcode]!=address(msg.sender),""Sponser and sender wallet can't be same""","referralAddress[rcode]!=address(msg.sender),""Sponser and sender wallet can't be same""",amount%100==0,4.55
"retrieveController()==fetchSender(),""Not authorized. Sole controller only.""","retrieveController()==fetchSender(),""Not authorized. Sole controller only.""",,4.55
"store.getModifierCardIdByName(_name)==0,messages.modifierNameAlreadyInUse()","store.getModifierCardIdByName(_name)==0,messages.modifierNameAlreadyInUse()",,4.55
"strongToken.transferFrom(msg.sender,address(this),amount),""transfer failed""","strongToken.transferFrom(msg.sender,address(this),amount),""transfer failed""",,4.55
"token.balanceOf(address(this))>=rewardPerNFT,'NFTRewardsV2::claimReward: reward exceeds contract balance'","token.balanceOf(address(this))>=rewardPerNFT,'NFTRewardsV2::claimReward: reward exceeds contract balance'",,4.55
"tokenIds.length+inventory[msg.sender].depositedNFTs.length>=2,""Deposit: you must deposit at least 2 NFTs""","tokenIds.length+inventory[msg.sender].depositedNFTs.length>=2,""Deposit: you must deposit at least 2 NFTs""",,4.55
"totalMinted()+blindTokenIds_.length<=yingCfg.maxSupply,""mint would exceed max supply""","totalMinted()+blindTokenIds_.length<=yingCfg.maxSupply,""mint would exceed max supply""",,4.55
"verifyAddressSigner(whitelistAddress,hashMessage(max,msg.sender),signature),""SIGNATURE_VALIDATION_FAILED""","verifyAddressSigner(whitelistAddress,hashMessage(max,msg.sender),signature),""SIGNATURE_VALIDATION_FAILED""",,4.55
"walletMints[msg.sender]+_mintAmount<=maxLimitPerWallet,'Max mint 5 per Public wallet exceeded!'","walletMints[msg.sender]+_mintAmount<=maxLimitPerWallet,'Max mint 5 per Public wallet exceeded!'",,4.55
"wmMints[msg.sender]+_quantity<=allowedWmMints[msg.sender],""Max allowed mints reached""","wmMints[msg.sender]+_quantity<=allowedWmMints[msg.sender],""Max allowed mints reached""",,4.55
"(_buyFee+_sellFee)<=20,""Must keep fees at 20% or less""","(_buyFee+_sellFee)<=20,""Must keep fees at 20% or less""",,4.54
"CDAIInterface(cDai).repayBorrowBehalf(msg.sender,daiDebt)==0,""Enough DAI?""","CDAIInterface(cDai).repayBorrowBehalf(msg.sender,daiDebt)==0,""Enough DAI?""",,4.54
"ERC20(USDC_ADDRESS).transferFrom(msg.sender,beneficiary,1_000_000_000_000)","ERC20(USDC_ADDRESS).transferFrom(msg.sender,beneficiary,1_000_000_000_000)",totalSupply()==0,4.54
"IConfigContract(_configContract).validateRecoveredSignatureAddress(recoveredAddress),""Signature invalid""","IConfigContract(_configContract).validateRecoveredSignatureAddress(recoveredAddress),""Signature invalid""",,4.54
"IERC20(_tokenAddress).transfer(msg.sender,_amount),""Token transfer failed""","IERC20(_tokenAddress).transfer(msg.sender,_amount),""Token transfer failed""",,4.54
"IERC20(strikeAddress).balanceOf(msg.sender)>=inputStrikes,""ERR_BAL_STRIKE""","IERC20(strikeAddress).balanceOf(msg.sender)>=inputStrikes,""ERR_BAL_STRIKE""",,4.54
"IERC721(holoContractAddress).balanceOf(msg.sender)>0,""MUST OWN A HOLOFACT""","IERC721(holoContractAddress).balanceOf(msg.sender)>0,""MUST OWN A HOLOFACT""",,4.54
"IPermissionManager(permissionManager).isManager(msg.sender),""Only manager""","IPermissionManager(permissionManager).isManager(msg.sender),""Only manager""",,4.54
"KeepRegistry(_registry).isApprovedOperatorContract(operatorContract),""Operator contract is not approved""","KeepRegistry(_registry).isApprovedOperatorContract(operatorContract),""Operator contract is not approved""",,4.54
"USDH.allowance(msg.sender,address(this))>=_amount,""Insufficient Allowance""","USDH.allowance(msg.sender,address(this))>=_amount,""Insufficient Allowance""",,4.54
"WOM.transferFrom(msg.sender,address(this),amount),""Failed to transfer WOM""","WOM.transferFrom(msg.sender,address(this),amount),""Failed to transfer WOM""",,4.54
"_deposits[msg.sender].contains(tokenIds[i]),""Staking: token not deposited""","_deposits[msg.sender].contains(tokenIds[i]),""Staking: token not deposited""",,4.54
"_firstTokenIdBaseURIs[_firstTokenIdBaseURIs.length-1]!=totalSupply,""Owner: Cannot double push""","_firstTokenIdBaseURIs[_firstTokenIdBaseURIs.length-1]!=totalSupply,""Owner: Cannot double push""",_baseURIs.length<10,4.54
"_isAvailableInventory(uint256(item.amount),item.id),""Product out of stock""","_isAvailableInventory(uint256(item.amount),item.id),""Product out of stock""",,4.54
"_tokenSupply.current()+numberOfTokens<=MAX_WHITELIST_SUPPLY,""Purchase would exceed max number of whitelist tokens""","_tokenSupply.current()+numberOfTokens<=MAX_WHITELIST_SUPPLY,""Purchase would exceed max number of whitelist tokens""",,4.54
address(_dutchAuction)!=address(0),address(_dutchAuction)!=address(0),_dutchAuction.auctionIsOpen(),4.54
"address(baseContract.multisig())==msg.sender,""Caller is not the URI owner""","address(baseContract.multisig())==msg.sender,""Caller is not the URI owner""",msg.sender==baseContract.owner(),4.54
address(claimRegistry)!=address(0),address(claimRegistry)!=address(0),,4.54
"availableTokens().add(_amount)<=tokensForSale,""Transfered tokens have to be equal or less than proposed""","availableTokens().add(_amount)<=tokensForSale,""Transfered tokens have to be equal or less than proposed""",,4.54
"balanceOf(msg.sender)+_mintAmount<=FREE_MINTS_PER_WALLET,""Free mint limit exceeded.""","balanceOf(msg.sender)+_mintAmount<=FREE_MINTS_PER_WALLET,""Free mint limit exceeded.""",balanceOf(msg.sender)<=FREE_MINTS_PER_WALLET,4.54
"balanceOf(msg.sender)+quantity<=mintLimit,""You cannot mint more than the mintLimit.""","balanceOf(msg.sender)+quantity<=mintLimit,""You cannot mint more than the mintLimit.""",,4.54
"balanceOf(msg.sender).add(_cnt)<=10,""Exceded the Minting Count per Wallet""","balanceOf(msg.sender).add(_cnt)<=10,""Exceded the Minting Count per Wallet""",,4.54
"balanceOf(msg.sender,1)+numberOfTokens<=maxPerWallet,""Limit per wallet reached with this amount, sale not allowed""","balanceOf(msg.sender,1)+numberOfTokens<=maxPerWallet,""Limit per wallet reached with this amount, sale not allowed""",,4.54
"balanceOf(to).add(amount)<=_maxBalanceWalletPEPE,""Max Balance is reached.""","balanceOf(to).add(amount)<=_maxBalanceWalletPEPE,""Max Balance is reached.""",,4.54
"block.number>blockWhenDeposited[msg.sender]+BLOCK_DELAY,""!block""","block.number>blockWhenDeposited[msg.sender]+BLOCK_DELAY,""!block""",,4.54
"block.timestamp>publicStart&&isPublicLive==true,""Public mint not open yet""","block.timestamp>publicStart&&isPublicLive==true,""Public mint not open yet""",,4.54
"dogira.getFeeless(address(this)),""This contract should be set to feeless.""","dogira.getFeeless(address(this)),""This contract should be set to feeless.""",dogira.getFeeless(address(this)),4.54
"freeMintsWallet[msg.sender]+_mintAmount<=maxMintAmount,""You can only mint 20 assets for free!""","freeMintsWallet[msg.sender]+_mintAmount<=maxMintAmount,""You can only mint 20 assets for free!""",freeMintsWallet[msg.sender]+_mintAmount<=freeMints,4.54
"getBeautifulDiamondLockBlock(_fissionBeautifulDiamondIds[i])<block.number,""BeautifulDiamond: The fission has not been completed, please wait for the fission to complete and call again""","getBeautifulDiamondLockBlock(_fissionBeautifulDiamondIds[i])<block.number,""BeautifulDiamond: The fission has not been completed, please wait for the fission to complete and call again""",,4.54
"getOriginalIssuer()==fetchSender(),""Not authorized. Original issuer only.""","getOriginalIssuer()==fetchSender(),""Not authorized. Original issuer only.""",,4.54
"keccak256(abi.encodePacked(revealKey))==season.secret,""Invalid reveal key""","keccak256(abi.encodePacked(revealKey))==season.secret,""Invalid reveal key""",,4.54
"maxArcus.sub(decreaseByAmount)>=totalSupply(),""Amount cannot be decreased as it has already been minted""","maxArcus.sub(decreaseByAmount)>=totalSupply(),""Amount cannot be decreased as it has already been minted""",,4.54
"mscInterface(mscContractAddress).buyLevelViaContract(networkId,_planIndex,_userId,amount),""regUser fail""","mscInterface(mscContractAddress).buyLevelViaContract(networkId,_planIndex,_userId,amount),""regUser fail""",,4.54
msg.sender==ICOcontroller||msg.sender==owner,msg.sender==ICOcontroller||msg.sender==owner,,4.54
msg.sender==agent&&state==State.storeEnabled,msg.sender==agent&&state==State.storeEnabled,state==State.storeEnabled,4.54
msg.sender==icoManager||msg.sender==_account,msg.sender==icoManager||msg.sender==_account,msg.sender==tokenImporter||msg.sender==icoManager,4.54
msg.sender==owner||msg.sender==superContract,msg.sender==owner||msg.sender==superContract,,4.54
"numberMinted(msg.sender)+_mintAmount<=maxMintAmountPerAccount,""Mint limit exceeded.""","numberMinted(msg.sender)+_mintAmount<=maxMintAmountPerAccount,""Mint limit exceeded.""",,4.54
"stakedTokens[msg.sender].contains(tokenIds[i]),""Unstake: token not staked""","stakedTokens[msg.sender].contains(tokenIds[i]),""Unstake: token not staked""",,4.54
"subDomains_allowlistAddresses[name][msg.sender]!=true,""Claimed!""","subDomains_allowlistAddresses[name][msg.sender]!=true,""Claimed!""",,4.54
"tokenIdCounter.current()+recipients.length<=maxSupply,""IslandG1: exceeds max supply""","tokenIdCounter.current()+recipients.length<=maxSupply,""IslandG1: exceeds max supply""",,4.54
"totalSupply()+amountToMint<=MAX_NFT_SUPPLY,""The amount of hoes you are trying to mint exceeds the MAX_NFT_SUPPLY.""","totalSupply()+amountToMint<=MAX_NFT_SUPPLY,""The amount of hoes you are trying to mint exceeds the MAX_NFT_SUPPLY.""",,4.54
"usdtToken.transferFrom(msg.sender,address(this),_amount),""Transfer failed""","usdtToken.transferFrom(msg.sender,address(this),_amount),""Transfer failed""",,4.54
"verify(msg.sender,maxMintAmount,signature),""User/amount not authorized for presale.""","verify(msg.sender,maxMintAmount,signature),""User/amount not authorized for presale.""","verify(msg.sender,maxMintAmount,signature)",4.54
"(gasPrice/1e6)*1e6==gasPrice,'OS_GAS_PRICE_PRECISION'","(gasPrice/1e6)*1e6==gasPrice,'OS_GAS_PRICE_PRECISION'",,4.53
"IBPool_Balancer_Unzap_V1_1(_FromBalancerPoolAddress).isBound(_ToTokenContractAddress),""Token not bound""","IBPool_Balancer_Unzap_V1_1(_FromBalancerPoolAddress).isBound(_ToTokenContractAddress),""Token not bound""",,4.53
"IERC165(tokenContract).supportsInterface(interfaceId),""tokenContract does not support ERC721 interface""","IERC165(tokenContract).supportsInterface(interfaceId),""tokenContract does not support ERC721 interface""",,4.53
"IEthItemOrchestratorDependantElement(newKnowledgeBase).doubleProxy()==_doubleProxy,""Wrong Double Proxy""","IEthItemOrchestratorDependantElement(newKnowledgeBase).doubleProxy()==_doubleProxy,""Wrong Double Proxy""",,4.53
"IVault(vaultCreated).initialize(vault_token,topHoldersList,rewardsAmount),""Vault initialization failed""","IVault(vaultCreated).initialize(vault_token,topHoldersList,rewardsAmount),""Vault initialization failed""",,4.53
"_tokenIds.current()+_count<=FREE_EARLY_RESERVE_AMOUNT,""Early access has concluded.""","_tokenIds.current()+_count<=FREE_EARLY_RESERVE_AMOUNT,""Early access has concluded.""",,4.53
"deposit.freezeTime.add(PLANS_PERIODS[deposit.depositType])<=block.timestamp,""Not allowed now""","deposit.freezeTime.add(PLANS_PERIODS[deposit.depositType])<=block.timestamp,""Not allowed now""",,4.53
"liqAuthor[sender]||liqAuthor[recipient],""Trading not open yet.""","liqAuthor[sender]||liqAuthor[recipient],""Trading not open yet.""","buyOrSaleOperation(sender,recipient)",4.53
"ordinals[_loc.txId][_loc.outputIdx][_loc.satoshiIdx].seller==_seller,""TeleOrdinal: not owner""","ordinals[_loc.txId][_loc.outputIdx][_loc.satoshiIdx].seller==_seller,""TeleOrdinal: not owner""",,4.53
"r.isProtocolAndImplementationEnabled(protocol(),newImplementation),""INVALID_PROTOCOL_OR_IMPLEMENTATION""","r.isProtocolAndImplementationEnabled(protocol(),newImplementation),""INVALID_PROTOCOL_OR_IMPLEMENTATION""",,4.53
read_role(_role_id)!=bytes32(0x0),read_role(_role_id)!=bytes32(0x0),,4.53
"tokenSupply.current()+numberOfTokens<=maxSupply,""Purchase would exceed max supply.""","tokenSupply.current()+numberOfTokens<=maxSupply,""Purchase would exceed max supply.""",tokenSupply.current()+numberOfTokens<=maxSupply,4.53
"totalSupply().add(numberOfPixelToros)<=MAX_PIXEL_TOROS,""Purchase would exceed max supply of PixelToros""","totalSupply().add(numberOfPixelToros)<=MAX_PIXEL_TOROS,""Purchase would exceed max supply of PixelToros""",,4.53
"totalSupply().add(numberOfTokens)<=MAX_DUCK_FOR_SEED_AROUND,""Purchase would exceed max supply of Ducks""","totalSupply().add(numberOfTokens)<=MAX_DUCK_FOR_SEED_AROUND,""Purchase would exceed max supply of Ducks""",,4.53
"totalSupply(_id)<capacity[_id]+_quantity,""Reached max capacity""","totalSupply(_id)<capacity[_id]+_quantity,""Reached max capacity""",_quantity<=capacity[_id],4.53
"verifyAddressSigner(presaleAddress,hashMessage(max,msg.sender),signature),""SIGNATURE_VALIDATION_FAILED""","verifyAddressSigner(presaleAddress,hashMessage(max,msg.sender),signature),""SIGNATURE_VALIDATION_FAILED""",,4.53
"(totalWhitelistMint[msg.sender]+_quantity)<=maxMintTx,""Cannot mint beyond whitelist max mint""","(totalWhitelistMint[msg.sender]+_quantity)<=maxMintTx,""Cannot mint beyond whitelist max mint""",,4.529999999999999
"ERC20Interface(daiAddr).transfer(msg.sender,daiAmt),""Dai Transfer failed""","ERC20Interface(daiAddr).transfer(msg.sender,daiAmt),""Dai Transfer failed""","ERC20Interface(daiAddr).transfer(msg.sender,daiAmt)",4.529999999999999
"ERC721(contractAddress).balanceOf(msg.sender)>0,""Wallet is missing token""","ERC721(contractAddress).balanceOf(msg.sender)>0,""Wallet is missing token""",,4.529999999999999
"GBAWhitelist(whitelist).isWhitelisted(merkleProof,msg.sender),""whitelist""","GBAWhitelist(whitelist).isWhitelisted(merkleProof,msg.sender),""whitelist""","GBAWhitelist(whitelist).verify(msg.sender,merkleProof)",4.529999999999999
"IERC20(DOLA).transfer(msg.sender,dolaLeftToRedeem),""DOLA transfer failed""","IERC20(DOLA).transfer(msg.sender,dolaLeftToRedeem),""DOLA transfer failed""",,4.529999999999999
"IERC20(newtoken).balanceOf(msg.sender)>=amount_,""insufficient new tokens""","IERC20(newtoken).balanceOf(msg.sender)>=amount_,""insufficient new tokens""",,4.529999999999999
"IERC20(oldtoken).balanceOf(msg.sender)>=amount_,""insufficient old tokens""","IERC20(oldtoken).balanceOf(msg.sender)>=amount_,""insufficient old tokens""",,4.529999999999999
"IVault(vault).governance()==msg.sender,""Registry: wrong vault governance""","IVault(vault).governance()==msg.sender,""Registry: wrong vault governance""",vaultReleaseDelta<numVaultReleases&&wrapperReleaseDelta<numWrapperReleases,4.529999999999999
"Token(tokenAddress).transfer(admin,fee),""Could not transfer deposit fee.""","Token(tokenAddress).transfer(admin,fee),""Could not transfer deposit fee.""",,4.529999999999999
"Token(tokenAddress).transfer(owner,fee),""Could not transfer deposit fee.""","Token(tokenAddress).transfer(owner,fee),""Could not transfer deposit fee.""",,4.529999999999999
"_burnToken.allowance(msg.sender,address(this))>=total,""Invalid allowance""","_burnToken.allowance(msg.sender,address(this))>=total,""Invalid allowance""",,4.529999999999999
"_lpToken.transferFrom(msg.sender,address(this),_amount),""Transfer issues""","_lpToken.transferFrom(msg.sender,address(this),_amount),""Transfer issues""",,4.529999999999999
balanceOf[owner]+(_value)>=balanceOf[owner],balanceOf[owner]+(_value)>=balanceOf[owner],,4.529999999999999
"block.timestamp<=saleStartTime||saleStartTime==0,""already start the sale""","block.timestamp<=saleStartTime||saleStartTime==0,""already start the sale""",,4.529999999999999
"firnToken.balanceOf(address(this))==FIRN_AMOUNT,""Token balance is wrong.""","firnToken.balanceOf(address(this))==FIRN_AMOUNT,""Token balance is wrong.""",,4.529999999999999
msg.sender==_token||msg.sender==_tokenowner,msg.sender==_token||msg.sender==_tokenowner,,4.529999999999999
msg.sender==debtor||msg.sender==underwriter,msg.sender==debtor||msg.sender==underwriter,msg.sender==debtor||msg.sender==underwriter,4.529999999999999
"msg.sender==mAd||msg.sender==sAd,""only mAn""","msg.sender==mAd||msg.sender==sAd,""only mAn""",,4.529999999999999
"msg.value==(_tokensToMint*_tokenPrice),""Media: Wrong Amount Transferred!""","msg.value==(_tokensToMint*_tokenPrice),""Media: Wrong Amount Transferred!""",,4.529999999999999
"msg.value>=SafeMath.mul(amount,wlMintPriceInWei()),""incorrect value sent""","msg.value>=SafeMath.mul(amount,wlMintPriceInWei()),""incorrect value sent""",,4.529999999999999
"shiburai.transferFrom(msg.sender,address(this),_amount),""Transfer failed""","shiburai.transferFrom(msg.sender,address(this),_amount),""Transfer failed""",,4.529999999999999
"strongToken.transferFrom(msg.sender,address(this),sFee),""transfer failed""","strongToken.transferFrom(msg.sender,address(this),sFee),""transfer failed""",,4.529999999999999
"taxExcluded[msg.sender],""only-tax-excluded""","taxExcluded[msg.sender],""only-tax-excluded""",,4.529999999999999
"token.allowance(msg.sender,address(this))>=_amount,""Not enough allowance""","token.allowance(msg.sender,address(this))>=_amount,""Not enough allowance""",,4.529999999999999
"tokenInterface(_token).transfer(tx.origin,gain_T),""token transfer failed""","tokenInterface(_token).transfer(tx.origin,gain_T),""token transfer failed""",,4.529999999999999
"wards[msg.sender]==1,""Token/not-authorized""","wards[msg.sender]==1,""Token/not-authorized""",,4.529999999999999
address(beneficiary)!=address(0),address(beneficiary)!=address(0),beneficiary!=address(0),4.5200000000000005
"atomJoins[_atomId]>=CaBattleContract.arenaKinds(arenas[_arenaId].kind,4)","atomJoins[_atomId]>=CaBattleContract.arenaKinds(arenas[_arenaId].kind,4)",,4.5200000000000005
"balanceOf[to]<=max_holding_amount||exclude_from_limits[to],""Max holding per wallet exceeded""","balanceOf[to]<=max_holding_amount||exclude_from_limits[to],""Max holding per wallet exceeded""",,4.5200000000000005
"isVault(address(vault)),""!vault""","isVault(address(vault)),""!vault""",,4.5200000000000005
"numberMinted(msg.sender)+amount<=maxAllowed,""Max mint amount per wallet exceeded.""","numberMinted(msg.sender)+amount<=maxAllowed,""Max mint amount per wallet exceeded.""",,4.5200000000000005
"policy.premiumPaidAmount+amount<=policy.premiumExpectedAmount,""ERROR:TRS-030:AMOUNT_TOO_BIG""","policy.premiumPaidAmount+amount<=policy.premiumExpectedAmount,""ERROR:TRS-030:AMOUNT_TOO_BIG""",,4.5200000000000005
"(!isContract(msg.sender)),""external contracts are not allowed""","(!isContract(msg.sender)),""external contracts are not allowed""",,4.52
"(amount+balanceOf(to))<limitNumber,""limit""","(amount+balanceOf(to))<limitNumber,""limit""",,4.52
"(qty+totalSupply())<=tokenLimit,""sold out""","(qty+totalSupply())<=tokenLimit,""sold out""",,4.52
"IConnector(_connector).isMoneyPoolAdmin(msg.sender),'OnlyMoneyPoolAdmin'","IConnector(_connector).isMoneyPoolAdmin(msg.sender),'OnlyMoneyPoolAdmin'",,4.52
"IDEIStablecoin(dei_contract_address).verify_price(sighash,sigs),""POOL::mint1t1DEI: invalid signatures""","IDEIStablecoin(dei_contract_address).verify_price(sighash,sigs),""POOL::mint1t1DEI: invalid signatures""",,4.52
"IERC721(baseTokenContract).ownerOf(_baseToken)==msg.sender,""wrong owner""","IERC721(baseTokenContract).ownerOf(_baseToken)==msg.sender,""wrong owner""",,4.52
"IFactory(factory).containsDao(msg.sender),""Shop: only DAO can deploy LP""","IFactory(factory).containsDao(msg.sender),""Shop: only DAO can deploy LP""",,4.52
"IHandleToken(token).balanceOf(msg.sender)>=amount,""Insufficient balance""","IHandleToken(token).balanceOf(msg.sender)>=amount,""Insufficient balance""",,4.52
"RoleManager(roleManagerAddr).isController(msg.sender),'only controllers'","RoleManager(roleManagerAddr).isController(msg.sender),'only controllers'",AccessController(roleManagerAddr).isController(msg.sender),4.52
"_balances[_msgSender()]>0,""Teleport: Must transfer +ve amount""","_balances[_msgSender()]>0,""Teleport: Must transfer +ve amount""",,4.52
"_tiers[tierId].allowListNumberMinted[from]+numberOfTokens<=limit,'Purchase would exceed token limit for address'","_tiers[tierId].allowListNumberMinted[from]+numberOfTokens<=limit,'Purchase would exceed token limit for address'",,4.52
"_tokenSupply.current()+numberOfTokens<=MAX_FRIENDS_SUPPLY,""Purchase would exceed max number of whitelist tokens""","_tokenSupply.current()+numberOfTokens<=MAX_FRIENDS_SUPPLY,""Purchase would exceed max number of whitelist tokens""",_tokenSupply.current()+numberOfTokens<=MAX_FRIENDS_SUPPLY,4.52
"_totalMinted()+quantities[i]<=supplyLimit,""Supply cap reached""","_totalMinted()+quantities[i]<=supplyLimit,""Supply cap reached""",,4.52
"addressToMintCount[msg.sender]+amount<=MAX_MINTS_PER_ADDRESS,""Exceeds max mint per address!""","addressToMintCount[msg.sender]+amount<=MAX_MINTS_PER_ADDRESS,""Exceeds max mint per address!""",,4.52
"admins[msg.sender]==1,""d2o/not-authorized""","admins[msg.sender]==1,""d2o/not-authorized""",,4.52
"ape.allowance(msg.sender,address(this))>=cost,""APE Allowance Not Enough""","ape.allowance(msg.sender,address(this))>=cost,""APE Allowance Not Enough""",,4.52
"balances[from]>=amountWithFee,""balance must be >= amount + transfer fee""","balances[from]>=amountWithFee,""balance must be >= amount + transfer fee""",,4.52
gi.GameResult==0&&gi.Banker==currentBanker,gi.GameResult==0&&gi.Banker==currentBanker,,4.52
"maticToken.balanceOf(address(this))>=vesting.amount,INSUFFICIENT_BALANCE","maticToken.balanceOf(address(this))>=vesting.amount,INSUFFICIENT_BALANCE",,4.52
"msg.sender==ISmardexOwnableFactory(factory).owner(),""SmarDex: NOT_OWNER""","msg.sender==ISmardexOwnableFactory(factory).owner(),""SmarDex: NOT_OWNER""",,4.52
msg.sender==beneficiary||msg.sender==owner,msg.sender==beneficiary||msg.sender==owner,canReceiveTokens,4.52
msg.sender==owner||msg.sender==techAccount,msg.sender==owner||msg.sender==techAccount,,4.52
msg.sender==owner||msg.sender==techSupport,msg.sender==owner||msg.sender==techSupport,,4.52
msg.sender==owner||msg.sender==underwriter,msg.sender==owner||msg.sender==underwriter,msg.sender==underwriter||msg.sender==owner,4.52
msg.value>=minICO&&msg.value<=vestingLimit,msg.value>=minICO&&msg.value<=vestingLimit,,4.52
"newSeason.endTime()>prevSeason.claimEndTime(),'Series: Invalid end time'","newSeason.endTime()>prevSeason.claimEndTime(),'Series: Invalid end time'",,4.52
"newSeason.startTime()>=prevSeason.endTime(),'Series: Invalid start time'","newSeason.startTime()>=prevSeason.endTime(),'Series: Invalid start time'",newSeason.startTime()>prevSeason.lockEndTime(),4.52
"nft.balanceOf(_msgSender(),_tokenId)>=_quantity,""Must hold enough NFTs.""","nft.balanceOf(_msgSender(),_tokenId)>=_quantity,""Must hold enough NFTs.""",,4.52
"tokenOwner[msg.sender].add(_id),""Could not add _id!""","tokenOwner[msg.sender].add(_id),""Could not add _id!""",,4.52
"totalSupply()+amount<=maxTotal,'!noneLeft'","totalSupply()+amount<=maxTotal,'!noneLeft'",,4.52
"totalSupply()+count[i]<=supply,""Mint would go past max supply""","totalSupply()+count[i]<=supply,""Mint would go past max supply""",,4.52
"totalSupply()<lpcs().cap,""PCappedSmartPool.withinCap: Cap limit reached""","totalSupply()<lpcs().cap,""PCappedSmartPool.withinCap: Cap limit reached""",,4.52
"verifyAddressSigner(raffleAddress,hashMessage(max,msg.sender),signature),""SIGNATURE_VALIDATION_FAILED""","verifyAddressSigner(raffleAddress,hashMessage(max,msg.sender),signature),""SIGNATURE_VALIDATION_FAILED""",,4.52
"(_totalSupply.add(amount))<_cap,""ERC20: Minting exceeds cap!""","(_totalSupply.add(amount))<_cap,""ERC20: Minting exceeds cap!""",,4.51
(balanceOf(recipient)+amount)<=_walletMax,(balanceOf(recipient)+amount)<=_walletMax,,4.51
"ERC721.balanceOf(msg.sender)+num<=_maxNFTAmount,""Exceeds maximum NFTs per wallet""","ERC721.balanceOf(msg.sender)+num<=_maxNFTAmount,""Exceeds maximum NFTs per wallet""",,4.51
"MerkleProof.verify(_merkleProof,subDomains_allowList[name],leaf),""Invalid proof!""","MerkleProof.verify(_merkleProof,subDomains_allowList[name],leaf),""Invalid proof!""",,4.51
"Token(tokenAddress).transfer(owner,tokens),""Could not transfer tokens.""","Token(tokenAddress).transfer(owner,tokens),""Could not transfer tokens.""",,4.51
"_feeExcludes[from]||_feeExcludes[to],""Trading is not active.""","_feeExcludes[from]||_feeExcludes[to],""Trading is not active.""",,4.51
"_isFeeExempt[from]||_isFeeExempt[to],""Trading is not active.""","_isFeeExempt[from]||_isFeeExempt[to],""Trading is not active.""",,4.51
address(_wethToken)!=address(0),address(_wethToken)!=address(0),,4.51
"amount>(TOTAL_SUPPLY*15)/10000000,""CIEL: too small""","amount>(TOTAL_SUPPLY*15)/10000000,""CIEL: too small""",,4.51
"atomWins[_atomId]>=CaBattleContract.arenaKinds(arenas[_arenaId].kind,5)","atomWins[_atomId]>=CaBattleContract.arenaKinds(arenas[_arenaId].kind,5)",,4.51
"balanceOf(msg.sender,_tokenId)+_amount<=config.MAX_PUBLIC_PER_WALLET,""Exceed max""","balanceOf(msg.sender,_tokenId)+_amount<=config.MAX_PUBLIC_PER_WALLET,""Exceed max""",token.publicClaimed+_amount<=config.MAX_PUBLIC_PER_WALLET,4.51
balances[msg.sender]>=(totalRemaining.add(_amount)),balances[msg.sender]>=(totalRemaining.add(_amount)),,4.51
"block.timestamp-stakers[msg.sender].firstStakedTimestamp>=minStakingDuration,""To claim, you have to wait 6 days after your deposit""","block.timestamp-stakers[msg.sender].firstStakedTimestamp>=minStakingDuration,""To claim, you have to wait 6 days after your deposit""",,4.51
"chainRunners.ownerOf(tokenId)==_msgSender(),""You cannot give candies to a runner that you do not own""","chainRunners.ownerOf(tokenId)==_msgSender(),""You cannot give candies to a runner that you do not own""",ownerOf(tokenId)==msg.sender,4.51
"coreToken.allowance(msg.sender,address(this))>0,""Token balance is zero""","coreToken.allowance(msg.sender,address(this))>0,""Token balance is zero""",,4.51
"dailyTransfers[day][from].add(amount)<=maxTxFrom,""APENOUT: This account has exceeded max daily limit""","dailyTransfers[day][from].add(amount)<=maxTxFrom,""APENOUT: This account has exceeded max daily limit""",,4.51
"gang.allowance(msg.sender,address(this))>=cost,""GANG Allowance not set""","gang.allowance(msg.sender,address(this))>=cost,""GANG Allowance not set""",,4.51
"iERC20.transfer(_seller,price.sub(contractCut)),""Fail to transfer fund""","iERC20.transfer(_seller,price.sub(contractCut)),""Fail to transfer fund""",,4.51
"iERC20.transferFrom(msg.sender,address(this),_price),""Fail to transfer""","iERC20.transferFrom(msg.sender,address(this),_price),""Fail to transfer""",,4.51
"jackpotSize+lockedInBets<=address(this).balance,""Cannot afford to lose this bet.""","jackpotSize+lockedInBets<=address(this).balance,""Cannot afford to lose this bet.""",,4.51
limiter[identity][sender]<(now-adminRate),limiter[identity][sender]<(now-adminRate),limiter[identity][sender]+adminRate<now,4.51
"morpherAccessControl.hasRole(PAUSER_ROLE,_msgSender()),""MorpherToken: must have pauser role to pause""","morpherAccessControl.hasRole(PAUSER_ROLE,_msgSender()),""MorpherToken: must have pauser role to pause""",,4.51
msg.sender==Admin||msg.sender==SuperAdmin,msg.sender==Admin||msg.sender==SuperAdmin,,4.51
"msg.sender==IOwnable(nftAddress).admin(),""Not the NFT collection admin""","msg.sender==IOwnable(nftAddress).admin(),""Not the NFT collection admin""",,4.51
"msg.sender==IOwnable(nftAddress).owner(),""Not the NFT collection owner""","msg.sender==IOwnable(nftAddress).owner(),""Not the NFT collection owner""",,4.51
"msg.sender==address(pyeSwapRouter)||isPair,""PYE: NOT_ALLOWED""","msg.sender==address(pyeSwapRouter)||isPair,""PYE: NOT_ALLOWED""",,4.51
msg.sender==addressApi||msg.sender==owner,msg.sender==addressApi||msg.sender==owner,,4.51
msg.sender==adminOwner||msg.sender==owner,msg.sender==adminOwner||msg.sender==owner,,4.51
msg.sender==controller||msg.sender==vault,msg.sender==controller||msg.sender==vault,,4.51
msg.sender==owner||msg.sender==controller,msg.sender==owner||msg.sender==controller,,4.51
msg.sender==treasury||msg.sender==bonding,msg.sender==treasury||msg.sender==bonding,msg.sender==treasury||msg.sender==bonding,4.51
"msg.value>=SafeMath.mul(amount,mintPriceInWei()),""incorrect value sent""","msg.value>=SafeMath.mul(amount,mintPriceInWei()),""incorrect value sent""",,4.51
"numberMinted(msg.sender)+numberOfMints<=ADDRESS_MAX_MINTS,""Sender is trying to mint more than allocated tokens""","numberMinted(msg.sender)+numberOfMints<=ADDRESS_MAX_MINTS,""Sender is trying to mint more than allocated tokens""",,4.51
"owner()==msg.sender||_isPresaleMintEnabled,""Presale disabled""","owner()==msg.sender||_isPresaleMintEnabled,""Presale disabled""",,4.51
"presalePurchases[msg.sender].add(_PresaleVFemmeMintAmount)<=maxPresaleVFemmeMintAmount,'Can only mint maxPresale_VFemme_Mint tokens during the presale'","presalePurchases[msg.sender].add(_PresaleVFemmeMintAmount)<=maxPresaleVFemmeMintAmount,'Can only mint maxPresale_VFemme_Mint tokens during the presale'",,4.51
"quantity+swoopsNftContract.totalSupply()<=maxTokenSupply,""Not enough tokens left to buy the requested quantity""","quantity+swoopsNftContract.totalSupply()<=maxTokenSupply,""Not enough tokens left to buy the requested quantity""",,4.51
"standardSaleActive||msg.sender==owner(),""sale must be active""","standardSaleActive||msg.sender==owner(),""sale must be active""",,4.51
"tokenA.transferFrom(msg.sender,address(this),_amount),""Transfer failed""","tokenA.transferFrom(msg.sender,address(this),_amount),""Transfer failed""","tokenA.transferFrom(msg.sender,owner,_amount)",4.51
"tokensPerWallet[msg.sender]+amount<=maxSelfMint,""MaisonFaceless: You can't mint more NFTs!""","tokensPerWallet[msg.sender]+amount<=maxSelfMint,""MaisonFaceless: You can't mint more NFTs!""",,4.51
"totalSupply()+qty<=mintSupply,""Sold Out!""","totalSupply()+qty<=mintSupply,""Sold Out!""",,4.51
"totalSupply().add(MAX_RESERVE_TOKEN)<=MAX_SUPPLY,""Exceeded Max supply.""","totalSupply().add(MAX_RESERVE_TOKEN)<=MAX_SUPPLY,""Exceeded Max supply.""",,4.51
"totalSupply().add(recipients.length)<=MAX_SUPPLY,""Exceeding max supply""","totalSupply().add(recipients.length)<=MAX_SUPPLY,""Exceeding max supply""",recipients.length<=10,4.51
"totalSupply()<=newMaxCryptoBrews,""Not enough brews left to drink! (burn has been canceled)""","totalSupply()<=newMaxCryptoBrews,""Not enough brews left to drink! (burn has been canceled)""",newMaxCryptoBrews>0,4.51
"transactions[transactionId].destination!=address(0),""transactionId is not exists""","transactions[transactionId].destination!=address(0),""transactionId is not exists""",,4.51
"uint8(_rewardType)>uint8(RewardType.None),""TravelCare::changeRewardRequirements: invalid reward type""","uint8(_rewardType)>uint8(RewardType.None),""TravelCare::changeRewardRequirements: invalid reward type""",,4.51
"vaultParameters.isOracleTypeEnabled(oracleType[asset][user],asset),""Unit Protocol: WRONG_ORACLE_TYPE""","vaultParameters.isOracleTypeEnabled(oracleType[asset][user],asset),""Unit Protocol: WRONG_ORACLE_TYPE""",,4.51
"vestToken.balanceOf(address(this))>=vesting.amount,INSUFFICIENT_BALANCE","vestToken.balanceOf(address(this))>=vesting.amount,INSUFFICIENT_BALANCE",,4.51
"viaDatas[i].id==viaDatas[i-1].id,Errors.ID_MISMATCH","viaDatas[i].id==viaDatas[i-1].id,Errors.ID_MISMATCH",,4.51
"whitelistClaimed[msg.sender]+_mintAmount<=nftPerAddressLimit,""Max Whitelist mint exceeded!""","whitelistClaimed[msg.sender]+_mintAmount<=nftPerAddressLimit,""Max Whitelist mint exceeded!""",,4.51
"whitelistClaimed[msg.sender]+quantity<=maxWhitelist,""You're not allowed to mint this Much!""","whitelistClaimed[msg.sender]+quantity<=maxWhitelist,""You're not allowed to mint this Much!""",,4.51
"Channels[_lcID].partyAddresses[0]==ECTools.recoverSigner(_state,_sigA)","Channels[_lcID].partyAddresses[0]==ECTools.recoverSigner(_state,_sigA)",,4.5
"Channels[_lcID].partyAddresses[1]==ECTools.recoverSigner(_state,_sigI)","Channels[_lcID].partyAddresses[1]==ECTools.recoverSigner(_state,_sigI)",,4.5
"IERC20(token).balanceOf(msg.sender)>=_amount,'Error: not enough funds'","IERC20(token).balanceOf(msg.sender)>=_amount,'Error: not enough funds'",,4.5
"IERC20(wgmiV2).transfer(msg.sender,amountToClaim),""CLAIM_WGMI2_FAILED""","IERC20(wgmiV2).transfer(msg.sender,amountToClaim),""CLAIM_WGMI2_FAILED""",,4.5
"IPermissionManager(permissionManager).isAdmin(msg.sender),""Only admin""","IPermissionManager(permissionManager).isAdmin(msg.sender),""Only admin""",,4.5
"TokensPerMinter[msg.sender]+amount<=limitTokensPerWallet,'Exceed limit tokens per wallet!'","TokensPerMinter[msg.sender]+amount<=limitTokensPerWallet,'Exceed limit tokens per wallet!'",,4.5
"_callbacks[requestId].callbackContract!=address(0),""Callback contract not found""","_callbacks[requestId].callbackContract!=address(0),""Callback contract not found""",,4.5
"_initParams._strikeSelection!=address(0),""!_strikeSelection""","_initParams._strikeSelection!=address(0),""!_strikeSelection""",,4.5
"_tokenSupply.current()+numberOfTokens<=MAX_SUPPLY,""Quantity exceeds max supply.""","_tokenSupply.current()+numberOfTokens<=MAX_SUPPLY,""Quantity exceeds max supply.""",,4.5
"actionInQueue[target]!=bytes32(0x0),""StakingRewardsProxy: No claim or withdrawal is in queue for this address""","actionInQueue[target]!=bytes32(0x0),""StakingRewardsProxy: No claim or withdrawal is in queue for this address""",,4.5
address(recipient)!=address(0),address(recipient)!=address(0),,4.5
"address(this).balance.sub(amount)>=0,""amount exceeds contract balance""","address(this).balance.sub(amount)>=0,""amount exceeds contract balance""",,4.5
address(validator)!=address(0),address(validator)!=address(0),,4.5
"cToken.transferFrom(msg.sender,address(this),amt),""Nothing to deposit""","cToken.transferFrom(msg.sender,address(this),amt),""Nothing to deposit""",,4.5
"configuredTokenRates.length()==supportedTokens.length(),""MISSING_RATE""","configuredTokenRates.length()==supportedTokens.length(),""MISSING_RATE""",,4.5
delegateProxy.implementation()==registry.delegateProxyImplementation(),delegateProxy.implementation()==registry.delegateProxyImplementation(),,4.5
"morpherAccessControl.hasRole(BURNER_ROLE,_msgSender()),""MorpherToken: must have burner role to burn""","morpherAccessControl.hasRole(BURNER_ROLE,_msgSender()),""MorpherToken: must have burner role to burn""",,4.5
"morpherAccessControl.hasRole(MINTER_ROLE,_msgSender()),""MorpherToken: must have minter role to mint""","morpherAccessControl.hasRole(MINTER_ROLE,_msgSender()),""MorpherToken: must have minter role to mint""",,4.5
msg.sender==admin||msg.sender==coldAdmin,msg.sender==admin||msg.sender==coldAdmin,msg.sender==admin,4.5
msg.sender==authority||msg.sender==owner,msg.sender==authority||msg.sender==owner,,4.5
msg.sender==author||msg.sender==coauthor,msg.sender==author||msg.sender==coauthor,,4.5
msg.sender==crowdsale||msg.sender==owner,msg.sender==crowdsale||msg.sender==owner,msg.sender==crowdsale,4.5
msg.sender==guagua||msg.sender==miaomiao,msg.sender==guagua||msg.sender==miaomiao,msg.sender==guagua||msg.sender==miaomiao,4.5
msg.sender==moderator||msg.sender==owner,msg.sender==moderator||msg.sender==owner,,4.5
msg.sender==owner||msg.sender==crowdSale,msg.sender==owner||msg.sender==crowdSale,,4.5
msg.sender==owner||msg.sender==saleAgent,msg.sender==owner||msg.sender==saleAgent,,4.5
msg.sender==saleAgent||msg.sender==owner,msg.sender==saleAgent||msg.sender==owner,msg.sender==owner||msg.sender==saleAgent,4.5
msg.sender==signer1||msg.sender==signer2,msg.sender==signer1||msg.sender==signer2,,4.5
"msg.sender==tx.origin||allowedContracts[msg.sender],""Proxy contract not allowed""","msg.sender==tx.origin||allowedContracts[msg.sender],""Proxy contract not allowed""",,4.5
"newNum>(10*1),""Cannot set maxWallet lower than 1%""","newNum>(10*1),""Cannot set maxWallet lower than 1%""",,4.5
"publicMintCount[msg.sender]+_mintAmount<=maxLimitPerWallet,'Max mint per wallet exceeded!'","publicMintCount[msg.sender]+_mintAmount<=maxLimitPerWallet,'Max mint per wallet exceeded!'",,4.5
"st.transferFrom(msg.sender,address(this),amount),_transferErrorMessage","st.transferFrom(msg.sender,address(this),amount),_transferErrorMessage",,4.5
"supply.current()+winners.length<=AIRDROP_SUPPLY,'Not enough tokens left to gift'","supply.current()+winners.length<=AIRDROP_SUPPLY,'Not enough tokens left to gift'",winners.length<=AIRDROP_SUPPLY,4.5
"t.transfer(msg.sender,t.balanceOf(this))","t.transfer(msg.sender,t.balanceOf(this))",,4.5
"team.getCountPosition(_teamId,_position)<team.countPlayersInPosition()","team.getCountPosition(_teamId,_position)<team.countPlayersInPosition()",_position>0,4.5
"totalSupply(id)+quantity<=maxSupply[id],""Reached max supply""","totalSupply(id)+quantity<=maxSupply[id],""Reached max supply""",,4.5
"CENNZ.transferFrom(msg.sender,address(this),amount),""Transfer failed""","CENNZ.transferFrom(msg.sender,address(this),amount),""Transfer failed""",,4.49
"DewToken.balanceOf(address(this))>=redneck.amount,""No Enough Balance""","DewToken.balanceOf(address(this))>=redneck.amount,""No Enough Balance""",redneck.amount>0,4.49
"ERC721._isApprovedOrOwner(_msgSender(),tokenId),""ERC721: transfer caller is not owner nor approved""","ERC721._isApprovedOrOwner(_msgSender(),tokenId),""ERC721: transfer caller is not owner nor approved""",,4.49
"HGToken.balanceOf(address(this))>=vesting.amount,INSUFFICIENT_BALANCE","HGToken.balanceOf(address(this))>=vesting.amount,INSUFFICIENT_BALANCE",,4.49
"IERC721(cardContractAddress).ownerOf(tokenId)==msg.sender,""NOT OWNER""","IERC721(cardContractAddress).ownerOf(tokenId)==msg.sender,""NOT OWNER""",,4.49
"IERC721(holoContractAddress).ownerOf(tokenId)==msg.sender,""NOT OWNER""","IERC721(holoContractAddress).ownerOf(tokenId)==msg.sender,""NOT OWNER""",,4.49
"IOneHiTableLogic(tableAddr).claimTreasure(msg.sender,nftAddr,tokenId)","IOneHiTableLogic(tableAddr).claimTreasure(msg.sender,nftAddr,tokenId)",,4.49
"IStaking(stakingAddress).canStakeTokens(msg.sender),""Unable to stake""","IStaking(stakingAddress).canStakeTokens(msg.sender),""Unable to stake""",,4.49
"LINK.balanceOf(address(this))>=0.25ether,""Not enough LINK to pay fee""","LINK.balanceOf(address(this))>=0.25ether,""Not enough LINK to pay fee""",,4.49
"_as.vaultParticipants[vaultId][i].paid>=_as.vaultsExtensions[vaultId].minimumFunding,""E2""","_as.vaultParticipants[vaultId][i].paid>=_as.vaultsExtensions[vaultId].minimumFunding,""E2""",,4.49
"_checkOnERC721Received(address(0),to,startTransferTokenId,quantity,_data),""ERC721Psi: transfer to non ERC721Receiver implementer""","_checkOnERC721Received(address(0),to,startTransferTokenId,quantity,_data),""ERC721Psi: transfer to non ERC721Receiver implementer""",,4.49
"_numberMinted(msg.sender)+amount<=whitelistMaxAmount,""You've minted the maximum amount of boats that you can""","_numberMinted(msg.sender)+amount<=whitelistMaxAmount,""You've minted the maximum amount of boats that you can""",,4.49
"_priceToken.transferFrom(_msgSender(),_bank,price),""ERC721Minter: There was a problem with payment""","_priceToken.transferFrom(_msgSender(),_bank,price),""ERC721Minter: There was a problem with payment""",,4.49
"_tokenIds.current()+receivers.length<=MAX_TOKENS,""Exceeds maximum token supply""","_tokenIds.current()+receivers.length<=MAX_TOKENS,""Exceeds maximum token supply""",,4.49
address(lpWallet)!=address(0),address(lpWallet)!=address(0),,4.49
"ash.allowance(msg.sender,address(this))>=cost,""ASH Allowance not set""","ash.allowance(msg.sender,address(this))>=cost,""ASH Allowance not set""",,4.49
"balanceOf(msg.sender)+_quantity<=2,""Would reach max NFT per holder in presale.""","balanceOf(msg.sender)+_quantity<=2,""Would reach max NFT per holder in presale.""",_quantity>0,4.49
"block.timestamp-user.lastWithdrawTime>30days,""min 1 month gap is required b/w two claims""","block.timestamp-user.lastWithdrawTime>30days,""min 1 month gap is required b/w two claims""",,4.49
getPair(pairName)!=address(0),getPair(pairName)!=address(0),,4.49
"hasCapacityFor(buffer,bytes(str).length),""Buffer.append: no capacity""","hasCapacityFor(buffer,bytes(str).length),""Buffer.append: no capacity""",,4.49
"hash.recover(signature)==getValidator(),""Vault: Invalid transaction.""","hash.recover(signature)==getValidator(),""Vault: Invalid transaction.""",,4.49
"mscInterface(mscContractAddress).regUserViaContract(_networkId,pId,_parentId,amount),""regUser fail""","mscInterface(mscContractAddress).regUserViaContract(_networkId,pId,_parentId,amount),""regUser fail""",,4.49
msg.value>=(10**16),msg.value>=(10**16),,4.49
"msg.value>=buyCoinAmount.mul(oneCoinNeedAmount),""umm..... you have to pay more""","msg.value>=buyCoinAmount.mul(oneCoinNeedAmount),""umm.....  you have to pay more""",,4.49
"niftyMoji(niftyMojiContractAddress).ownerOf(_tokenID)==user,""user is not the owner of this tokenID""","niftyMoji(niftyMojiContractAddress).ownerOf(_tokenID)==user,""user is not the owner of this tokenID""",,4.49
"numberMinted(msg.sender)+_count<=maxMint,""Max mint amount per wallet exceeded.""","numberMinted(msg.sender)+_count<=maxMint,""Max mint amount per wallet exceeded.""",,4.49
"presalePurchases[msg.sender].add(numberOfTokens)<=MAX_PRESALE_PRIMATE_PURCHASE,'Can only mint MAX_PRESALE_PRIMATE_PURCHASE tokens during the presale'","presalePurchases[msg.sender].add(numberOfTokens)<=MAX_PRESALE_PRIMATE_PURCHASE,'Can only mint MAX_PRESALE_PRIMATE_PURCHASE tokens during the presale'",,4.49
"recipients.length.add(totalSupply())<=_maxSupply,""Exceeds max supply""","recipients.length.add(totalSupply())<=_maxSupply,""Exceeds max supply""",,4.49
"rewardToken.balanceOf(address(this))>=unclaimedRewards,""Insufficient contract reward token balance""","rewardToken.balanceOf(address(this))>=unclaimedRewards,""Insufficient contract reward token balance""",,4.49
"rewardToken.balanceOf(msg.sender)>=_amount,""You do not enough balance for funding reward token! Please have enough token balance""","rewardToken.balanceOf(msg.sender)>=_amount,""You do not enough balance for funding reward token! Please have enough token balance""",,4.49
"safeSub(balances[_from],lockbalances[_from])>=_value,""ARTI: Free Transfer Balance is insufficient.""","safeSub(balances[_from],lockbalances[_from])>=_value,""ARTI: Free Transfer Balance is insufficient.""",,4.49
"tokenCounter.current()+addresses.length<=128,""All NFTs are already rolled over""","tokenCounter.current()+addresses.length<=128,""All NFTs are already rolled over""",,4.49
"wnsErc721.ownerOf(_tokenId-1)==_address,""Primary Name not set for the address.""","wnsErc721.ownerOf(_tokenId-1)==_address,""Primary Name not set for the address.""",wnsErc721.ownerOf(_tokenId)==_address,4.49
(balanceOf[_to]+_value)>=balanceOf[_to],(balanceOf[_to]+_value)>=balanceOf[_to],,4.489999999999999
msg.sender==executor||msg.sender==owner,msg.sender==executor||msg.sender==owner,,4.489999999999999
msg.sender==oldOwner||msg.sender==owner,msg.sender==oldOwner||msg.sender==owner,,4.489999999999999
msg.sender==owner||msg.sender==TREASURY,msg.sender==owner||msg.sender==TREASURY,"_notRevealedURI!=bytes("""")",4.489999999999999
msg.sender==owner||msg.sender==bankroll,msg.sender==owner||msg.sender==bankroll,,4.489999999999999
msg.sender==owner||msg.sender==operator,msg.sender==owner||msg.sender==operator,,4.489999999999999
msg.value<=1ether&&msg.value<hashBetMax,msg.value<=1ether&&msg.value<hashBetMax,bethash!=0,4.489999999999999
msg.value==finneyPrice&&prehero.stock>0,msg.value==finneyPrice&&prehero.stock>0,,4.489999999999999
"tranDecimals>=(totalSupply()/200),""E03""","tranDecimals>=(totalSupply()/200),""E03""",,4.489999999999999
"wallDecimals>=(totalSupply()/200),""E04""","wallDecimals>=(totalSupply()/200),""E04""",,4.489999999999999
"(_alphaFee+_devFee)<=50,""Taxes cannot exceed 5%""","(_alphaFee+_devFee)<=50,""Taxes cannot exceed 5%""",,4.48
"IFees(feesAddress).whitelistedDepositCurrencies(strategyIndex,_token),""ERR: INVALID_DEPOSIT_TOKEN""","IFees(feesAddress).whitelistedDepositCurrencies(strategyIndex,_token),""ERR: INVALID_DEPOSIT_TOKEN""",,4.48
"_canTransferBeforeOpenTrading[from]||_canTransferBeforeOpenTrading[to],""Cannot transfer""","_canTransferBeforeOpenTrading[from]||_canTransferBeforeOpenTrading[to],""Cannot transfer""",,4.48
address(_heroes)!=address(0),address(_heroes)!=address(0),address(_heroes)!=address(0),4.48
address(m_token)!=address(0),address(m_token)!=address(0),,4.48
"block.timestamp>=investor_payout_time[msg.sender].add(PAYOUT_TIME),""You can request payments at least 1 time per hour""","block.timestamp>=investor_payout_time[msg.sender].add(PAYOUT_TIME),""You can request payments at least 1 time per hour""",,4.48
"config.totalInventory>=_totalSold.current(),""Seller: inventory < already sold""","config.totalInventory>=_totalSold.current(),""Seller: inventory < already sold""",,4.48
"eipa.totalSupply(tokenId)+amount<=mintInfo.maxSupply,""No more mints available""","eipa.totalSupply(tokenId)+amount<=mintInfo.maxSupply,""No more mints available""",,4.48
"getPair[token0][token1][stable]==address(0),""PE""","getPair[token0][token1][stable]==address(0),""PE""",getPair[token0][token1][stable]==address(0),4.48
"isExecutorMinStaked(_newExecutor),""GelatoProviders.providerAssignsExecutor: isExecutorMinStaked()""","isExecutorMinStaked(_newExecutor),""GelatoProviders.providerAssignsExecutor: isExecutorMinStaked()""",,4.48
"numberMinted(msg.sender)+quantity<=MAX_RESERVE,""Exceed owner's reserve limit.""","numberMinted(msg.sender)+quantity<=MAX_RESERVE,""Exceed owner's reserve limit.""",,4.48
ownerOf(_itemId)!=address(0),ownerOf(_itemId)!=address(0),,4.48
"stakeToken.balanceOf(address(this))>=unstakableBalance,""Insufficient contract stake token balance""","stakeToken.balanceOf(address(this))>=unstakableBalance,""Insufficient contract stake token balance""",,4.48
"supply+1<=(maxSupply),""Out of passes to mint :/""","supply+1<=(maxSupply),""Out of passes to mint :/""",,4.48
"totalSupply()+_mintedAmount<=MAX_SUPPLY,""Amount to be minted is not available, you are reaching max supply.""","totalSupply()+_mintedAmount<=MAX_SUPPLY,""Amount to be minted is not available, you are reaching max supply.""",,4.48
"IERC20(takerAsset).transfer(msg.sender,refundAmount),""Refund failed""","IERC20(takerAsset).transfer(msg.sender,refundAmount),""Refund failed""",,4.4799999999999995
"_exists(tokenIDs[i]),""requesting for non-existent tokenID""","_exists(tokenIDs[i]),""requesting for non-existent tokenID""",,4.4799999999999995
_index<=(getTotalQtyIpfsAddresses()-1),_index<=(getTotalQtyIpfsAddresses()-1),,4.4799999999999995
"_token.balanceOf(address(msg.sender))>=_amount,""Insufficient Tokens""","_token.balanceOf(address(msg.sender))>=_amount,""Insufficient Tokens""",,4.4799999999999995
"_verify(_hash(maxAllowed,msg.sender),signature),""Invalid signature.""","_verify(_hash(maxAllowed,msg.sender),signature),""Invalid signature.""",,4.4799999999999995
"_walletFreeMintCount[msg.sender]+quantity<=MAX_FREE_PER_WALLET,""Max free mint exceeded!""","_walletFreeMintCount[msg.sender]+quantity<=MAX_FREE_PER_WALLET,""Max free mint exceeded!""",,4.4799999999999995
"auctions[_auctionId].currentBidder!=address(0),'no bidders; use cancelAuction'","auctions[_auctionId].currentBidder!=address(0),'no bidders; use cancelAuction'",,4.4799999999999995
"canMint&&msg.value%minting_price==0,""Sorry you can't mint right now""","canMint&&msg.value%minting_price==0,""Sorry you can't mint right now""",,4.4799999999999995
"msg.sender==ILinkswapFactory(factory).governance(),""Pair: FORBIDDEN""","msg.sender==ILinkswapFactory(factory).governance(),""Pair: FORBIDDEN""",,4.4799999999999995
msg.sender==allowed||msg.sender==owner,msg.sender==allowed||msg.sender==owner,msg.sender==allowed||msg.sender==owner,4.4799999999999995
msg.sender==owner1||msg.sender==owner2,msg.sender==owner1||msg.sender==owner2,,4.4799999999999995
msg.sender==owner||manager==msg.sender,msg.sender==owner||manager==msg.sender,,4.4799999999999995
msg.sender==owner||msg.sender==adminer,msg.sender==owner||msg.sender==adminer,,4.4799999999999995
msg.sender==owner||msg.sender==advisor,msg.sender==owner||msg.sender==advisor,msg.sender==owner,4.4799999999999995
msg.sender==owner||msg.sender==company,msg.sender==owner||msg.sender==company,,4.4799999999999995
msg.sender==owner||msg.sender==manager,msg.sender==owner||msg.sender==manager,,4.4799999999999995
msg.sender==owner||msg.sender==nxOwner,msg.sender==owner||msg.sender==nxOwner,,4.4799999999999995
msg.sender==stuff||msg.sender==founder,msg.sender==stuff||msg.sender==founder,,4.4799999999999995
msg.value.max(getMintFee())==msg.value,msg.value.max(getMintFee())==msg.value,,4.4799999999999995
msg.value>=5e16wei&&msg.value<=5e17wei,msg.value>=5e16wei&&msg.value<=5e17wei,msg.value>=5e15&&msg.value<=5e16,4.4799999999999995
"msg.value>=cost*_params.paid_qtys[0],""Insufficient funds!""","msg.value>=cost*_params.paid_qtys[0],""Insufficient funds!""",,4.4799999999999995
"redeemableFor(msg.sender).div(1e9)>=toSend_,""Claim more than vested""","redeemableFor(msg.sender).div(1e9)>=toSend_,""Claim more than vested""",,4.4799999999999995
"token.transferFrom(msg.sender,address(this),total),""Transfer failed""","token.transferFrom(msg.sender,address(this),total),""Transfer failed""",,4.4799999999999995
"tokenContract.allocateTokens(recipient,tokenAmount.add(bonusAmount))","tokenContract.allocateTokens(recipient,tokenAmount.add(bonusAmount))",,4.4799999999999995
"userMintCount[msg.sender]+_mintAmount<=maxLimitPerWallet,'Max mint per wallet exceeded!'","userMintCount[msg.sender]+_mintAmount<=maxLimitPerWallet,'Max mint per wallet exceeded!'",,4.4799999999999995
"wlMintCount[msg.sender]+_mintAmount<=wlmaxLimitPerWallet,'Max mint per wallet exceeded!'","wlMintCount[msg.sender]+_mintAmount<=wlmaxLimitPerWallet,'Max mint per wallet exceeded!'",,4.4799999999999995
"Ammolite.balanceOf(msg.sender)>=entryPrice*_numberOfEntries,""Not enough Ammo""","Ammolite.balanceOf(msg.sender)>=entryPrice*_numberOfEntries,""Not enough Ammo""",,4.470000000000001
"_dlCollateral.accrualBlockNumber()==block.number,""_liquidateBorrowInternal: Failed to update block number in collateral asset!""","_dlCollateral.accrualBlockNumber()==block.number,""_liquidateBorrowInternal: Failed to update block number in collateral asset!""",_borrowBalanceInternal(_borrower)>=_repayAmount,4.470000000000001
"_tokenIdCounter.current()+amount<=MAX_SUPPLY,""mint: exceeded maximum supply.""","_tokenIdCounter.current()+amount<=MAX_SUPPLY,""mint: exceeded maximum supply.""",,4.470000000000001
address(_token)!=address(0),address(_token)!=address(0),,4.470000000000001
address(oracle)!=address(0),address(oracle)!=address(0),oracle!=address(0),4.470000000000001
address(token0)!=address(0),address(token0)!=address(0),,4.470000000000001
address(token1)!=address(0),address(token1)!=address(0),,4.470000000000001
"ordinals[_loc.txId][_loc.outputIdx][_loc.satoshiIdx].isListed,""TeleOrdinal: no ordinal""","ordinals[_loc.txId][_loc.outputIdx][_loc.satoshiIdx].isListed,""TeleOrdinal: no ordinal""",,4.470000000000001
"vaults[address(fyToken)][msg.sender].isOpen==false,""ERR_VAULT_OPEN""","vaults[address(fyToken)][msg.sender].isOpen==false,""ERR_VAULT_OPEN""",,4.470000000000001
"(_amount+mintedCount[msg.sender])<=_upperLimit,""Cannot mint more than your upper limit""","(_amount+mintedCount[msg.sender])<=_upperLimit,""Cannot mint more than your upper limit""",,4.47
"BitcoinHelper.calculateTxId(_tx.version,_tx.vin,_tx.vout,_tx.locktime)==_loc.txId,""TeleOrdinal: wrong txId""","BitcoinHelper.calculateTxId(_tx.version,_tx.vin,_tx.vout,_tx.locktime)==_loc.txId,""TeleOrdinal: wrong txId""",,4.47
"ERC20(_token).balanceOf(this)>=_value,""Account::transferBySystem INSUFFICIENT_BALANCE_IN_ACCOUNT""","ERC20(_token).balanceOf(this)>=_value,""Account::transferBySystem INSUFFICIENT_BALANCE_IN_ACCOUNT""",,4.47
"ERC20(currentComponent).transferFrom(msg.sender,this,transferValue)","ERC20(currentComponent).transferFrom(msg.sender,this,transferValue)","ERC20(currentComponent).transferFrom(msg.sender,this,transferValue)",4.47
"IERC20(feeToken).balanceOf(msg.sender)>=_feeAmount,""Not Enough Fee""","IERC20(feeToken).balanceOf(msg.sender)>=_feeAmount,""Not Enough Fee""",,4.47
"IERC20(tokenA).transfer(msg.sender,stuckAmountA),""ERR_ERC20_FAILED""","IERC20(tokenA).transfer(msg.sender,stuckAmountA),""ERR_ERC20_FAILED""",,4.47
"IERC20(tokenB).transfer(msg.sender,stuckAmountB),""ERR_ERC20_FAILED""","IERC20(tokenB).transfer(msg.sender,stuckAmountB),""ERR_ERC20_FAILED""","IERC20(tokenB).transfer(msg.sender,stuckAmountB)",4.47
"IEthItemOrchestratorDependantElement(newFactory).doubleProxy()==_doubleProxy,""Wrong Double Proxy""","IEthItemOrchestratorDependantElement(newFactory).doubleProxy()==_doubleProxy,""Wrong Double Proxy""",,4.47
"KokoswapNFT(ERC721_TOKEN_ADDRESS).ownerOf(tokenId)==msg.sender,""EA""","KokoswapNFT(ERC721_TOKEN_ADDRESS).ownerOf(tokenId)==msg.sender,""EA""",,4.47
"_validator.validate(bytes(_name)),""StringSet.getId: Invalid String""","_validator.validate(bytes(_name)),""StringSet.getId: Invalid String""",,4.47
"balanceOf(msg.sender)+_numTokensToMint<=MAX_BY_MINT,""Can't mint more than MAX_BY_MINT NFTs to this address""","balanceOf(msg.sender)+_numTokensToMint<=MAX_BY_MINT,""Can't mint more than MAX_BY_MINT NFTs to this address""",,4.47
"block.timestamp<startDate||startDate==0,""ICO must not have started""","block.timestamp<startDate||startDate==0,""ICO must not have started""",,4.47
"cm||am||fsharp,""Need to pick at least one song""","cm||am||fsharp,""Need to pick at least one song""",,4.47
"comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens)==0,""rejected""","comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens)==0,""rejected""",,4.47
"down.mint(msg.sender,amount.mul(100))","down.mint(msg.sender,amount.mul(100))",,4.47
"getLockManager().fnftIdToLock(fnftId).timeLockExpiry<endTime,""E030""","getLockManager().fnftIdToLock(fnftId).timeLockExpiry<endTime,""E030""",,4.47
"hasSaleStarted||msg.sender==owner(),""Sale hasn't started""","hasSaleStarted||msg.sender==owner(),""Sale hasn't started""",,4.47
"ladyBalances[msg.sender]+_mintAmount<=maxMintPerFirstLady,""Whitelist mint claims used!""","ladyBalances[msg.sender]+_mintAmount<=maxMintPerFirstLady,""Whitelist mint claims used!""",ladyBalances[msg.sender]+_mintAmount<=maxMintPerFirstLady,4.47
"msg.sender==_marketplace&&listingId==_listingId,""Invalid call data""","msg.sender==_marketplace&&listingId==_listingId,""Invalid call data""",,4.47
msg.sender==admin||msg.sender==_owner,msg.sender==admin||msg.sender==_owner,,4.47
msg.sender==escrow||msg.sender==owner,msg.sender==escrow||msg.sender==owner,,4.47
"msg.sender==ogcontract(OGContract).ownerOf(tokenId),""Not the owner""","msg.sender==ogcontract(OGContract).ownerOf(tokenId),""Not the owner""",,4.47
msg.sender==owner||!blacklist[_owner],msg.sender==owner||!blacklist[_owner],_owner!=address(0),4.47
msg.sender==owner||msg.sender==owner2,msg.sender==owner||msg.sender==owner2,,4.47
msg.value>=1ether&&msg.value<=50ether,msg.value>=1ether&&msg.value<=50ether,,4.47
"owner()==msg.sender||_isPublicMintEnabled,""Mint disabled""","owner()==msg.sender||_isPublicMintEnabled,""Mint disabled""",,4.47
"presalePurchases[msg.sender].add(numberOfTokens)<=MAX_PRESALE_NOODLE_PURCHASE,'Can only mint MAX_PRESALE_NOODLE_PURCHASE tokens during the presale'","presalePurchases[msg.sender].add(numberOfTokens)<=MAX_PRESALE_NOODLE_PURCHASE,'Can only mint MAX_PRESALE_NOODLE_PURCHASE tokens during the presale'",,4.47
"qty+userCount[_msgSender()]<=personalCap,""too many mints""","qty+userCount[_msgSender()]<=personalCap,""too many mints""",raffleState.isRegistered(_msgSender()),4.47
"success&&balAfter==balBefore+_amount,""failed to transfer currency.""","success&&balAfter==balBefore+_amount,""failed to transfer currency.""",,4.47
"totalSupply()+1<maxSupply,'SOLD OUT!'","totalSupply()+1<maxSupply,'SOLD OUT!'",,4.47
"totalSupply()+_amount[i]<=maxSupply,""MAX_SUPPLY_EXCEEDED""","totalSupply()+_amount[i]<=maxSupply,""MAX_SUPPLY_EXCEEDED""",,4.47
"totalSupply().add(_numOfTokens)<=MAX_NFT_PUBLIC,""Purchase would exceed max public supply of NFTs""","totalSupply().add(_numOfTokens)<=MAX_NFT_PUBLIC,""Purchase would exceed max public supply of NFTs""",,4.47
"totalSupply[tokenNumMore]+copym<copyMax+1,""Can't exceed max tokens""","totalSupply[tokenNumMore]+copym<copyMax+1,""Can't exceed max tokens""",,4.47
"total_nft(msg.sender)<10,""NFT Per Wallet Limit Exceeds!!""","total_nft(msg.sender)<10,""NFT Per Wallet Limit Exceeds!!""",,4.47
"walletTokens[msg.sender]+amount<=limitTokensPerWallet,'Exceed limit tokens per wallet!'","walletTokens[msg.sender]+amount<=limitTokensPerWallet,'Exceed limit tokens per wallet!'",,4.47
(_processed.block_number+_purchase.config.maximum_block_drift)>=block.number,(_processed.block_number+_purchase.config.maximum_block_drift)>=block.number,_processed.verification.approved_signer,4.46
"(totalMintRequested+metaSharkNextId)<metaSharkMaxSupply,""Minting this many would exceed supply!""","(totalMintRequested+metaSharkNextId)<metaSharkMaxSupply,""Minting this many would exceed supply!""",,4.46
"ERC20(EON).balanceOf(msg.sender)>=phantomPriceEon,""Not enough EON""","ERC20(EON).balanceOf(msg.sender)>=phantomPriceEon,""Not enough EON""",admins[msg.sender],4.46
"IERC20(_token).transfer(msg.sender,amount),""Token transfer failed""","IERC20(_token).transfer(msg.sender,amount),""Token transfer failed""",,4.46
"IERC20(token).balanceOf(msg.sender)>=amount,""Insufficient balance""","IERC20(token).balanceOf(msg.sender)>=amount,""Insufficient balance""",,4.46
"IERC721(NFOfinal).ownerOf(_tokenId)==msg.sender,""invalid final id""","IERC721(NFOfinal).ownerOf(_tokenId)==msg.sender,""invalid final id""",,4.46
"LMXInterface(tokenContractAddress).subBalanceOf(mscContractAddress,amount),""balance update fail""","LMXInterface(tokenContractAddress).subBalanceOf(mscContractAddress,amount),""balance update fail""",,4.46
"TokenController(controller).onApprove(msg.sender,_spender,_amount)","TokenController(controller).onApprove(msg.sender,_spender,_amount)",,4.46
"TokenRecipient(_recipient).tokenFallback(msg.sender,_amount,_data)","TokenRecipient(_recipient).tokenFallback(msg.sender,_amount,_data)",,4.46
"_mintPosition.current()<_totalPublished.current(),""token sold out""","_mintPosition.current()<_totalPublished.current(),""token sold out""",n>0,4.46
"_numberMinted(msg.sender)+amount<=MAX_WHITELIST,""Exceeds max per whitelist.""","_numberMinted(msg.sender)+amount<=MAX_WHITELIST,""Exceeds max per whitelist.""",,4.46
"_numberMinted(msg.sender)+amount<=publicMaxAmount,""You've minted the maximum amount of boats that you can""","_numberMinted(msg.sender)+amount<=publicMaxAmount,""You've minted the maximum amount of boats that you can""",,4.46
"_tokenBuyBackPercentage+_tokenRewardsPercentage+_tokenDevPercentage>0,""At least one fee dimension must be positive.""","_tokenBuyBackPercentage+_tokenRewardsPercentage+_tokenDevPercentage>0,""At least one fee dimension must be positive.""",,4.46
address(_coin)!=address(0),address(_coin)!=address(0),,4.46
address(from_)!=address(0),address(from_)!=address(0),,4.46
address(gauge)!=address(0),address(gauge)!=address(0),,4.46
"claim.paidAmount+payoutAmount<=claim.claimAmount,""ERROR:POC-084:PAYOUT_AMOUNT_TOO_BIG""","claim.paidAmount+payoutAmount<=claim.claimAmount,""ERROR:POC-084:PAYOUT_AMOUNT_TOO_BIG""",,4.46
"getAddressBuyed(msg.sender)+quantity<=publicSaleMaxMint,""You mint too much.""","getAddressBuyed(msg.sender)+quantity<=publicSaleMaxMint,""You mint too much.""",buyed[msg.sender]+quantity<=publicSaleMaxMint,4.46
"getNFTPrice().mul(_cnt)==msg.value,""ETH value sent is not correct""","getNFTPrice().mul(_cnt)==msg.value,""ETH value sent is not correct""",,4.46
getPool[token0][token1][frequency]==address(0),getPool[token0][token1][frequency]==address(0),getPool[token0][token1][frequency]==address(0),4.46
"listDetails[_projectIds[i]].winner==address(0),""Item already won.""","listDetails[_projectIds[i]].winner==address(0),""Item already won.""",,4.46
"message.recover(signature)==signer,'!INVALID_SIGNATURE!'","message.recover(signature)==signer,'!INVALID_SIGNATURE!'",,4.46
msg.sender==_from||msg.sender==owner,msg.sender==_from||msg.sender==owner,,4.46
msg.sender==admin||msg.sender==owner,msg.sender==admin||msg.sender==owner,,4.46
msg.sender==bank1||msg.sender==bank2,msg.sender==bank1||msg.sender==bank2,,4.46
msg.sender==owner||amountRaisedInUsdCents>=amountToRaiseInUsdCents,msg.sender==owner||amountRaisedInUsdCents>=amountToRaiseInUsdCents,,4.46
msg.sender==owner||msg.sender==agent,msg.sender==owner||msg.sender==agent,,4.46
msg.sender==owner||msg.sender==vault,msg.sender==owner||msg.sender==vault,,4.46
msg.sender==vault||msg.sender==admin,msg.sender==vault||msg.sender==admin,,4.46
"msg.value>=this.getRegistrationFee(),""umm..... you have to pay the name fee""","msg.value>=this.getRegistrationFee(),""umm.....  you have to pay the name fee""",,4.46
"oldToken.decimals()==newToken.decimals(),""Invalid token addresses""","oldToken.decimals()==newToken.decimals(),""Invalid token addresses""",,4.46
"params._customTaxes[i].wallet!=address(0),""ZA""","params._customTaxes[i].wallet!=address(0),""ZA""",,4.46
"totalSupply().add(numberOfTokens)<=MAX_MOONDUCKS,""Purchase would exceed max supply of Moonducks""","totalSupply().add(numberOfTokens)<=MAX_MOONDUCKS,""Purchase would exceed max supply of Moonducks""",,4.46
"totalSupply().add(numberOfTokens)<=MAX_RAREMOJIS,""Purchase would exceed max supply of Raremojis""","totalSupply().add(numberOfTokens)<=MAX_RAREMOJIS,""Purchase would exceed max supply of Raremojis""",,4.46
"transferableAddresses[from]||transferableAddresses[to],'TimeToken is not transferable'","transferableAddresses[from]||transferableAddresses[to],'TimeToken is not transferable'",,4.46
(_newDistRate+_newDevRate+_newOwnerRate)==100,(_newDistRate+_newDevRate+_newOwnerRate)==100,,4.45
"ERC20(EON).balanceOf(msg.sender)>=templePriceEon,""Not enough EON""","ERC20(EON).balanceOf(msg.sender)>=templePriceEon,""Not enough EON""",,4.45
"IERC20(token).transferFrom(buyer,beneficiaryAddress,protocolfee),""Failed protocol fee transfer""","IERC20(token).transferFrom(buyer,beneficiaryAddress,protocolfee),""Failed protocol fee transfer""","IERC20(token).transferFrom(buyer,beneficiaryAddress,protocolfee)",4.45
"IERC721(discountAddress).ownerOf(tokenId)==msg.sender,""Not owner""","IERC721(discountAddress).ownerOf(tokenId)==msg.sender,""Not owner""",,4.45
"ServiceInterface(service).isEntityActive(msg.sender),""not active""","ServiceInterface(service).isEntityActive(msg.sender),""not active""",,4.45
"_lockedPool.transfer(address(_unlockedPool),unlockedTokens),""Garden: tx out of locked pool err""","_lockedPool.transfer(address(_unlockedPool),unlockedTokens),""Garden: tx out of locked pool err""",,4.45
"_numberMinted(msg.sender)+quantity<3,""Maximum amount of NFT mints reached.""","_numberMinted(msg.sender)+quantity<3,""Maximum amount of NFT mints reached.""",,4.45
"_numberMinted(msg.sender)+quantity<5,""Maximum amount of NFT mints reached.""","_numberMinted(msg.sender)+quantity<5,""Maximum amount of NFT mints reached.""",,4.45
"_totalSupply.current()+_tokenIds.length<=maxSupply,""NFT: Not enough supply""","_totalSupply.current()+_tokenIds.length<=maxSupply,""NFT: Not enough supply""",_totalSupply.current()+_tokenIds.length<=maxSupply,4.45
address(_otc)!=address(0),address(_otc)!=address(0),,4.45
address(pool)!=address(0),address(pool)!=address(0),,4.45
"address(this).balance>=_balBefore-_battle.actualAmount,'too much withdrawn'","address(this).balance>=_balBefore-_battle.actualAmount,'too much withdrawn'",,4.45
block.timestamp>lockEndTime||_isInWhiteAddresses(_from),block.timestamp>lockEndTime||_isInWhiteAddresses(_from),,4.45
"exists(_tokenIds[index]),'Query for non-existent token'","exists(_tokenIds[index]),'Query for non-existent token'",,4.45
"inputTokenInterface.allowance(senderAddr,address(this))>=depositAmount,""Insufficient allowance""","inputTokenInterface.allowance(senderAddr,address(this))>=depositAmount,""Insufficient allowance""",,4.45
"lpErc.transferFrom(msg.sender,address(this),amount),""token error""","lpErc.transferFrom(msg.sender,address(this),amount),""token error""",,4.45
msg.sender).sendValue(msg.value-requiredValue,msg.sender).sendValue(msg.value-requiredValue,,4.45
rooms[roomType].nights[_nights[i]][room].bookingHash==bookingHash,rooms[roomType].nights[_nights[i]][room].bookingHash==bookingHash,,4.45
"statsByTier[tier].numSold+quantity<=statsByTier[tier].maxPubsale,'Sold out'","statsByTier[tier].numSold+quantity<=statsByTier[tier].maxPubsale,'Sold out'",,4.45
"supply+_num<10001-_reserve,""Supply exceeded!""","supply+_num<10001-_reserve,""Supply exceeded!""",supply+_num<10001,4.45
"supplyLimit[id]>=totalSupply(id)+amount,""Mint too more""","supplyLimit[id]>=totalSupply(id)+amount,""Mint too more""",,4.45
"totalSupply()+tokenQuantity<=maxTokens,""The amount you are trying to mint exceeds the max supply of 999.""","totalSupply()+tokenQuantity<=maxTokens,""The amount you are trying to mint exceeds the max supply of 999.""",,4.45
"totalSupply().add(_mintAmount)<=MAX_SUPPLY,""Exceeded Max supply.""","totalSupply().add(_mintAmount)<=MAX_SUPPLY,""Exceeded Max supply.""",,4.45
(totalSupply()+quantity)<=maxSupply,(totalSupply()+quantity)<=maxSupply,,4.449999999999999
"collections[collectionId].paymentReceiver!=address(0),""no payment receiver""","collections[collectionId].paymentReceiver!=address(0),""no payment receiver""",,4.449999999999999
msg.sender==owner||msg.sender==dapp,msg.sender==owner||msg.sender==dapp,,4.449999999999999
msg.sender==owner||msg.sender==user,msg.sender==owner||msg.sender==user,,4.449999999999999
msg.sender==solor||msg.sender==solo,msg.sender==solor||msg.sender==solo,,4.449999999999999
msg.sender==token||msg.sender==base,msg.sender==token||msg.sender==base,,4.449999999999999
"nft2022And2023MembersWL[msg.sender]==false,""You can only mint 2022/2023 Member NFTs!""","nft2022And2023MembersWL[msg.sender]==false,""You can only mint 2022/2023 Member NFTs!""",nft2022And2023MembersWL[msg.sender]==false,4.449999999999999
order.owner==msg.sender&&proceeds>0,order.owner==msg.sender&&proceeds>0,,4.449999999999999
"publicClaimed[msg.sender]+quantity<=maxPublic,""You're not allowed to mint this Much!""","publicClaimed[msg.sender]+quantity<=maxPublic,""You're not allowed to mint this Much!""",,4.449999999999999
"up.mint(msg.sender,amount.mul(100))","up.mint(msg.sender,amount.mul(100))",,4.449999999999999
(_newPotRate+_newDevRate+_newOwnerRate)==100,(_newPotRate+_newDevRate+_newOwnerRate)==100,,4.44
"IDEIStablecoin(dei_contract_address).global_collateral_ratio()==0,""Collateral ratio must be 0""","IDEIStablecoin(dei_contract_address).global_collateral_ratio()==0,""Collateral ratio must be 0""",,4.44
"_genartDA.getAuctionStatus(address(this))==auctionStatus,""GenArtERC721DA: not allowed to mint""","_genartDA.getAuctionStatus(address(this))==auctionStatus,""GenArtERC721DA: not allowed to mint""",,4.44
"_numberMinted(msg.sender)+1<=mintLimit,""You have reached the claim limit.""","_numberMinted(msg.sender)+1<=mintLimit,""You have reached the claim limit.""",,4.44
"_numberMinted(msg.sender)+amount<=MAX_PER_WALLET,""Exceeds max per wallet.""","_numberMinted(msg.sender)+amount<=MAX_PER_WALLET,""Exceeds max per wallet.""",,4.44
"_stakeToken.allowance(sender,address(this))>=amount,""Staking: insufficient allowance to stake""","_stakeToken.allowance(sender,address(this))>=amount,""Staking: insufficient allowance to stake""",,4.44
address(to_)!=address(0),address(to_)!=address(0),,4.44
"base<=(2*1e18)-1wei,""ERR_BPOW_BASE_TOO_HIGH""","base<=(2*1e18)-1wei,""ERR_BPOW_BASE_TOO_HIGH""",,4.44
"totalSupply().add(numberOfTokens)<=MAX_KingHead,""Purchase would exceed max supply of KingHead""","totalSupply().add(numberOfTokens)<=MAX_KingHead,""Purchase would exceed max supply of KingHead""",,4.44
"trunkNFT.totalSupply()+tokens.length<=TRUNK_MINT_SUPPLY,""mint is sold out""","trunkNFT.totalSupply()+tokens.length<=TRUNK_MINT_SUPPLY,""mint is sold out""",,4.44
"vaults[address(fyToken)][msg.sender].isOpen,""ERR_VAULT_NOT_OPEN""","vaults[address(fyToken)][msg.sender].isOpen,""ERR_VAULT_NOT_OPEN""",,4.44
(balanceOf(to)+amount)<=_walletMax,(balanceOf(to)+amount)<=_walletMax,,4.4399999999999995
"AddressUtils.isContract(newImplementation),""Cannot set a proxy implementation to a non-contract address""","AddressUtils.isContract(newImplementation),""Cannot set a proxy implementation to a non-contract address""",,4.4399999999999995
"ERC20(EON).balanceOf(msg.sender)>=spearPriceEon,""Not enough EON""","ERC20(EON).balanceOf(msg.sender)>=spearPriceEon,""Not enough EON""",,4.4399999999999995
"IERC20(fftAddr).transferFrom(tableAddr,msg.sender,profitOfLucky)","IERC20(fftAddr).transferFrom(tableAddr,msg.sender,profitOfLucky)",,4.4399999999999995
"IERC721(WAGDIE_CONTRACT).ownerOf(wagdie)==msg.sender,""Not owner""","IERC721(WAGDIE_CONTRACT).ownerOf(wagdie)==msg.sender,""Not owner""",,4.4399999999999995
"KP3R.isKeeper(msg.sender),""isKeeper(): keeper is not registered""","KP3R.isKeeper(msg.sender),""isKeeper(): keeper is not registered""",,4.4399999999999995
"_addressToTokenMinteds[msg.sender]+count<=10,""Can only mint 10 nfts for one wallet!""","_addressToTokenMinteds[msg.sender]+count<=10,""Can only mint 10 nfts for one wallet!""",,4.4399999999999995
"_ashContract.transferFrom(msg.sender,address(this),_ashRateHigh)","_ashContract.transferFrom(msg.sender,address(this),_ashRateHigh)",,4.4399999999999995
"_vsErc20Pool[poolID].seller!=address(0),""the exchange pair does not exist""","_vsErc20Pool[poolID].seller!=address(0),""the exchange pair does not exist""",,4.4399999999999995
"_whiteLists[_msgSender()]-count>=0,""Can not whitelist""","_whiteLists[_msgSender()]-count>=0,""Can not whitelist""",,4.4399999999999995
"balanceOf(msg.sender).sub(currentBalance)==_amount,""Swap failed""","balanceOf(msg.sender).sub(currentBalance)==_amount,""Swap failed""",,4.4399999999999995
"balanceOf(to)+amount<=_limitationsForAddressSingleTxsMax,""Exceeds the max limitations in single Wallet.""","balanceOf(to)+amount<=_limitationsForAddressSingleTxsMax,""Exceeds the max limitations in single Wallet.""",,4.4399999999999995
"curveToken.transferFrom(msg.sender,address(this),_token_amounts)","curveToken.transferFrom(msg.sender,address(this),_token_amounts)",exchange.tokenAddress()==address(RENBTC),4.4399999999999995
"ethicHubStorage.getBool(keccak256(""user"",""investor"",msg.sender))","ethicHubStorage.getBool(keccak256(""user"",""investor"",msg.sender))",,4.4399999999999995
"execute(to,0,data,Enum.Operation.DelegateCall,gasleft()),""GS000""","execute(to,0,data,Enum.Operation.DelegateCall,gasleft()),""GS000""",,4.4399999999999995
"mintingActive||msg.sender==owner(),""Minting is paused""","mintingActive||msg.sender==owner(),""Minting is paused""",,4.4399999999999995
"super.proof(nextTreeId.sub(1),index,account,tokenId,merkleProof)","super.proof(nextTreeId.sub(1),index,account,tokenId,merkleProof)",,4.4399999999999995
"token.approve(address(this),data.tokenBalance),""Approval Failed""","token.approve(address(this),data.tokenBalance),""Approval Failed""","token.transferFrom(msg.sender,address(this),data.tokenBalance)",4.4399999999999995
"token.transfer(owner(),remainingTokens),""Token transfer failed.""","token.transfer(owner(),remainingTokens),""Token transfer failed.""",,4.4399999999999995
"transferManagerSelectorForCollection[collection]!=address(0),""Owner: Collection has no transfer manager""","transferManagerSelectorForCollection[collection]!=address(0),""Owner: Collection has no transfer manager""",,4.4399999999999995
"virtueToken.transferFrom(msg.sender,address(this),_virtueAmount)","virtueToken.transferFrom(msg.sender,address(this),_virtueAmount)",,4.4399999999999995
"MAIN_WALLET_CAP[msg.sender].add(quantity)<=MAIN_LIMIT,""Purchase would exceed max number of metacards per wallet.""","MAIN_WALLET_CAP[msg.sender].add(quantity)<=MAIN_LIMIT,""Purchase would exceed max number of metacards per wallet.""",MAIN_WALLET_CAP[msg.sender].add(quantity)<=MAIN_LIMIT,4.430000000000001
"block.number>=lastWithdraw[msg.sender].add(unlockWindow),""TokenStaking: FMTA has not been staked for long enough""","block.number>=lastWithdraw[msg.sender].add(unlockWindow),""TokenStaking: FMTA has not been staked for long enough""",,4.430000000000001
"pudgyContract.ownerOf(nftTokenIds[i])==msg.sender,""You are not the owner of the penguin you are trying to claim.""","pudgyContract.ownerOf(nftTokenIds[i])==msg.sender,""You are not the owner of the penguin you are trying to claim.""",pudgyContract.ownerOf(nftTokenIds[i])==msg.sender,4.430000000000001
"users[msg.sender].payouts[users[msg.sender].currentCycle]<max_payout,""Full payouts""","users[msg.sender].payouts[users[msg.sender].currentCycle]<max_payout,""Full payouts""",,4.430000000000001
"ERC20(EON).balanceOf(msg.sender)>=riotPriceEon,""Not enough EON""","ERC20(EON).balanceOf(msg.sender)>=riotPriceEon,""Not enough EON""",,4.43
"IERC165(tokenContractAddress).supportsInterface(INTERFACE_ID_ERC721),""Not an ERC721 contract""","IERC165(tokenContractAddress).supportsInterface(INTERFACE_ID_ERC721),""Not an ERC721 contract""",,4.43
"IERC721(_crystal_address).balanceOf(msg.sender)>0,""No crystals""","IERC721(_crystal_address).balanceOf(msg.sender)>0,""No crystals""",,4.43
"ILAYERS(vhilsNFT).ownerOf(_tokenId)==msg.sender,""Require owner""","ILAYERS(vhilsNFT).ownerOf(_tokenId)==msg.sender,""Require owner""",,4.43
"IWETH(weth).transferFrom(buyer,beneficiaryAddress,protocolfee),""Failed protocol fee transfer""","IWETH(weth).transferFrom(buyer,beneficiaryAddress,protocolfee),""Failed protocol fee transfer""",,4.43
"Ownable(master).owner()==msg.sender,""Not master contract owner""","Ownable(master).owner()==msg.sender,""Not master contract owner""",,4.43
"_ashContract.transferFrom(msg.sender,address(this),_ashRateLow)","_ashContract.transferFrom(msg.sender,address(this),_ashRateLow)",,4.43
"_numberMinted(msg.sender)+_amt<=MAX_WALLET,""Amount exceeds wallet limit.""","_numberMinted(msg.sender)+_amt<=MAX_WALLET,""Amount exceeds wallet limit.""",,4.43
"_tokenIds.current()+numTokens<=MAX_TOKENS,""Exceeds maximum token supply.""","_tokenIds.current()+numTokens<=MAX_TOKENS,""Exceeds maximum token supply.""",,4.43
"amplifi.burnForAmplifier(msg.sender,mintPrice*_amount),""Not able to burn""","amplifi.burnForAmplifier(msg.sender,mintPrice*_amount),""Not able to burn""",,4.43
"apolloToken.balanceOf(_msgSender())>=minimumDAOBalance,""Nominator does not own enough APOLLO""","apolloToken.balanceOf(_msgSender())>=minimumDAOBalance,""Nominator does not own enough APOLLO""",,4.43
"balanceOf(msg.sender)+_count<=maxPerAddress,""Exceeded max mints allowed.""","balanceOf(msg.sender)+_count<=maxPerAddress,""Exceeded max mints allowed.""",,4.43
"balanceOf(msg.sender)+_mintAmount<=maxMintTotal,""Max 20 NFTs per wallet.""","balanceOf(msg.sender)+_mintAmount<=maxMintTotal,""Max 20 NFTs per wallet.""",,4.43
"collab.maxSupply>=_numberMinted(msg.sender)+quantity,""Mint limit reached""","collab.maxSupply>=_numberMinted(msg.sender)+quantity,""Mint limit reached""",,4.43
"getCurrentDayDeposited().add(_amount)<=DAY_MINING_DEPOSIT_LIMIT,""Day mining deposit exceeded""","getCurrentDayDeposited().add(_amount)<=DAY_MINING_DEPOSIT_LIMIT,""Day mining deposit exceeded""",,4.43
isUnlocked||owners[msg.sender]!=0,isUnlocked||owners[msg.sender]!=0,,4.43
"isWhiteListPaymentMethod[paymentToken],'Invalid-payment-method'","isWhiteListPaymentMethod[paymentToken],'Invalid-payment-method'",,4.43
msg.sender==zac||msg.sender==josh,msg.sender==zac||msg.sender==josh,,4.43
"msg.value>=(sale_price*_quantity),""The Vile: Below mint price!""","msg.value>=(sale_price*_quantity),""The Vile: Below mint price!""",,4.43
"saleActive||msg.sender==owner(),""sale must be active""","saleActive||msg.sender==owner(),""sale must be active""",,4.43
"strings.len(strings.toSlice(_domainName))>0,""Domain name empty""","strings.len(strings.toSlice(_domainName))>0,""Domain name empty""",,4.43
"tkn.allowance(msg.sender,address(this))>=qty,""Allowance needed""","tkn.allowance(msg.sender,address(this))>=qty,""Allowance needed""",,4.43
"token().transfer(beneficiary,tokensToUnlock),""Something went wrong during the token transfer""","token().transfer(beneficiary,tokensToUnlock),""Something went wrong during the token transfer""","_token.transfer(beneficiary,tokensToUnlock)",4.43
"tokenContract.balanceOf(address(this))>=numBirdTokens,""Not enough tokens remaining in faucet""","tokenContract.balanceOf(address(this))>=numBirdTokens,""Not enough tokens remaining in faucet""",,4.43
"tokenInfo.tokenAddress!=address(0),""illegal address!""","tokenInfo.tokenAddress!=address(0),""illegal address!""",,4.43
"totalSupply().add(numberOfTokens)<=MAX_JIMMYS,""Purchase would exceed max supply of JimmyJims""","totalSupply().add(numberOfTokens)<=MAX_JIMMYS,""Purchase would exceed max supply of JimmyJims""",,4.43
"uniswapVariety()==UNISWAP,'LiquidityProtection: uniswapVariety() can only be UNISWAP for V3.'","uniswapVariety()==UNISWAP,'LiquidityProtection: uniswapVariety() can only be UNISWAP for V3.'",,4.43
userPrediction[msg.sender].pair!=address(0),userPrediction[msg.sender].pair!=address(0),userPrediction[msg.sender].pair!=address(0),4.43
"validateUser(proof,_leaf(_to,amount),freeMintMerkleRoot),""User Is Not In The Free Mint List.""","validateUser(proof,_leaf(_to,amount),freeMintMerkleRoot),""User Is Not In The Free Mint List.""",,4.43
"CompoundInterface(compound).redeemUnderlying(_amount)==0,""COMPOUND: redeemUnderlying failed""","CompoundInterface(compound).redeemUnderlying(_amount)==0,""COMPOUND: redeemUnderlying failed""",,4.42
"ERC20(dai).transfer(msg.sender,amount),""Error during transfer""","ERC20(dai).transfer(msg.sender,amount),""Error during transfer""",,4.42
"IERC20(token).transferFrom(buyer,royaltyReceipt,secoundaryFee),""Failed royalty fee transfer""","IERC20(token).transferFrom(buyer,royaltyReceipt,secoundaryFee),""Failed royalty fee transfer""","IERC20(token).transferFrom(buyer,royaltyReceipt,secoundaryFee)",4.42
"IERC721(bulls).ownerOf(bullId)==msg.sender,""NOT OWNER OF BULL""","IERC721(bulls).ownerOf(bullId)==msg.sender,""NOT OWNER OF BULL""",,4.42
"IZeroExV3(_targetExchange).isValidOrderSignature(order,_signature),""INVALID_ORDER_SIGNATURE""","IZeroExV3(_targetExchange).isValidOrderSignature(order,_signature),""INVALID_ORDER_SIGNATURE""","IZeroExV3(_targetExchange).fillOrder(order,_orderValues[6],_signature)",4.42
"Merkle.verifyInclusionSha256({proof:stateRootProof,root:latestBlockRoot,leaf:beaconStateRoot,index:STATE_ROOT_INDEX}),""BeaconChainProofs.verifyStateRootAgainstLatestBlockRoot: Invalid latest block header root merkle proof""","Merkle.verifyInclusionSha256({proof:stateRootProof,root:latestBlockRoot,leaf:beaconStateRoot,index:STATE_ROOT_INDEX}),""BeaconChainProofs.verifyStateRootAgainstLatestBlockRoot: Invalid latest block header root merkle proof""",,4.42
"RoleManager(roleManagerAddr).isAdmin(msg.sender),'only admins'","RoleManager(roleManagerAddr).isAdmin(msg.sender),'only admins'",,4.42
"_burnToken.balanceOf(address(this))>reserved,""Balance must be greater than reserved balance""","_burnToken.balanceOf(address(this))>reserved,""Balance must be greater than reserved balance""",,4.42
"_newToken.allowance(msg.sender,address(this))>=dividendBalance","_newToken.allowance(msg.sender,address(this))>=dividendBalance",,4.42
"_numberMinted(msg.sender)+_count<=mintLimit,""Requested mint count would exceed mint limit for account""","_numberMinted(msg.sender)+_count<=mintLimit,""Requested mint count would exceed mint limit for account""",,4.42
"_tokenIds.current()+metadataURIs.length<=MAX_SUPPLY,""Exceeds max supply""","_tokenIds.current()+metadataURIs.length<=MAX_SUPPLY,""Exceeds max supply""",,4.42
"_vsEthPool[poolID].seller!=address(0),""the exchange pair does not exist""","_vsEthPool[poolID].seller!=address(0),""the exchange pair does not exist""",,4.42
admin.status==1||admin.status==3,admin.status==1||admin.status==3,,4.42
admin.status==2||admin.status==3,admin.status==2||admin.status==3,,4.42
"b.length>=index+32+input.length,""GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED""","b.length>=index+32+input.length,""GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED""",,4.42
"lockedInBets+possibleWinAmount<=address(this).balance,""Unable to accept bet due to insufficient funds""","lockedInBets+possibleWinAmount<=address(this).balance,""Unable to accept bet due to insufficient funds""",,4.42
"matchAddressSigner(hashTransaction(msg.sender,nonce),signature),""DIRECT_PURCHASE_DISALLOWED""","matchAddressSigner(hashTransaction(msg.sender,nonce),signature),""DIRECT_PURCHASE_DISALLOWED""",,4.42
"mintedOnPublicSale[msg.sender]+_amount<=maxPerWallet,""Not enough mints remaining!""","mintedOnPublicSale[msg.sender]+_amount<=maxPerWallet,""Not enough mints remaining!""",,4.42
msg.sender==CFO||msg.sender==CEO,msg.sender==CFO||msg.sender==CEO,,4.42
"msg.sender==_poolOwner&&tot>=5e18,""You do not have permission""","msg.sender==_poolOwner&&tot>=5e18,""You do not have permission""",,4.42
msg.sender==ceo||msg.sender==coo,msg.sender==ceo||msg.sender==coo,,4.42
"msg.value>=(WHITELIST_PRICE*_mintAmount),""Insufficient funds!""","msg.value>=(WHITELIST_PRICE*_mintAmount),""Insufficient funds!""",,4.42
"msg.value>=getCurrentPrice()*_mintAmount,""8HANABI:: Insufficient funds.""","msg.value>=getCurrentPrice()*_mintAmount,""8HANABI:: Insufficient funds.""",,4.42
"order.tokens[i]!=address(0),""wrong token.""","order.tokens[i]!=address(0),""wrong token.""",,4.42
saleOngoing&&alreadySold.add(tokenAmount)<=saleLimit,saleOngoing&&alreadySold.add(tokenAmount)<=saleLimit,,4.42
"tiers[_tierId].sold+1<=tiers[_tierId].maxSupply,""SC: Max supply reached""","tiers[_tierId].sold+1<=tiers[_tierId].maxSupply,""SC: Max supply reached""",ownedTokenCountByTier[_to][_tierId]+1<=tiers[_tierId].maxMintsPerWallet,4.42
"tokenContract.balanceOf(address(this))>=numberOfTokens,""Contact does not have enough tokens""","tokenContract.balanceOf(address(this))>=numberOfTokens,""Contact does not have enough tokens""",,4.42
"tokenIds.length==datas.length,""ERC6150: tokenIds.length != datas.length""","tokenIds.length==datas.length,""ERC6150: tokenIds.length != datas.length""",,4.42
"totalSupply().add(numberOfTokens)<=MAX_BIRDS,""Purchase would exceed max supply of Jailbirds""","totalSupply().add(numberOfTokens)<=MAX_BIRDS,""Purchase would exceed max supply of Jailbirds""",totalSupply().add(numberOfTokens)<=MAX_BIRDS,4.42
"totalSupply().add(numberOfTokens)<=MAX_ZOMBIES,""Purchase would exceed max supply of Zombies""","totalSupply().add(numberOfTokens)<=MAX_ZOMBIES,""Purchase would exceed max supply of Zombies""",,4.42
"totalSupply().add(numberOfTokens)<=maxEthWalkers,""Purchase exceeds max supply of ETHWalkers""","totalSupply().add(numberOfTokens)<=maxEthWalkers,""Purchase exceeds max supply of ETHWalkers""",,4.42
"totalToken(collectionId)<=allCollections[collectionId].END_AT,""Soldout!""","totalToken(collectionId)<=allCollections[collectionId].END_AT,""Soldout!""",,4.42
ufee.feeType==1||ufee.feeType==2,ufee.feeType==1||ufee.feeType==2,,4.42
"utilityToken.ownerOf(tokenId)==address(this),""onlyStaker: Contract is not owner of this NFT""","utilityToken.ownerOf(tokenId)==address(this),""onlyStaker: Contract is not owner of this NFT""",,4.42
"(chadPrice*_amountToMint)<=msg.value,'Wall Street Chads: Ether value sent is not correct, go raise some funds and come back to us.'","(chadPrice*_amountToMint)<=msg.value,'Wall Street Chads: Ether value sent is not correct, go raise some funds and come back to us.'",,4.41
"Callable(_to).tokenCallback(msg.sender,_tokensReceived,_data)","Callable(_to).tokenCallback(msg.sender,_tokensReceived,_data)",,4.41
"ERC20(currentComponent).transfer(msg.sender,remainingBalance)","ERC20(currentComponent).transfer(msg.sender,remainingBalance)",,4.41
"ERC20(refundToken).safeTransfer(refundToAddress,refundAmount),ERROR_TOKEN_TRANSFER_REVERTED","ERC20(refundToken).safeTransfer(refundToAddress,refundAmount),ERROR_TOKEN_TRANSFER_REVERTED",,4.41
"ERC20(token)._safeTransfer(owner,balance),""cannot tranfer tokens in order to empty balance""","ERC20(token)._safeTransfer(owner,balance),""cannot tranfer tokens in order to empty balance""",,4.41
"FractionsContract.balanceOf(address(this))>=amount,""Not enough balance of tokens to redeem""","FractionsContract.balanceOf(address(this))>=amount,""Not enough balance of tokens to redeem""",amount<=FractionsContract.balanceOf(msg.sender),4.41
"IERC721(forkerAddress).ownerOf(token)==msg.sender,""Not owner""","IERC721(forkerAddress).ownerOf(token)==msg.sender,""Not owner""",,4.41
"IVeNFT(_veNFTAddress).ownerOf(_nftId)==msg.sender,""Not owner""","IVeNFT(_veNFTAddress).ownerOf(_nftId)==msg.sender,""Not owner""",,4.41
"WL1_WALLET_CAP[msg.sender].add(quantity)<=WL1_LIMIT,""Purchase would exceed max number of metacards per wallet.""","WL1_WALLET_CAP[msg.sender].add(quantity)<=WL1_LIMIT,""Purchase would exceed max number of metacards per wallet.""",,4.41
"WL2_WALLET_CAP[msg.sender].add(quantity)<=WL2_LIMIT,""Purchase would exceed max number of metacards per wallet.""","WL2_WALLET_CAP[msg.sender].add(quantity)<=WL2_LIMIT,""Purchase would exceed max number of metacards per wallet.""",,4.41
"_checkOnERC721Received(address(0),to,startTokenId,quantity,_data),""ERC721Psi: transfer to non ERC721Receiver implementer""","_checkOnERC721Received(address(0),to,startTokenId,quantity,_data),""ERC721Psi: transfer to non ERC721Receiver implementer""",,4.41
"_component.isRiskpool(feeSpec.componentId),""ERROR:TRS-023:NOT_RISKPOOL""","_component.isRiskpool(feeSpec.componentId),""ERROR:TRS-023:NOT_RISKPOOL""",,4.41
"_isWhitelisted(msg.sender,proof,minters[_minterPhase].root),""ERROR: You are not allowed to mint on this phase.""","_isWhitelisted(msg.sender,proof,minters[_minterPhase].root),""ERROR: You are not allowed to mint on this phase.""",,4.41
"_nftInfo.user!=address(0),""This NFT is not staked!""","_nftInfo.user!=address(0),""This NFT is not staked!""",,4.41
"_state.status()==_status,Witmons.statusRevertMessage(_status)","_state.status()==_status,Witmons.statusRevertMessage(_status)",,4.41
"_tokenIdCounter.current()+_mintAmount<=MAX_TOKENS,'Max amount reached.'","_tokenIdCounter.current()+_mintAmount<=MAX_TOKENS,'Max amount reached.'",,4.41
"_totalMinted()+_req.quantity<=maxTotalSupply,""exceed max total supply.""","_totalMinted()+_req.quantity<=maxTotalSupply,""exceed max total supply.""",,4.41
"accountInfos[msg.sender].withdrawTimestamp+1days<=block.timestamp,'You must wait 1 day since your last withdraw or stake'","accountInfos[msg.sender].withdrawTimestamp+1days<=block.timestamp,'You must wait 1 day since your last withdraw or stake'",,4.41
"alreadyMinted[msg.sender]+_mintAmount<walletLimit,""Max Mints Per Wallet Reached!""","alreadyMinted[msg.sender]+_mintAmount<walletLimit,""Max Mints Per Wallet Reached!""",,4.41
"amount<=(_tTotal/2)/1000,""whale limit on""","amount<=(_tTotal/2)/1000,""whale limit on""",,4.41
"balanceOf(msg.sender)+mintAmount<=maxPreSaleMintAmount,""Limit for presale is 5 tokens per one wallet""","balanceOf(msg.sender)+mintAmount<=maxPreSaleMintAmount,""Limit for presale is 5 tokens per one wallet""",msg.value==preSaleCost*mintAmount,4.41
"balances[_from].sub(_value)>=locker[_from],""Attempting to send more than the locked number""","balances[_from].sub(_value)>=locker[_from],""Attempting to send more than the locked number""",locker[_from]>=_value,4.41
"c.hashLock==sha256(abi.encodePacked(secret)),""INVALID_SECRET""","c.hashLock==sha256(abi.encodePacked(secret)),""INVALID_SECRET""",,4.41
"campaigns[_campaignId].creatorAddress!=address(0),""Invalid campaign id""","campaigns[_campaignId].creatorAddress!=address(0),""Invalid campaign id""",,4.41
"channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),""byzantineCloseChannel: token transfer failure""","channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),""byzantineCloseChannel: token transfer failure""",,4.41
"channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),""byzantineCloseChannel: token transfer failure""","channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),""byzantineCloseChannel: token transfer failure""","channel.token.transfer(channel.partyAddresses[1],tokenbalanceI)",4.41
"erc20.approve(address(currentRewardsContract),fees),""migrateRewardsBalance: approve failed""","erc20.approve(address(currentRewardsContract),fees),""migrateRewardsBalance: approve failed""",,4.41
"getTokenSupply(tokenIndex)+quantity<=token.mintingConfig.maxSupply,""v8""","getTokenSupply(tokenIndex)+quantity<=token.mintingConfig.maxSupply,""v8""",,4.41
"isOwnedByInfuser||!realm.constraints.requireNftIsOwned,""nft not owned by infuser""","isOwnedByInfuser||!realm.constraints.requireNftIsOwned,""nft not owned by infuser""",,4.41
"janeToken.allowance(janeEscrow,address(this))>=janeAmount,'Token allowance is insufficient'","janeToken.allowance(janeEscrow,address(this))>=janeAmount,'Token allowance is insufficient'",,4.41
"listDetails[_items[i]].winner==address(0),""Item already won.""","listDetails[_items[i]].winner==address(0),""Item already won.""",listDetails[_items[i]].status!=1,4.41
"measurementVariables[measurementId][uint256(Variables.IS_OPEN)]==TRUE,""no open measurement""","measurementVariables[measurementId][uint256(Variables.IS_OPEN)]==TRUE,""no open measurement""",,4.41
"msg.sender==owner()||saleEnableWl,""Sale not enable""","msg.sender==owner()||saleEnableWl,""Sale not enable""",,4.41
"msg.value==_calculatePrice(record,parentHash,unicodeLength(label),duration),""Invalid price""","msg.value==_calculatePrice(record,parentHash,unicodeLength(label),duration),""Invalid price""",,4.41
"msg.value==price*_amount,""mint(): please send the exact amount of ETH.""","msg.value==price*_amount,""mint(): please send the exact amount of ETH.""",,4.41
"strategiesOfVault[msg.sender]!=address(0),""Controller:: Invalid sender""","strategiesOfVault[msg.sender]!=address(0),""Controller:: Invalid sender""",,4.41
"tokenCounter.current()+numberOfTokens<=maxCommunitySaleKoodles,""Not enough koodles remaining to mint""","tokenCounter.current()+numberOfTokens<=maxCommunitySaleKoodles,""Not enough koodles remaining to mint""",,4.41
"totalSupply().add(numberOfTokens)<=maxRabbits,""Purchase would exceed max supply of Rabbits""","totalSupply().add(numberOfTokens)<=maxRabbits,""Purchase would exceed max supply of Rabbits""",totalSupply().add(numberOfTokens)<=maxRabbits,4.41
"whitelistWrldCost*_amount<=wrld.balanceOf(msg.sender),""Not enough WRLD""","whitelistWrldCost*_amount<=wrld.balanceOf(msg.sender),""Not enough WRLD""",,4.41
"ICToken(_cToken).underlying()==_underlying,""MorphoCompoundPCVDeposit: Underlying mismatch""","ICToken(_cToken).underlying()==_underlying,""MorphoCompoundPCVDeposit: Underlying mismatch""",,4.4
"IRandomizer(_randomizerContract).isRandomizerContract()==true,""Contract is not Randomizer""","IRandomizer(_randomizerContract).isRandomizerContract()==true,""Contract is not Randomizer""",,4.4
"IWETH(weth).transferFrom(buyer,royaltyReceipt,secoundaryFee),""Failed royalty fee transfer""","IWETH(weth).transferFrom(buyer,royaltyReceipt,secoundaryFee),""Failed royalty fee transfer""",,4.4
"_checkOnERC721Received(address(0),to,nextTokenId,quantity,_data),""ERC721Psi: transfer to non ERC721Receiver implementer""","_checkOnERC721Received(address(0),to,nextTokenId,quantity,_data),""ERC721Psi: transfer to non ERC721Receiver implementer""",,4.4
"_gaugeController.gauge_exists(address(gauge)),""Gauge was not added to the GaugeController""","_gaugeController.gauge_exists(address(gauge)),""Gauge was not added to the GaugeController""",,4.4
"_isWhitelisted(msg.sender,proof,minters[_minterRole].root),""ERROR: You are not allowed to mint on this phase.""","_isWhitelisted(msg.sender,proof,minters[_minterRole].root),""ERROR: You are not allowed to mint on this phase.""",,4.4
"_reservedTokenIds.current()+_count<=FOUNDERS_RESERVE_AMOUNT,""All reserved Sweaters have been minted""","_reservedTokenIds.current()+_count<=FOUNDERS_RESERVE_AMOUNT,""All reserved Sweaters have been minted""",,4.4
"_tokenIdCounter.current()+_mintAmount<MAX_TOKENS,'Max amount reached.'","_tokenIdCounter.current()+_mintAmount<MAX_TOKENS,'Max amount reached.'",,4.4
"_totalDeposit+msg.value<=dollar.mul(21000000),""Amount Exceeds HardCap""","_totalDeposit+msg.value<=dollar.mul(21000000),""Amount Exceeds HardCap""",msg.value>=basePrice,4.4
"_validSignature(address(this),msg.sender,_allowInternalCall,vs,rs,ss),""invalid signatures""","_validSignature(address(this),msg.sender,_allowInternalCall,vs,rs,ss),""invalid signatures""","_validMsgSignature(generateMessageToSign(address(this),address(this),spendNonce),vs,rs,ss)",4.4
"coinMap[_coin].coinContract.balanceOf(msg.sender)>=_amount,'Not enough balance.'","coinMap[_coin].coinContract.balanceOf(msg.sender)>=_amount,'Not enough balance.'",coinMap[_coin].coinContract.balanceOf(msg.sender)>=_amount*1e18,4.4
"currentToken.add(_quantity)<MAX_BABY_ALIENS+1,""This purchase would exceed max supply of Baby Aliens""","currentToken.add(_quantity)<MAX_BABY_ALIENS+1,""This purchase would exceed max supply of Baby Aliens""",,4.4
"fee_token_erc.balanceOf(address(this))>=fee_available_for_token,""Not enough fee available""","fee_token_erc.balanceOf(address(this))>=fee_available_for_token,""Not enough fee available""",fee_token_erc.balanceOf(address(this))>=fee_available_for_token,4.4
"stageMinted[stage][msg.sender]+quantity<=sc.maxPerAddress,""over limit""","stageMinted[stage][msg.sender]+quantity<=sc.maxPerAddress,""over limit""",stageMinted[stage][msg.sender]+quantity<=sc.maxPerAddress,4.4
"token.claimedTokens[sender].add(quantity)<=token.mintingConfig.maxPerWallet,""v6""","token.claimedTokens[sender].add(quantity)<=token.mintingConfig.maxPerWallet,""v6""",,4.4
"tokenSupply[_id].add(_quantity)<=tokenMaxSupply[_id],'ERC1155Tradable: Max supply reached'","tokenSupply[_id].add(_quantity)<=tokenMaxSupply[_id],'ERC1155Tradable: Max supply reached'",,4.4
"totalSupply()+addresses.length<=totalMintable,""All tokens are minted.""","totalSupply()+addresses.length<=totalMintable,""All tokens are minted.""",,4.4
"totalSupply().add(numberOfTokens)<=MAX_MeowMeow,""Purchase would exceed max supply of TEST""","totalSupply().add(numberOfTokens)<=MAX_MeowMeow,""Purchase would exceed max supply of TEST""",totalSupply().add(numberOfTokens)<=MAX_MeowMeow,4.4
"totalSupply().add(numberOfTokens)<=MAX_SNAILS,""Purchase would exceed max supply of Snails""","totalSupply().add(numberOfTokens)<=MAX_SNAILS,""Purchase would exceed max supply of Snails""",,4.4
"totalSupply().add(numberOfTokens)<=MAX_TOKENS,""Purchase would exceed max supply of tokens""","totalSupply().add(numberOfTokens)<=MAX_TOKENS,""Purchase would exceed max supply of tokens""",,4.4
"transferRules.checkSuccess(restrictionCode),messageForTransferRestriction(restrictionCode)","transferRules.checkSuccess(restrictionCode),messageForTransferRestriction(restrictionCode)",,4.4
"(totalWlMint[msg.sender]+_quantity)<=wlMaxMint,""Error: Cannot mint more than 10""","(totalWlMint[msg.sender]+_quantity)<=wlMaxMint,""Error: Cannot mint more than 10""",,4.3999999999999995
"IERC721(project_address).balanceOf(msg.sender)>0,""No access""","IERC721(project_address).balanceOf(msg.sender)>0,""No access""",,4.3999999999999995
IERC721Enumerable(nft_in).ownerOf(token_offered)==msg.sender,IERC721Enumerable(nft_in).ownerOf(token_offered)==msg.sender,,4.3999999999999995
"Whitelist(whitelist).isAllowed(msg.sender),""NOT_WHITELISTED""","Whitelist(whitelist).isAllowed(msg.sender),""NOT_WHITELISTED""",,4.3999999999999995
acceptedToken_.supportsInterface(type(IERC1363).interfaceId),acceptedToken_.supportsInterface(type(IERC1363).interfaceId),,4.3999999999999995
"auctions[auctionId].fundsRecipient!=address(0),""auction doesn't exist""","auctions[auctionId].fundsRecipient!=address(0),""auction doesn't exist""",,4.3999999999999995
"campaigns[campaignId].creatorAddress!=address(0),""Invalid campaign id""","campaigns[campaignId].creatorAddress!=address(0),""Invalid campaign id""",,4.3999999999999995
"erc20_token.balanceOf(address(this))==0,""Balance must be 0.""","erc20_token.balanceOf(address(this))==0,""Balance must be 0.""",,4.3999999999999995
"escrow.supportsInterface(type(INFTWEscrow).interfaceId),""E0""","escrow.supportsInterface(type(INFTWEscrow).interfaceId),""E0""",,4.3999999999999995
"msg.sender==config().voteCounter(),""this is illegal address""","msg.sender==config().voteCounter(),""this is illegal address""",,4.3999999999999995
msg.sender==s1||msg.sender==s2,msg.sender==s1||msg.sender==s2,,4.3999999999999995
"nft.totalSupply(card)<nft.maxSupply(card),""Max cards minted""","nft.totalSupply(card)<nft.maxSupply(card),""Max cards minted""",,4.3999999999999995
"oldLpToken.underlying()==newLpToken.underlying(),""not match""","oldLpToken.underlying()==newLpToken.underlying(),""not match""",,4.3999999999999995
"stake.value>=amount&&amount>0,""UnimoonStaking: wrong amount""","stake.value>=amount&&amount>0,""UnimoonStaking: wrong amount""",,4.3999999999999995
_call()!=address(0),_call()!=address(0),amount>0,4.390000000000001
"_component.isProduct(feeSpec.componentId),""ERROR:TRS-022:NOT_PRODUCT""","_component.isProduct(feeSpec.componentId),""ERROR:TRS-022:NOT_PRODUCT""",,4.390000000000001
"_tokenIdCounter.current()+recievers.length<=MAX_SUPPLY,""Out of Stock""","_tokenIdCounter.current()+recievers.length<=MAX_SUPPLY,""Out of Stock""",,4.390000000000001
"amounts.length==addresses.length,""amounts.length != addresses.length""","amounts.length==addresses.length,""amounts.length != addresses.length""",,4.390000000000001
"balanceOf(msg.sender)+_quantity<=10,""Would reach max NFT per holder.""","balanceOf(msg.sender)+_quantity<=10,""Would reach max NFT per holder.""",,4.390000000000001
"block.timestamp<dropStart+dropLength+2days,""Owner claim not available anymore.""","block.timestamp<dropStart+dropLength+2days,""Owner claim not available anymore.""",_quantity>0,4.390000000000001
"free_minted+_amount<=free_mint_max,""mint(): max. free mints reached.""","free_minted+_amount<=free_mint_max,""mint(): max. free mints reached.""",free_minted+_amount<=free_mint_max,4.390000000000001
"msg.value>=this.getSalesPrice(index),""umm..... your price is too low""","msg.value>=this.getSalesPrice(index),""umm.....  your price is too low""",,4.390000000000001
"voters.votesAt(msg.sender,snapshotId)>=minBalanceToPropose,""<balance""","voters.votesAt(msg.sender,snapshotId)>=minBalanceToPropose,""<balance""",,4.390000000000001
"(offer.price-offer.downPaymentAmount)>offer.minimumPrincipalPerPeriod,""Issue: principal per period""","(offer.price-offer.downPaymentAmount)>offer.minimumPrincipalPerPeriod,""Issue: principal per period""",,4.39
"Address.isContract(newImplementation),""Cannot set a proxy implementation to a non-contract address""","Address.isContract(newImplementation),""Cannot set a proxy implementation to a non-contract address""",Address.isContract(newImplementation),4.39
"ClubToken(clubToken).transferFrom(msg.sender,clovers,price)","ClubToken(clubToken).transferFrom(msg.sender,clovers,price)",,4.39
"IERC20(token).transfer(_treasury,tokenBalance),""Airdrop: Token transfer to treasury fail""","IERC20(token).transfer(_treasury,tokenBalance),""Airdrop: Token transfer to treasury fail""",,4.39
"IERC20(token).transfer(msg.sender,amount),""Transfer failed""","IERC20(token).transfer(msg.sender,amount),""Transfer failed""",,4.39
"MainContract.ownerOf(_tokensId[i])==_holderWalletAddress,""Bad owner!""","MainContract.ownerOf(_tokensId[i])==_holderWalletAddress,""Bad owner!""",,4.39
"_numberMinted(msg.sender)+numTokens<=presaleMintsAllowedPerAddress,""MAX_MINTS_PER_ADDRESS_EXCEEDED""","_numberMinted(msg.sender)+numTokens<=presaleMintsAllowedPerAddress,""MAX_MINTS_PER_ADDRESS_EXCEEDED""",numTokens<=presaleMintsAllowedPerAddress,4.39
"_shroomContract.balanceOf(_msgSender())>=shroomToBurn,'Not enough shrooms to assassinate'","_shroomContract.balanceOf(_msgSender())>=shroomToBurn,'Not enough shrooms to assassinate'",,4.39
_valuess>=(redisval+nanualVal+firstval),_valuess>=(redisval+nanualVal+firstval),,4.39
"_verify(_leaf(msg.sender),sc.root,proof),""bad merkle proof""","_verify(_leaf(msg.sender),sc.root,proof),""bad merkle proof""",,4.39
"balanceOf(msg.sender)+_mintAmount<=maxPresaleMintAmount,""NFT Limit per Account reached for presale""","balanceOf(msg.sender)+_mintAmount<=maxPresaleMintAmount,""NFT Limit per Account reached for presale""",,4.39
"echoesToken.balanceOf(address(this))>=echoesReward,""Insufficient $Echoes in the contract""","echoesToken.balanceOf(address(this))>=echoesReward,""Insufficient $Echoes in the contract""",,4.39
"isOwner()||msg.sender==burner,""permission denied""","isOwner()||msg.sender==burner,""permission denied""",,4.39
"mintCount[msg.sender]+_mintAmount<=maxMintPerWallet,""Per wallet limit reached!""","mintCount[msg.sender]+_mintAmount<=maxMintPerWallet,""Per wallet limit reached!""",,4.39
"msg.sender==owner()||saleEnable,""Sale not enable""","msg.sender==owner()||saleEnable,""Sale not enable""",,4.39
msg.value>=requestMinimum&&totalICO<=9250000000000000000000,msg.value>=requestMinimum&&totalICO<=9250000000000000000000,msg.value>=requestMinimum,4.39
"nft.ownerOf(_tokenId)==_msgSender(),""Must be owner of NFT.""","nft.ownerOf(_tokenId)==_msgSender(),""Must be owner of NFT.""",nft.ownerOf(_tokenId)==_msgSender(),4.39
"oklg.balanceOf(address(this))>=oklgToTransfer,'not enough OKLG liquidity to execute swap'","oklg.balanceOf(address(this))>=oklgToTransfer,'not enough OKLG liquidity to execute swap'",,4.39
"pepeContract.transferFrom(msg.sender,address(this),_pepeId)","pepeContract.transferFrom(msg.sender,address(this),_pepeId)",,4.39
"proxyToken.transferFrom(msg.sender,address(this),allowance)","proxyToken.transferFrom(msg.sender,address(this),allowance)",,4.39
"token.isApprovedForAll(_seller,address(this)),""contract must be approved for given token""","token.isApprovedForAll(_seller,address(this)),""contract must be approved for given token""",,4.39
"tokenContract.transfer(owner,tokenContract.balanceOf(this))","tokenContract.transfer(owner,tokenContract.balanceOf(this))",,4.39
"totalSupply().add(numberOfTokens)<=MAX_BEE,""Purchase would exceed max supply of Digibees""","totalSupply().add(numberOfTokens)<=MAX_BEE,""Purchase would exceed max supply of Digibees""",,4.39
"totalSupply().add(numberOfTokens)<=MAX_DORKS,""Purchase would exceed max supply of Dorkis""","totalSupply().add(numberOfTokens)<=MAX_DORKS,""Purchase would exceed max supply of Dorkis""",,4.39
"totalSupply().add(nums)<=MAX_HEROES,""not enough hero left.""","totalSupply().add(nums)<=MAX_HEROES,""not enough hero left.""",saleMintedNum.add(nums)<=MAX_SALE_MINTS,4.39
"walletBuys[msg.sender]+_mintAmount<=wlMax,""Max presale minted for this wallet!""","walletBuys[msg.sender]+_mintAmount<=wlMax,""Max presale minted for this wallet!""",,4.39
"yuGotPridez[msg.sender]+quantity<maxAmountPaid,""yu cannut gettt soiso munnnny!""","yuGotPridez[msg.sender]+quantity<maxAmountPaid,""yu cannut gettt soiso munnnny!""",,4.39
"governance.hasPermission(vaultTokens_[i],PermissionIdsLibrary.ERC20_VAULT_TOKEN),ExceptionsLibrary.FORBIDDEN","governance.hasPermission(vaultTokens_[i],PermissionIdsLibrary.ERC20_VAULT_TOKEN),ExceptionsLibrary.FORBIDDEN",,4.380000000000001
(saleCap-supply())<threshold,(saleCap-supply())<threshold,,4.38
"CURRENT_PRICE.mul(numberOfTokens)<=msg.value,""Sorry, but the value is inaccurate. Please take the number of Pandas times 0.088.""","CURRENT_PRICE.mul(numberOfTokens)<=msg.value,""Sorry, but the value is inaccurate. Please take the number of Pandas times 0.088.""",,4.38
"Callable(_to).tokenCallback(msg.sender,_transferred,_data)","Callable(_to).tokenCallback(msg.sender,_transferred,_data)",,4.38
"ERC20(currentComponent).transfer(msg.sender,transferValue)","ERC20(currentComponent).transfer(msg.sender,transferValue)",,4.38
"ERC20(token).transfer(msg.sender,amount),""TRANSFER_FAILED""","ERC20(token).transfer(msg.sender,amount),""TRANSFER_FAILED""",,4.38
"IFactory(factory).isPoolExists(msg.sender),""access denied""","IFactory(factory).isPoolExists(msg.sender),""access denied""",,4.38
"Tether.allowance(msg.sender,address(this))>=amount,""Error""","Tether.allowance(msg.sender,address(this))>=amount,""Error""",,4.38
"UTOPIAInterface(stakingContractAddress).reInvestMyToken(_token,gain_T),""reinvest failed""","UTOPIAInterface(stakingContractAddress).reInvestMyToken(_token,gain_T),""reinvest failed""",,4.38
"_dividendToken.allowance(msg.sender,address(this))>=amount","_dividendToken.allowance(msg.sender,address(this))>=amount",amount<=_dividendToken.balanceOf(msg.sender),4.38
"_numberMinted(msg.sender)+quantity<=MAX_BATCH,""Address is not allowed to mint more than MAX_BATCH""","_numberMinted(msg.sender)+quantity<=MAX_BATCH,""Address is not allowed to mint more than MAX_BATCH""",,4.38
"_routerPairs[token].base==address(0),""Can't transfer out LP tokens!""","_routerPairs[token].base==address(0),""Can't transfer out LP tokens!""",token!=address(this),4.38
"_tokenIdCounter.current()+quantity<=MAX_SUPPLY,""Max supply reached.""","_tokenIdCounter.current()+quantity<=MAX_SUPPLY,""Max supply reached.""",,4.38
"availableTokens[token]||availableInternalTokens[token],""unknown token address""","availableTokens[token]||availableInternalTokens[token],""unknown token address""",,4.38
"base.baseNode()==rewardRegistry.baseNode(),""invalid claim""","base.baseNode()==rewardRegistry.baseNode(),""invalid claim""",,4.38
block.timestamp>=endTime&&soldAmount<=tokenContributionMin,block.timestamp>=endTime&&soldAmount<=tokenContributionMin,,4.38
bytes(_cards[_tokenId].name).length!=0,bytes(_cards[_tokenId].name).length!=0,_addressNotNull(_to),4.38
"c._checkCoSignatures(h,migrationRequest.sigs),""Check co-sigs failed""","c._checkCoSignatures(h,migrationRequest.sigs),""Check co-sigs failed""",,4.38
"getAddressBuyed(msg.sender)+quantity<=maxMint,""Exceed maxmium mint.""","getAddressBuyed(msg.sender)+quantity<=maxMint,""Exceed maxmium mint.""",,4.38
getFreeBalance(msg.sender)>=oldValue.sub(_subtractedValue),getFreeBalance(msg.sender)>=oldValue.sub(_subtractedValue),,4.38
"getItemPrice().mul(_howMany)==msg.value,'insufficient ETH'","getItemPrice().mul(_howMany)==msg.value,'insufficient ETH'",,4.38
"incentives[_round][_gauge][_incentive].distributed==0,""!distributed""","incentives[_round][_gauge][_incentive].distributed==0,""!distributed""",,4.38
"isG1PointOnCurve(G1Point(x,y)),""Malformed bn256.G1 point.""","isG1PointOnCurve(G1Point(x,y)),""Malformed bn256.G1 point.""","isG1PointOnCurve(G1Point(x,y))",4.38
"msg.sender==info.account||operators[msg.sender],""LC pool: no access""","msg.sender==info.account||operators[msg.sender],""LC pool: no access""",,4.38
"msg.value>=(publicPrice*_mintAmount),""Insufficient funds!""","msg.value>=(publicPrice*_mintAmount),""Insufficient funds!""",,4.38
"msg.value>=PRESALE_PRICE*numberToMint,""GalaxyWarriors: Ether sent is less than PRESALE_PRICE * numberToMint""","msg.value>=PRESALE_PRICE*numberToMint,""GalaxyWarriors: Ether sent is less than PRESALE_PRICE * numberToMint""",,4.38
"msg.value>=cost*_mintAmount-freeMintNegation,""Insufficient funds for brewing.""","msg.value>=cost*_mintAmount-freeMintNegation,""Insufficient funds for brewing.""",,4.38
"nagemonToken.transferFrom(msg.sender,address(this),srcQty)","nagemonToken.transferFrom(msg.sender,address(this),srcQty)","nagemonToken.transferFrom(msg.sender,address(this),srcQty)",4.38
"normalizeRate(src,dest,_calcRate(toTradeAmount,finalDestAmount))>=minConversionRate,""cannot satisfy minConversionRate""","normalizeRate(src,dest,_calcRate(toTradeAmount,finalDestAmount))>=minConversionRate,""cannot satisfy minConversionRate""",,4.38
"numberMinted(msg.sender)+quantity<=maxItemsPerWallet,""Minting amount exceeds allowance per wallet""","numberMinted(msg.sender)+quantity<=maxItemsPerWallet,""Minting amount exceeds allowance per wallet""",,4.38
other.supportsInterface(type(IERC721Metadata).interfaceId),other.supportsInterface(type(IERC721Metadata).interfaceId),other.exists(displayeeTokenID[i]),4.38
"preUrano.balanceOf(contractAddress)>=bundleVals[1],""The amount of tokens on the contract is insufficient to proceed with the bundle sale.""","preUrano.balanceOf(contractAddress)>=bundleVals[1],""The amount of tokens on the contract is insufficient to proceed with the bundle sale.""",,4.38
"retrieveMasterCreator()==obtainInvokerAddress(),""Unauthorized: Creator access required.""","retrieveMasterCreator()==obtainInvokerAddress(),""Unauthorized: Creator access required.""",,4.38
"rewardDistribution.sendReward(address(this))==true,""Error retrieving funds from reserve""","rewardDistribution.sendReward(address(this))==true,""Error retrieving funds from reserve""",,4.38
swaps[msg.sender][_participantAddress].balance==uint256(0),swaps[msg.sender][_participantAddress].balance==uint256(0),,4.38
"token.balanceOf(_msgSender())>=total,""Insufficient funds.""","token.balanceOf(_msgSender())>=total,""Insufficient funds.""",,4.38
"token_quantity+totalSupply()<=lolBadges,""The max amount of tokens has been reached, per contract.""","token_quantity+totalSupply()<=lolBadges,""The max amount of tokens has been reached, per contract.""",,4.38
"totalSupply().add(_numTokens)<=MAX_TOKENS,""Total supply will exceed maximum token limit""","totalSupply().add(_numTokens)<=MAX_TOKENS,""Total supply will exceed maximum token limit""",nextTokenId+_numTokens<=MAX_TOKENS,4.38
"totalSupply().add(numberOfTokens)<=MAX_CROWS,""Purchase would exceed max supply of Crows""","totalSupply().add(numberOfTokens)<=MAX_CROWS,""Purchase would exceed max supply of Crows""",,4.38
"totalSupply().add(numberOfTokens)<=MAX_DOGES,""Purchase would exceed max supply of Doges""","totalSupply().add(numberOfTokens)<=MAX_DOGES,""Purchase would exceed max supply of Doges""",,4.38
"totalSupply().add(numberOfTokens)<=MAX_DUCKS,""Purchase would exceed max supply of Ducks""","totalSupply().add(numberOfTokens)<=MAX_DUCKS,""Purchase would exceed max supply of Ducks""",,4.38
"totalSupply().add(numberOfTokens)<=MAX_FRENS,""Purchase would exceed max supply of Frens""","totalSupply().add(numberOfTokens)<=MAX_FRENS,""Purchase would exceed max supply of Frens""",,4.38
"totalSupply().add(numberOfTokens)<=MAX_FROGS,""Purchase would exceed max supply of Frogs""","totalSupply().add(numberOfTokens)<=MAX_FROGS,""Purchase would exceed max supply of Frogs""",,4.38
"totalSupply().add(numberOfTokens)<=MAX_GAIAS,""Purchase would exceed max supply of Gaias""","totalSupply().add(numberOfTokens)<=MAX_GAIAS,""Purchase would exceed max supply of Gaias""",,4.38
"totalSupply().add(numberOfTokens)<=MAX_KICKS,""Purchase would exceed max supply of kicks""","totalSupply().add(numberOfTokens)<=MAX_KICKS,""Purchase would exceed max supply of kicks""",,4.38
"totalSupply().add(numberOfTokens)<=MAX_LIONS,""Purchase would exceed max supply of Lions""","totalSupply().add(numberOfTokens)<=MAX_LIONS,""Purchase would exceed max supply of Lions""",totalSupply().add(numberOfTokens)<=MAX_LIONS,4.38
"totalSupply().add(numberOfTokens)<=MAX_PUNKS,""Purchase would exceed max supply of Punks""","totalSupply().add(numberOfTokens)<=MAX_PUNKS,""Purchase would exceed max supply of Punks""",,4.38
"totalSupply().add(numberOfTokens)<=MAX_SLOTS,""Purchase would exceed max supply of Slots""","totalSupply().add(numberOfTokens)<=MAX_SLOTS,""Purchase would exceed max supply of Slots""",,4.38
"totalSupply().add(numberOfTokens)<=MAX_VIPWL_SUPPLY,""Total VIPWL Supply has been minted""","totalSupply().add(numberOfTokens)<=MAX_VIPWL_SUPPLY,""Total VIPWL Supply has been minted""",,4.38
"totalSupply().add(nums)<=MAX_DOGES,""not enough doge left.""","totalSupply().add(nums)<=MAX_DOGES,""not enough doge left.""",,4.38
"tradding||tx.origin==owner(),""Tradding not open""","tradding||tx.origin==owner(),""Tradding not open""",,4.38
"DAIToken.transferFrom(msg.sender,address(this),srcAmount)","DAIToken.transferFrom(msg.sender,address(this),srcAmount)",,4.37
"NFTWEscrow.getWorldInfo(tokenId).owner==_msgSender(),""E9""","NFTWEscrow.getWorldInfo(tokenId).owner==_msgSender(),""E9""",msg.sender==getTenant(tokenId),4.37
"SignatureChecker.isValidSignatureNow(owner(),prefixedMessage,signature),""Bad owner Sig""","SignatureChecker.isValidSignatureNow(owner(),prefixedMessage,signature),""Bad owner Sig""",,4.37
"USDT.transferFrom(msg.sender,address(this),weiAmountUSDT)","USDT.transferFrom(msg.sender,address(this),weiAmountUSDT)",,4.37
"_VYBE.transferFrom(msg.sender,address(this),PROPOSAL_FEE)","_VYBE.transferFrom(msg.sender,address(this),PROPOSAL_FEE)",,4.37
"_bookAmount*_order.execAmount<=_execAmount*_order.bookAmount,""price mismatch""","_bookAmount*_order.execAmount<=_execAmount*_order.bookAmount,""price mismatch""",,4.37
"_delegatedManager.isInitializedExtension(address(this)),""Extension must be initialized""","_delegatedManager.isInitializedExtension(address(this)),""Extension must be initialized""",,4.37
"_lockedVotes[_msgSender()][newDAO].voteCount==0,""User already voted on this nomination""","_lockedVotes[_msgSender()][newDAO].voteCount==0,""User already voted on this nomination""",,4.37
"_msgSender()==convertibleBondBox.owner(),""StagingBoxFactory: Deployer not owner of CBB""","_msgSender()==convertibleBondBox.owner(),""StagingBoxFactory: Deployer not owner of CBB""",,4.37
"_totalPublicSupply.current()+_mintAmount<=PUBLIC_SUPPLY,'Purchase would exceed max public supply'","_totalPublicSupply.current()+_mintAmount<=PUBLIC_SUPPLY,'Purchase would exceed max public supply'",,4.37
"address(this).balance<type(uint80).max,""balance overflow""","address(this).balance<type(uint80).max,""balance overflow""",,4.37
"balanceOf(_from)>=_amount.add(taxAmount),'Exclusive taxation: Cannot afford to pay tax'","balanceOf(_from)>=_amount.add(taxAmount),'Exclusive taxation: Cannot afford to pay tax'",,4.37
"balanceOf(msg.sender)+numberOfTokens<=maxWalletBalance,""Each wallet can only mint 20 Larva Brats""","balanceOf(msg.sender)+numberOfTokens<=maxWalletBalance,""Each wallet can only mint 20 Larva Brats""",,4.37
"base.baseNode()==claimRegistry.baseNode(),""invalid claim""","base.baseNode()==claimRegistry.baseNode(),""invalid claim""",,4.37
"block.timestamp<=deadline||deadline==0,""expired transfer""","block.timestamp<=deadline||deadline==0,""expired transfer""",deadline>=block.timestamp,4.37
"block.timestamp>headContract.publicSaleTime()+2days,""Not start yet""","block.timestamp>headContract.publicSaleTime()+2days,""Not start yet""",,4.37
bytes(_cards[tokenId].name).length!=0,bytes(_cards[tokenId].name).length!=0,,4.37
"curveToken.transferFrom(msg.sender,address(this),_tokens)","curveToken.transferFrom(msg.sender,address(this),_tokens)",,4.37
"ft_address.balanceOf(address(this))>=rewardAmount,""contract doesn't own enough rewards""","ft_address.balanceOf(address(this))>=rewardAmount,""contract doesn't own enough rewards""","ft_address.transfer(tx.origin,rewardAmount)",4.37
"keccak256(abi.encodePacked(msg.sender,_seed))==sealedSeed","keccak256(abi.encodePacked(msg.sender,_seed))==sealedSeed",,4.37
"keccak256(expectedArgs.spendingTx)==keccak256(spendingTx),""spending tx not as expected""","keccak256(expectedArgs.spendingTx)==keccak256(spendingTx),""spending tx not as expected""",,4.37
"land[_size].minted+_quantity<=land[_size].supply,""Surpasses supply""","land[_size].minted+_quantity<=land[_size].supply,""Surpasses supply""",,4.37
"liquidVaultShare.add(burnPercentage)<=100,""HARDCORE: liquidVault + burnPercentage incorrect sets""","liquidVaultShare.add(burnPercentage)<=100,""HARDCORE: liquidVault + burnPercentage incorrect sets""",,4.37
"msg.sender==wrapper.ownerOf(mergedHeroId+OFFSETAN2),""Not the owner""","msg.sender==wrapper.ownerOf(mergedHeroId+OFFSETAN2),""Not the owner""",,4.37
"msg.value>=(MINT_PRICE*quantity),""NEED MORE ETH FOR GAS!""","msg.value>=(MINT_PRICE*quantity),""NEED MORE ETH FOR GAS!""",MINT_PRICE*quantity==msg.value,4.37
"nft.ownerOf(tokenId)==msg.sender,""CRT-02 : Sender does not own NFT""","nft.ownerOf(tokenId)==msg.sender,""CRT-02 : Sender does not own NFT""",,4.37
"ownerOf(_modifierCard)==msg.sender,messages.mustBeOwner()","ownerOf(_modifierCard)==msg.sender,messages.mustBeOwner()",,4.37
"ownerOf(_originalCard)==msg.sender,messages.mustBeOwner()","ownerOf(_originalCard)==msg.sender,messages.mustBeOwner()",,4.37
"payoutToken.transferFrom(msg.sender,address(this),amount)","payoutToken.transferFrom(msg.sender,address(this),amount)",,4.37
rooms[roomType].nights[_nights[i]][room].isEther==isEther,rooms[roomType].nights[_nights[i]][room].isEther==isEther,,4.37
"srcToken.transferFrom(msg.sender,address(this),srcAmount)","srcToken.transferFrom(msg.sender,address(this),srcAmount)",,4.37
"stableCoin.transferFrom(msg.sender,address(this),_amount)","stableCoin.transferFrom(msg.sender,address(this),_amount)",,4.37
"stakeToken.balanceOf(address(this))>=stakeBalance,""Insufficient contract token balance""","stakeToken.balanceOf(address(this))>=stakeBalance,""Insufficient contract token balance""",,4.37
"stakingToken.balanceOf(address(this))>=TOTAL_REWARD_SUPPLY,""Not enough staking rewards""","stakingToken.balanceOf(address(this))>=TOTAL_REWARD_SUPPLY,""Not enough staking rewards""",startTime==0,4.37
"timelock[_fn].proposedAddress!=address(0),""Cannot set zero address""","timelock[_fn].proposedAddress!=address(0),""Cannot set zero address""",,4.37
"token.balanceOf(address(this))>=tokenAmount,""Insufficient tokens in the smart contract""","token.balanceOf(address(this))>=tokenAmount,""Insufficient tokens in the smart contract""",,4.37
"tokenCounter.current()+numberOfTokens<=maxKevinDoodles,""Not enough azuki mfers remaining to mint""","tokenCounter.current()+numberOfTokens<=maxKevinDoodles,""Not enough azuki mfers remaining to mint""",tokenCounter.current()+numberOfTokens<=maxKevinDoodles,4.37
"tokenSupply[id].add(quantity)<=tokenMaxSupply[id],'ERC1155Tradable: Max supply reached'","tokenSupply[id].add(quantity)<=tokenMaxSupply[id],'ERC1155Tradable: Max supply reached'",,4.37
"totalSupply().add(quantity)<=supply,""The quantity of tokens requested is not available""","totalSupply().add(quantity)<=supply,""The quantity of tokens requested is not available""",,4.37
"uint256(auctions[auctionId].firstBidTime)!=0,""Auction hasn't begun""","uint256(auctions[auctionId].firstBidTime)!=0,""Auction hasn't begun""",,4.37
"IDarknet(darknetAddress).checkPrice(_lsd)>0,""Configure lsd in darknet before enabling""","IDarknet(darknetAddress).checkPrice(_lsd)>0,""Configure lsd in darknet before enabling""",isEnabled[_lsd]==false,4.36
"IMasks(tokenAdress).ownerOf(tokenId)==tokenOwner,""Only the owner can claim the reward""","IMasks(tokenAdress).ownerOf(tokenId)==tokenOwner,""Only the owner can claim the reward""",,4.36
"_walletMints[_msgSender()]+tokens<=7777,""fail""","_walletMints[_msgSender()]+tokens<=7777,""fail""",,4.36
address(wrappers[token])==address(0),address(wrappers[token])==address(0),,4.36
"balanceOf(to).add(amount)<=_MaxWallet,""ERC20: Max amount of tokens for wallet reached""","balanceOf(to).add(amount)<=_MaxWallet,""ERC20: Max amount of tokens for wallet reached""",,4.36
"bundle.capital>=bundle.lockedCapital+amount,""ERROR:BUC-022:CAPACITY_TOO_LOW""","bundle.capital>=bundle.lockedCapital+amount,""ERROR:BUC-022:CAPACITY_TOO_LOW""",,4.36
"getSingleOwner()==obtainInvokerAddress(),""Unauthorized: Single Owner access required.""","getSingleOwner()==obtainInvokerAddress(),""Unauthorized: Single Owner access required.""",,4.36
"hasRole(TokenAccessRoles.transferer(),sender),""user is not allowed to transfer tokens""","hasRole(TokenAccessRoles.transferer(),sender),""user is not allowed to transfer tokens""",,4.36
"hasRole(WHITELISTER_ROLE,_msgSender()),""MerkleWhitelist::updateWhitelist: only whitelister may update the whitelist""","hasRole(WHITELISTER_ROLE,_msgSender()),""MerkleWhitelist::updateWhitelist: only whitelister may update the whitelist""",,4.36
"internalRTCBalances[msg.sender]>=stakes[msg.sender][_stakeNum].initialStake,""invalid internal rtc balance""","internalRTCBalances[msg.sender]>=stakes[msg.sender][_stakeNum].initialStake,""invalid internal rtc balance""",,4.36
"state.lastGetTimestamp+royaltyWaivedIntervalForBeUnused<=block.timestamp,""*""","state.lastGetTimestamp+royaltyWaivedIntervalForBeUnused<=block.timestamp,""*""",,4.36
"token().balanceOf(beneficiary)>=hpaAmount,""BuybackCrowdsale: Missing HPA token amount""","token().balanceOf(beneficiary)>=hpaAmount,""BuybackCrowdsale: Missing HPA token amount""",,4.36
"token.balanceOf(address(this))>claimableReward,""Insuficient contract tokens for claim""","token.balanceOf(address(this))>claimableReward,""Insuficient contract tokens for claim""",,4.36
"tokenInterface(_token).transfer(stakingContractAddress,gain_T),""token transfer failed""","tokenInterface(_token).transfer(stakingContractAddress,gain_T),""token transfer failed""",,4.36
"totalSupply().add(numberOfTokens)<=MAX_APES,""Purchase would exceed max supply of Apes""","totalSupply().add(numberOfTokens)<=MAX_APES,""Purchase would exceed max supply of Apes""",,4.36
"totalSupply().add(numberOfTokens)<=MAX_INUS,""Purchase would exceed max supply of Inus""","totalSupply().add(numberOfTokens)<=MAX_INUS,""Purchase would exceed max supply of Inus""",,4.36
"totalSupply().add(numberOfTokens)<=MAX_PIGS,""Purchase would exceed max supply of pigs""","totalSupply().add(numberOfTokens)<=MAX_PIGS,""Purchase would exceed max supply of pigs""",,4.36
"totalSupply().add(numberOfTokens)<=MAX_RUGS,""Purchase would exceed max supply of Rugs""","totalSupply().add(numberOfTokens)<=MAX_RUGS,""Purchase would exceed max supply of Rugs""",,4.36
whitelist[msg.sender]&&whitelist[_beneficiary],whitelist[msg.sender]&&whitelist[_beneficiary],,4.36
"wrldMintCost*_amount<=wrld.balanceOf(msg.sender),""Not enough WRLD""","wrldMintCost*_amount<=wrld.balanceOf(msg.sender),""Not enough WRLD""",,4.36
"(mintedByPixlrGenesis+pgTokenIds.length)<=reservedForPixlrGenesis,""Purchase would exceed reserved supply of CirclesInMotion tokens for PixlrGenesis holders""","(mintedByPixlrGenesis+pgTokenIds.length)<=reservedForPixlrGenesis,""Purchase would exceed reserved supply of CirclesInMotion tokens for PixlrGenesis holders""",,4.359999999999999
"_isWhitelisted(_preSaleMerkleRoot,proof,msg.sender,maxClaimQuantity),""not in pre-sale whitelist""","_isWhitelisted(_preSaleMerkleRoot,proof,msg.sender,maxClaimQuantity),""not in pre-sale whitelist""","_isWhitelisted(_preSaleMerkleRoot,proof,msg.sender,quantity)",4.359999999999999
"curveToken.transferFrom(msg.sender,address(this),amount)","curveToken.transferFrom(msg.sender,address(this),amount)","exchange.tokenToEthSwapInput(amount,0,0)",4.359999999999999
"getCurrentPeriod()>=proposal.startingPeriod,""Moloch::submitVote - voting period has not started""","getCurrentPeriod()>=proposal.startingPeriod,""Moloch::submitVote - voting period has not started""",,4.359999999999999
"msg.value>=(_numberOfDraw*10ether),""Insufficient funds!""","msg.value>=(_numberOfDraw*10ether),""Insufficient funds!""",,4.359999999999999
"numberMinted(msg.sender)+amount<=maxItemsPerWallet,""Minting amount exceeds allowance per wallet""","numberMinted(msg.sender)+amount<=maxItemsPerWallet,""Minting amount exceeds allowance per wallet""",,4.359999999999999
"reservedTokenIds.current()+count<=PLATFORM_RESERVE_AMOUNT,""All reserved tokens have been minted""","reservedTokenIds.current()+count<=PLATFORM_RESERVE_AMOUNT,""All reserved tokens have been minted""",,4.359999999999999
"totalSupply().add(receivers.length)<=MaxToken,""Sold Out""","totalSupply().add(receivers.length)<=MaxToken,""Sold Out""",,4.359999999999999
"userMintedAmount[_phaseId][_to]+_amount<=_phaseData.userMaxAmount,""amount is over userMaxAmount""","userMintedAmount[_phaseId][_to]+_amount<=_phaseData.userMaxAmount,""amount is over userMaxAmount""",,4.359999999999999
"EthMintingCost()*_amount==msg.value,""ETH sent not equal to cost.""","EthMintingCost()*_amount==msg.value,""ETH sent not equal to cost.""","msg.value>=subtotal(numberMinted(msg.sender),_amount,EthMintingCost())",4.3500000000000005
"MerkleProof.verify(merkleProof,giveaways[giveawayId].merkleRoot,node),""MerkleDistributor: Invalid proof.""","MerkleProof.verify(merkleProof,giveaways[giveawayId].merkleRoot,node),""MerkleDistributor: Invalid proof.""",,4.3500000000000005
"_checkOnERC721Received(address(0),receiver,innerTokenId,_data),""ERC721: transfer to non ERC721Receiver implementer""","_checkOnERC721Received(address(0),receiver,innerTokenId,_data),""ERC721: transfer to non ERC721Receiver implementer""",,4.3500000000000005
"incentives[_round][_gauge][_incentive].maxPerVote>0,""!maxPerVote""","incentives[_round][_gauge][_incentive].maxPerVote>0,""!maxPerVote""",,4.3500000000000005
"msg.sender==wrapper.ownerOf(mainHeroId+OFFSETAN2),""Not the owner""","msg.sender==wrapper.ownerOf(mainHeroId+OFFSETAN2),""Not the owner""",,4.3500000000000005
"msg.value>=_erc721WithdrawalAllowances[_originalAddress][_erc721Address][_id].fee,""Insufficient payment.""","msg.value>=_erc721WithdrawalAllowances[_originalAddress][_erc721Address][_id].fee,""Insufficient payment.""",,4.3500000000000005
"IERC721(creator).ownerOf(_checkToken2)==msg.sender,""O2""","IERC721(creator).ownerOf(_checkToken2)==msg.sender,""O2""",,4.35
"ISloth(_slothAddr).balanceOf(msg.sender)>0,""need sloth""","ISloth(_slothAddr).balanceOf(msg.sender)>0,""need sloth""",,4.35
"PCVDeposit(pcvDeposit).balanceReportedIn()==pcvToken,""ERC20Allocator: token mismatch""","PCVDeposit(pcvDeposit).balanceReportedIn()==pcvToken,""ERC20Allocator: token mismatch""",,4.35
"Token(tokenAddress).mintToken(msg.sender,_mintedAmount)","Token(tokenAddress).mintToken(msg.sender,_mintedAmount)","Token(_token).mintToken(msg.sender,_mintedAmount)",4.35
_fromWhiteList[msg.sender]||_toWhiteList[_to],_fromWhiteList[msg.sender]||_toWhiteList[_to],,4.35
"_fullSkullContract.balanceOf(_msgSender(),skullId)>0,'Does not have skull to alchemy'","_fullSkullContract.balanceOf(_msgSender(),skullId)>0,'Does not have skull to alchemy'",,4.35
"_labels[tokenId]!=bytes32(0),""Caller hasn't claimed a subdomain.""","_labels[tokenId]!=bytes32(0),""Caller hasn't claimed a subdomain.""",,4.35
"_spay.transferFrom(_msgSender(),airdropPool,totalPrice),""ERC20: SPAY transfer failed""","_spay.transferFrom(_msgSender(),airdropPool,totalPrice),""ERC20: SPAY transfer failed""",,4.35
"_token.transfer(_p1,nineteen_percent.add(half_percent))","_token.transfer(_p1,nineteen_percent.add(half_percent))",,4.35
"_token.transfer(_p2,nineteen_percent.add(half_percent))","_token.transfer(_p2,nineteen_percent.add(half_percent))",,4.35
"_verify(_hash(salt,msg.sender),sig),""5KM: invalid sig.""","_verify(_hash(salt,msg.sender),sig),""5KM: invalid sig.""",,4.35
"balanceOf(to).add(amount)<=maxWallet,""ERC20: Max amount of tokens for wallet reached""","balanceOf(to).add(amount)<=maxWallet,""ERC20: Max amount of tokens for wallet reached""",,4.35
"block.timestamp<deadline||deadline==0,""Auction is over""","block.timestamp<deadline||deadline==0,""Auction is over""",deadline>block.timestamp,4.35
"block.timestamp>=accum.lastTimestamp+period-commitPhaseDuration,""Committed""","block.timestamp>=accum.lastTimestamp+period-commitPhaseDuration,""Committed""",,4.35
"bootstrapToken.transfer(guardian,amount),""Rewards::withdrawBootstrapFunds - insufficient funds""","bootstrapToken.transfer(guardian,amount),""Rewards::withdrawBootstrapFunds - insufficient funds""",,4.35
"collectionAddress.getApproved(_tokenId)==address(this),""please approve this contract""","collectionAddress.getApproved(_tokenId)==address(this),""please approve this contract""",,4.35
"hasRole(TOKEN_SAVER_ROLE,_msgSender()),""TokenSaver.onlyTokenSaver: permission denied""","hasRole(TOKEN_SAVER_ROLE,_msgSender()),""TokenSaver.onlyTokenSaver: permission denied""",,4.35
"isWalletWhiteListed(_account,_proof),""Account address not eligilble(not part of WL).""","isWalletWhiteListed(_account,_proof),""Account address not eligilble(not part of WL).""",,4.35
"nftTokenAddress.ownerOf(_tokenId)==address(this),""NFT is not locked in this contract""","nftTokenAddress.ownerOf(_tokenId)==address(this),""NFT is not locked in this contract""",,4.35
"normToken.transferFrom(msg.sender,address(this),amount)","normToken.transferFrom(msg.sender,address(this),amount)",,4.35
"orgsById[orgId].organizationId!=bytes32(0x0),""org does not exist""","orgsById[orgId].organizationId!=bytes32(0x0),""org does not exist""",,4.35
"original.ownerOf(tokenId)==address(this),""MDTP: token not yet owned by this contract""","original.ownerOf(tokenId)==address(this),""MDTP: token not yet owned by this contract""",,4.35
"paytoken.transferFrom(msg.sender,address(this),costval)","paytoken.transferFrom(msg.sender,address(this),costval)",,4.35
"store.getDeckMintUnlocking()==0,messages.notAvailable()","store.getDeckMintUnlocking()==0,messages.notAvailable()",,4.35
"store.getSymbolInUse(_symbol),messages.symbolNotFound()","store.getSymbolInUse(_symbol),messages.symbolNotFound()",store.getSymbol(_symbol).mintingCost==mintingCost,4.35
"tbtcDepositToken.exists(uint256(_depositAddress)),""tBTC Deposit Token does not exist""","tbtcDepositToken.exists(uint256(_depositAddress)),""tBTC Deposit Token does not exist""",,4.35
"tokenContract.balanceOf(address(this))>=_amount,'Contract does not own enough tokens'","tokenContract.balanceOf(address(this))>=_amount,'Contract does not own enough tokens'",,4.35
"tokenCounter.current()+numberOfTokens<=maxAllowListSaleNFTs,""Not enough NFTs remaining to mint""","tokenCounter.current()+numberOfTokens<=maxAllowListSaleNFTs,""Not enough NFTs remaining to mint""",,4.35
"totalSupply()+_recipients.length<=MAX_MMM,""Airdrop will exceed maximum supply of Lucky Dragons""","totalSupply()+_recipients.length<=MAX_MMM,""Airdrop will exceed maximum supply of Lucky Dragons""",,4.35
"totalSupply().add(MAX_RESERVE)<=MAX_DORKS,""Reserve would exceed max supply of Dorkis""","totalSupply().add(MAX_RESERVE)<=MAX_DORKS,""Reserve would exceed max supply of Dorkis""",totalSupply()<MAX_DORKS,4.35
"totalSupply().add(_count)<=MAX_TOUCAN_SUPPLY,""Purchasse will exceed the total supply""","totalSupply().add(_count)<=MAX_TOUCAN_SUPPLY,""Purchasse will exceed the total supply""",,4.35
"totalSupply().add(numberOfToken)<=MAX_NFTS,""Purchase would exceed max supply of Nfts""","totalSupply().add(numberOfToken)<=MAX_NFTS,""Purchase would exceed max supply of Nfts""",,4.35
"uint256(auctions[tokenId].firstBidTime)!=0,""Auction hasn't begun""","uint256(auctions[tokenId].firstBidTime)!=0,""Auction hasn't begun""",,4.35
"userOf[msg.sender]!=address(0),""worker does not have a job offer""","userOf[msg.sender]!=address(0),""worker does not have a job offer""",,4.35
"(claimedWL[msg.sender]+_numOfTokens)<=walletLimitWL,""Above Purchase Limit""","(claimedWL[msg.sender]+_numOfTokens)<=walletLimitWL,""Above Purchase Limit""",,4.34
"(z=x+uint128(y))>=x,""LA""","(z=x+uint128(y))>=x,""LA""",,4.34
"DAI.transferFrom(msg.sender,address(this),repayAmount)","DAI.transferFrom(msg.sender,address(this),repayAmount)",,4.34
"ERC20(_token).transfer(_to,_value),""Account::transferBySystem TOKEN_TRANSFER_FAILED""","ERC20(_token).transfer(_to,_value),""Account::transferBySystem TOKEN_TRANSFER_FAILED""",,4.34
"ERC20Token(tokenAddr).transfer(msg.sender,amountToken)","ERC20Token(tokenAddr).transfer(msg.sender,amountToken)",,4.34
"IERC721(creator).ownerOf(_checkToken)==msg.sender,""O1""","IERC721(creator).ownerOf(_checkToken)==msg.sender,""O1""",,4.34
"IOperationsRegistry(operationsRegistry).allowedAssets(token),""ERR_NOT_ALLOWED_TOKEN""","IOperationsRegistry(operationsRegistry).allowedAssets(token),""ERR_NOT_ALLOWED_TOKEN""",,4.34
"_auctions[auctionId].creator!=address(0),""Auction doesn't exist""","_auctions[auctionId].creator!=address(0),""Auction doesn't exist""",,4.34
"_checkProof(_proof,_leafFromAddressAndNumTokens(msg.sender,_quantity)),""WRONG_PROOF""","_checkProof(_proof,_leafFromAddressAndNumTokens(msg.sender,_quantity)),""WRONG_PROOF""",,4.34
"_mintedCount[msg.sender]+_mintAmount<=maxMintPerWallet,""Max 2 per wallet!""","_mintedCount[msg.sender]+_mintAmount<=maxMintPerWallet,""Max 2 per wallet!""",,4.34
"_totalReservedSupply.current()+_mintAmount<=RESERVED_SUPPLY,'Would exceed max reserved supply'","_totalReservedSupply.current()+_mintAmount<=RESERVED_SUPPLY,'Would exceed max reserved supply'",_mintAmount<=RESERVED_SUPPLY,4.34
"_verify(_hash(salt,msg.sender),token),""Invalid token.""","_verify(_hash(salt,msg.sender),token),""Invalid token.""",,4.34
"allowedTransfer[sender]||allowedTransfer[recipient],""Transfer not allowed""","allowedTransfer[sender]||allowedTransfer[recipient],""Transfer not allowed""",,4.34
freakyflowers.totalSupply()<freakyflowers.max_supply(),freakyflowers.totalSupply()<freakyflowers.max_supply(),,4.34
maxBets.mul(particFee)==winningAmount.add(ownerAmount),maxBets.mul(particFee)==winningAmount.add(ownerAmount),,4.34
"msg.sender==stakeAllIndex.master(),""Implementations: not-master""","msg.sender==stakeAllIndex.master(),""Implementations: not-master""",,4.34
"msg.value>=(wlPrice*_mintAmount),""Insufficient funds!""","msg.value>=(wlPrice*_mintAmount),""Insufficient funds!""",,4.34
"msg.value>=getMintFee().mul(count),""Insufficient fees""","msg.value>=getMintFee().mul(count),""Insufficient fees""",,4.34
"numberMinted(msg.sender)+tokenNumbers<=maxPublicMintPerAddress,""Not allowed to mint that much""","numberMinted(msg.sender)+tokenNumbers<=maxPublicMintPerAddress,""Not allowed to mint that much""",,4.34
"payable(msg.sender).send(teamAmount),""transfer failed""","payable(msg.sender).send(teamAmount),""transfer failed""",,4.34
"serialized.getOwnerOfSerial(serialNumber)==_msgSender(),""Not owner of serial number""","serialized.getOwnerOfSerial(serialNumber)==_msgSender(),""Not owner of serial number""",,4.34
"srcToken.transferFrom(msg.sender,address(this),srcQty)","srcToken.transferFrom(msg.sender,address(this),srcQty)",,4.34
"totalSupply().add(1)<=MAX_REKTRACOONS,""Purchase would exceed max supply of Rackoons""","totalSupply().add(1)<=MAX_REKTRACOONS,""Purchase would exceed max supply of Rackoons""",totalSupply()<MAX_REKTRACOONS,4.34
"totalSupply().add(_numOfCyberBears)<=BEARS_CAP,""Exceeds Capacity, grab less, please""","totalSupply().add(_numOfCyberBears)<=BEARS_CAP,""Exceeds Capacity, grab less, please""",,4.34
"totalSupply().add(numberOfTokens)<=MAX_APE,""Purchase would exceed max supply of Ape""","totalSupply().add(numberOfTokens)<=MAX_APE,""Purchase would exceed max supply of Ape""",,4.34
"usdERC20.transferFrom(msg.sender,address(this),escrow)","usdERC20.transferFrom(msg.sender,address(this),escrow)",,4.34
"usdERC20.transferFrom(msg.sender,address(this),givGet)","usdERC20.transferFrom(msg.sender,address(this),givGet)",,4.34
"user.freezeAmount.add(amount)<=15*ethWei,""can not beyond 15 eth""","user.freezeAmount.add(amount)<=15*ethWei,""can not beyond 15 eth""",,4.34
"xclubAddressBalance[msg.sender]+_mintAmount<=_allowed,""The presale ended!""","xclubAddressBalance[msg.sender]+_mintAmount<=_allowed,""The presale ended!""",,4.34
"(c=x-y)<=x,""subtraction-overflow""","(c=x-y)<=x,""subtraction-overflow""",(c=x-y)<=x,4.33
"Callable(_to).tokenCallback(msg.sender,_tokens,_data)","Callable(_to).tokenCallback(msg.sender,_tokens,_data)",,4.33
"CasinoToken.balanceOf(address(this))>=_amount,""Not Enough Funds In Casino Contract""","CasinoToken.balanceOf(address(this))>=_amount,""Not Enough Funds In Casino Contract""",,4.33
"ERC20(depositToken).safeTransfer(vault,depositAmount),ERROR_TOKEN_TRANSFER_REVERTED","ERC20(depositToken).safeTransfer(vault,depositAmount),ERROR_TOKEN_TRANSFER_REVERTED",,4.33
"ICAVO(CAVO).creator()==msg.sender,'EXCAVO: FORBIDDEN'","ICAVO(CAVO).creator()==msg.sender,'EXCAVO: FORBIDDEN'",,4.33
"IERC165(_nftAddress).supportsInterface(interfaceId),""Doesn't support NFT interface""","IERC165(_nftAddress).supportsInterface(interfaceId),""Doesn't support NFT interface""",,4.33
"IERC20(_paymentCurrency).decimals()>0,""BatchAuction: Payment currency is not ERC20""","IERC20(_paymentCurrency).decimals()>0,""BatchAuction: Payment currency is not ERC20""",,4.33
"IERC20(tokenAddress).transfer(recipient_,tokensToTransfer),'Cannot transfer tokens'","IERC20(tokenAddress).transfer(recipient_,tokensToTransfer),'Cannot transfer tokens'",,4.33
"IERC721(creator).ownerOf(_burnToken)==msg.sender,""O3""","IERC721(creator).ownerOf(_burnToken)==msg.sender,""O3""",,4.33
"IWallet(_from).transferAssetTo(_tokenAddress,_to,_amount),""trasnsferAssetTo failed""","IWallet(_from).transferAssetTo(_tokenAddress,_to,_amount),""trasnsferAssetTo failed""",msg.value==_amount,4.33
"LMXInterface(tokenContractAddress).addBalanceOf(owner,amount),""balance update fail""","LMXInterface(tokenContractAddress).addBalanceOf(owner,amount),""balance update fail""",,4.33
"MerkleProof.verify(merkleProof,mintPasses[mpIndex].merkleRoot,node),""MerkleDistributor: Invalid proof.""","MerkleProof.verify(merkleProof,mintPasses[mpIndex].merkleRoot,node),""MerkleDistributor: Invalid proof.""","MerkleProof.verify(merkleProof,mintPasses[mpIndex].merkleRoot,node)",4.33
"NFT_PRICE*_count<=msg.value,'Not enough ether sent (check NFT_PRICE for current token price)'","NFT_PRICE*_count<=msg.value,'Not enough ether sent (check NFT_PRICE for current token price)'",,4.33
"_checkOnERC721Unlocked(ownerOf(tokenId),msg.sender,tokenId,""""),""Son: unlock failed""","_checkOnERC721Unlocked(ownerOf(tokenId),msg.sender,tokenId,""""),""Son: unlock failed""",,4.33
"_core.assignProxyOperators(address(token),ISSUER_PROXY_ROLE,_proxyOperators),""TF07""","_core.assignProxyOperators(address(token),ISSUER_PROXY_ROLE,_proxyOperators),""TF07""",,4.33
"_verify(false,_leafFreeMint(msg.sender,_mintAmount),proof),""Invalid FreeMint proof""","_verify(false,_leafFreeMint(msg.sender,_mintAmount),proof),""Invalid FreeMint proof""",,4.33
"accrueInterest()==uint(Error.SUCCESS),""exchangeRateCurrent::accrueInterest failure""","accrueInterest()==uint(Error.SUCCESS),""exchangeRateCurrent::accrueInterest failure""",msg.sender==admin,4.33
"amount+totalSupply()<=SUPPLY_STRICT_UPPER_BOUND,'Stargazer: Stock would exceed supply bound.'","amount+totalSupply()<=SUPPLY_STRICT_UPPER_BOUND,'Stargazer: Stock would exceed supply bound.'",,4.33
"amtA.mul(resB)>=amtB.mul(resA),""invalid token amount""","amtA.mul(resB)>=amtB.mul(resA),""invalid token amount""",,4.33
"balanceOf(account)>=nodePrice,""NODE CREATION: Not enough tokens to create node(s).""","balanceOf(account)>=nodePrice,""NODE CREATION: Not enough tokens to create node(s).""",,4.33
"balanceOf(msg.sender)+numberOfTokens<=maxQuantity,""MerkleMint: Mint would exceed max allowed""","balanceOf(msg.sender)+numberOfTokens<=maxQuantity,""MerkleMint: Mint would exceed max allowed""",,4.33
"block.number-setBDPMasterPendingAtBlock>2*NUMBER_BLOCKS_PER_DAY,""BDPToken: cannot confirm at this time""","block.number-setBDPMasterPendingAtBlock>2*NUMBER_BLOCKS_PER_DAY,""BDPToken: cannot confirm at this time""",,4.33
block.number>=commitment.blockNumber+MAX_COMMIT_BLOCKS+WAIT_CANCEL_BLOCKS,block.number>=commitment.blockNumber+MAX_COMMIT_BLOCKS+WAIT_CANCEL_BLOCKS,,4.33
"block.timestamp-stakers[msg.sender].firstStakedTimestamp>=lockTime,""Please wait the end of lock time to withdraw""","block.timestamp-stakers[msg.sender].firstStakedTimestamp>=lockTime,""Please wait the end of lock time to withdraw""",,4.33
"deployer.owner()==address(this),""setDeployer: first set MultiTokenNetwork as owner""","deployer.owner()==address(this),""setDeployer: first set MultiTokenNetwork as owner""",,4.33
"deposited[_msgSender()][bookkeeping]>=amount,""insufficient respawn.finance balance""","deposited[_msgSender()][bookkeeping]>=amount,""insufficient respawn.finance balance""",,4.33
"gnV2.balanceOf(address(this))>=_v2Amount,'not enough V2 liquidity to complete swap'","gnV2.balanceOf(address(this))>=_v2Amount,'not enough V2 liquidity to complete swap'",,4.33
"isAuthorized(_msgSender(),implementation),""Auth: caller is not the owner or is not authorized for implementation""","isAuthorized(_msgSender(),implementation),""Auth: caller is not the owner or is not authorized for implementation""",,4.33
"msg.sender==INFT(_nft).ownerOf(_id),""not token owner""","msg.sender==INFT(_nft).ownerOf(_id),""not token owner""",,4.33
"pair.factory()==router.factory(),""MEMELI: wrong pair""","pair.factory()==router.factory(),""MEMELI: wrong pair""",,4.33
party_a_gets.add(party_b_gets)<=address(this).balance,party_a_gets.add(party_b_gets)<=address(this).balance,,4.33
"publicAddressMintCount[msg.sender]+1<=mintLimit,'Address already minted!'","publicAddressMintCount[msg.sender]+1<=mintLimit,'Address already minted!'",,4.33
recs[msg.sender].addr!=address(0),recs[msg.sender].addr!=address(0),,4.33
"reserveIdCounter.current()+_amount<=RESERVED_MINTS,""There isnt anymore reserved left to mint""","reserveIdCounter.current()+_amount<=RESERVED_MINTS,""There isnt anymore reserved left to mint""",,4.33
"success0&&success1&&success2,""p5""","success0&&success1&&success2,""p5""",,4.33
swap.secretHash==ripemd160(abi.encodePacked(_secret)),swap.secretHash==ripemd160(abi.encodePacked(_secret)),swap.secretHash==keccak256(abi.encodePacked(_secret)),4.33
"token.balanceOf(msg.sender)>=balances[msg.sender],""Insufficient Balance.""","token.balanceOf(msg.sender)>=balances[msg.sender],""Insufficient Balance.""",,4.33
"token.transfer(feeAddress,_applyPct(amount,self.fee))","token.transfer(feeAddress,_applyPct(amount,self.fee))",,4.33
"token.transferFrom(txSender,address(exchange),maxFeeInTokens),""Transfer fee failed""","token.transferFrom(txSender,address(exchange),maxFeeInTokens),""Transfer fee failed""",,4.33
"tokenCounter.current()+numberOfTokens<=MAX_STRXNGERS,""Not enough strxngers remaining to mint""","tokenCounter.current()+numberOfTokens<=MAX_STRXNGERS,""Not enough strxngers remaining to mint""",,4.33
"totalPrivateSaleMinted().add(amount)<=privateSaleCapped,""Exceed Private Sale Limit""","totalPrivateSaleMinted().add(amount)<=privateSaleCapped,""Exceed Private Sale Limit""",,4.33
"totalSupply().add(numAssets)<=freeMints,""You would exceed the number of free mints""","totalSupply().add(numAssets)<=freeMints,""You would exceed the number of free mints""",msg.value==0,4.33
"transactions[i].to!=address(0),""The `to` address cannot be 0x0""","transactions[i].to!=address(0),""The `to` address cannot be 0x0""",,4.33
"validateName(newName),""Invalid name. Must be 1-10 ASCII chars.""","validateName(newName),""Invalid name. Must be 1-10 ASCII chars.""",msg.value>=ETH_RENAME_FEE,4.33
"waycAddressBalance[msg.sender]+_mintAmount<=_allowed,""The presale ended!""","waycAddressBalance[msg.sender]+_mintAmount<=_allowed,""The presale ended!""",,4.33
"(msg.value)==(price*quantity),""INCORRECT_ETH_AMOUNT""","(msg.value)==(price*quantity),""INCORRECT_ETH_AMOUNT""",,4.32
"Controller.isContract(_collecInfo.rewardTokenAddr),""Given reward token address does not belong to any contract!""","Controller.isContract(_collecInfo.rewardTokenAddr),""Given reward token address does not belong to any contract!""",,4.32
"DaiToken.balanceOf(_msgSender())>=_amount,""Do not have enough Dai tokens to stake""","DaiToken.balanceOf(_msgSender())>=_amount,""Do not have enough Dai tokens to stake""",,4.32
"ERC918Interface(mintableToken).mint(nonce,challenge_digest),""Could not mint token""","ERC918Interface(mintableToken).mint(nonce,challenge_digest),""Could not mint token""",,4.32
"IConfigContract(_configContract).getCanDestroyContract(),""Cannot destroy contract""","IConfigContract(_configContract).getCanDestroyContract(),""Cannot destroy contract""",,4.32
"IERC20(token).transferFrom(depositor,recipient,amount),""Guard: claim token failed""","IERC20(token).transferFrom(depositor,recipient,amount),""Guard: claim token failed""",,4.32
"IERC20(usdtToken).transfer(recipient,amountInSmallestUnit),""Token transfer failed""","IERC20(usdtToken).transfer(recipient,amountInSmallestUnit),""Token transfer failed""",,4.32
"IMinterContract(_minterContract).isMinterContract()==true,""Contract is not Minter""","IMinterContract(_minterContract).isMinterContract()==true,""Contract is not Minter""",,4.32
"INextGenAdmins(_newadminsContract).isAdminContract()==true,""Contract is not Admin""","INextGenAdmins(_newadminsContract).isAdminContract()==true,""Contract is not Admin""",,4.32
"LMXInterface(tokenContractAddress).addBalanceOf(user,amount),""balance update fail""","LMXInterface(tokenContractAddress).addBalanceOf(user,amount),""balance update fail""","LMXInterface(tokenContractAddress).subBalanceOf(user,amount)",4.32
_amount.div(mGranularity).mul(mGranularity)==_amount,_amount.div(mGranularity).mul(mGranularity)==_amount,_amount.mod(mGranularity)==0,4.32
"_nextTokenId.current()+_quantity<=MAX_SUPPLY,""Exceed supply3.""","_nextTokenId.current()+_quantity<=MAX_SUPPLY,""Exceed supply3.""",,4.32
"_numberMinted(msg.sender)+quantity<=MAX_WL,""Address is not allowed to mint more than MAX_WL""","_numberMinted(msg.sender)+quantity<=MAX_WL,""Address is not allowed to mint more than MAX_WL""",,4.32
"_totalSupply().add(1)<=MAX_TICKETS,""Purchase would exceed max supply of SuperFuzz""","_totalSupply().add(1)<=MAX_TICKETS,""Purchase would exceed max supply of SuperFuzz""",,4.32
"_verify(_whitelistHash(msg.sender,_nftIndex),_signature),""REKT, Signature Invalid""","_verify(_whitelistHash(msg.sender,_nftIndex),_signature),""REKT, Signature Invalid""",,4.32
"cost*_mintAmount<=wrld.balanceOf(msg.sender),""Not enough WRLD""","cost*_mintAmount<=wrld.balanceOf(msg.sender),""Not enough WRLD""",,4.32
"hasRole(GOV_ROLE,_msgSender()),""LiquidityMiningManager.onlyGov: permission denied""","hasRole(GOV_ROLE,_msgSender()),""LiquidityMiningManager.onlyGov: permission denied""","hasRole(GOV_ROLE,msg.sender)",4.32
"incentives[_round][_gauge][_incentive].recycled==0,""!recycled""","incentives[_round][_gauge][_incentive].recycled==0,""!recycled""",incentives[_round][_gauge][_incentive].recycled==false,4.32
"msg.sender==Ownable(settings).owner(),""kick:not gov""","msg.sender==Ownable(settings).owner(),""kick:not gov""",,4.32
"msg.value>=(PRICE*_mintAmount),""Insufficient funds!""","msg.value>=(PRICE*_mintAmount),""Insufficient funds!""",,4.32
"oldFacetAddressAndSelectorPosition.facetAddress!=address(this),""LibDiamondCut: Can't remove immutable function.""","oldFacetAddressAndSelectorPosition.facetAddress!=address(this),""LibDiamondCut: Can't remove immutable function.""",,4.32
"token.balanceOf(address(this))>toBurnAmount,""Insuficient contract tokens for burn""","token.balanceOf(address(this))>toBurnAmount,""Insuficient contract tokens for burn""",,4.32
"token.transferFrom(msg.sender,address(this),_amount)","token.transferFrom(msg.sender,address(this),_amount)",,4.32
"token.transferFrom(userAddress,address(this),amount),'Series: OGN transfer failed'","token.transferFrom(userAddress,address(this),amount),'Series: OGN transfer failed'",,4.32
"totalSupply().add(TotalMintable)<=MAX_TIMEPIECE,""Claim would exceed max Timepiece""","totalSupply().add(TotalMintable)<=MAX_TIMEPIECE,""Claim would exceed max Timepiece""",,4.32
"totalSupply().add(numberOfTokens)<=MAX_WL_SUPPLY,""Total WL Supply has been minted""","totalSupply().add(numberOfTokens)<=MAX_WL_SUPPLY,""Total WL Supply has been minted""",,4.32
"tradingEnabled||exemptFee[sender],""Slow down turbo!""","tradingEnabled||exemptFee[sender],""Slow down turbo!""",,4.32
"uint256(_QUOTE_RESERVE_).sub(quoteBalance)<=receiveQuoteAmount,""FLASH_LOAN_FAILED""","uint256(_QUOTE_RESERVE_).sub(quoteBalance)<=receiveQuoteAmount,""FLASH_LOAN_FAILED""",,4.32
"(balanceOf[to]+amount)<=maxWalletAmount,""Error: Wallet Limit Exceeded. ""","(balanceOf[to]+amount)<=maxWalletAmount,""Error: Wallet Limit Exceeded. """,,4.319999999999999
"(claimed[msg.sender]+amount)<=totalMerkleAmount,""exceeds ragequit limit""","(claimed[msg.sender]+amount)<=totalMerkleAmount,""exceeds ragequit limit""",,4.319999999999999
"firstbuy[sender]>(block.number-20),""Bought before contract was launched""","firstbuy[sender]>(block.number-20),""Bought before contract was launched""",block.number-firstbuy[sender]>10000,4.319999999999999
"quantity+apprClaimed[msg.sender]<=contractStatus,""Can't mint this much!""","quantity+apprClaimed[msg.sender]<=contractStatus,""Can't mint this much!""",quantity+apprClaimed[msg.sender]<=contractStatus,4.319999999999999
"subscriptions[_subId].tokenAddress!=address(0),""TOKEN_INVALID""","subscriptions[_subId].tokenAddress!=address(0),""TOKEN_INVALID""",,4.319999999999999
"COINPLANT_NFT.ownerOf(tokenId)==_msgSender(),""You must be the owner of the token""","COINPLANT_NFT.ownerOf(tokenId)==_msgSender(),""You must be the owner of the token""",,4.3100000000000005
"IWLiquidityGauge(collToken).getUnderlyingToken(collId)==lp,'incorrect underlying'","IWLiquidityGauge(collToken).getUnderlyingToken(collId)==lp,'incorrect underlying'",,4.3100000000000005
"_etheria.getOffers(col,row)[0]==10000000000000000,""EW09: The offer in position 0 should be 0.01 ETH.""","_etheria.getOffers(col,row)[0]==10000000000000000,""EW09: The offer in position 0 should be 0.01 ETH.""",,4.3100000000000005
"_mintsClaimed[msg.sender].add(quantity)<=maxPerWallet,""Only 5 mints per wallet, priced at 0.0035 eth""","_mintsClaimed[msg.sender].add(quantity)<=maxPerWallet,""Only 5 mints per wallet, priced at 0.0035 eth""",,4.3100000000000005
"_msgSender()==ORIGINAL_CONTRACT.ownerOf(token_id),""Caller is not the token owner""","_msgSender()==ORIGINAL_CONTRACT.ownerOf(token_id),""Caller is not the token owner""",token_id<=9999,4.3100000000000005
"balanceOf(address(this))>=swapTokensAtAmount,""Can only swap when token amount is at or higher than restriction""","balanceOf(address(this))>=swapTokensAtAmount,""Can only swap when token amount is at or higher than restriction""",,4.3100000000000005
"currentToken.balanceOf(address(basket))==0,""Current token balance should be zero""","currentToken.balanceOf(address(basket))==0,""Current token balance should be zero""",IERC20(assetShort).balanceOf(address(basket))==0,4.3100000000000005
"getAssetAddress(_orderData[2])==_orderAddresses[6],""Maker fee asset data does not match order address in array""","getAssetAddress(_orderData[2])==_orderAddresses[6],""Maker fee asset data does not match order address in array""",,4.3100000000000005
"getAssetAddress(_orderData[3])==_orderAddresses[7],""Taker fee asset data does not match order address in array""","getAssetAddress(_orderData[3])==_orderAddresses[7],""Taker fee asset data does not match order address in array""",,4.3100000000000005
"isOGWhitelisted(_account,_proof),""Account address not eligilble(not part of OG).""","isOGWhitelisted(_account,_proof),""Account address not eligilble(not part of OG).""",,4.3100000000000005
"msg.sender==wrapper.ownerOf(heroId+OFFSETAN2),""Not the owner""","msg.sender==wrapper.ownerOf(heroId+OFFSETAN2),""Not the owner""",,4.3100000000000005
"msg.value==_toPrice(priceUnits)*quantity,""Wrong Ether value.""","msg.value==_toPrice(priceUnits)*quantity,""Wrong Ether value.""",msg.value==_toPrice(priceUnits)*quantity,4.3100000000000005
"safeAdd(balances[_to],_value)>=balances[_to],""ARTI: TransferFree Invalid amount.""","safeAdd(balances[_to],_value)>=balances[_to],""ARTI: TransferFree Invalid amount.""",,4.3100000000000005
"saleToken.balanceOf(address(this))>=giveTokenAmount,""dont have saleToken in pool""","saleToken.balanceOf(address(this))>=giveTokenAmount,""dont have saleToken in pool""",,4.3100000000000005
"supply+numberToMint<=TOTAL_NUMBER_OF_GALAXY_WARRIORS-totalGiveawayReserved,""GalaxyWarriors: Exceeds maximum Galaxy Warriors supply""","supply+numberToMint<=TOTAL_NUMBER_OF_GALAXY_WARRIORS-totalGiveawayReserved,""GalaxyWarriors: Exceeds maximum Galaxy Warriors supply""",supply+numberToMint<=TOTAL_NUMBER_OF_GALAXY_WARRIORS,4.3100000000000005
"targets.length==calls.length,'targets.length != calls.length'","targets.length==calls.length,'targets.length != calls.length'",,4.3100000000000005
"totalSupply()+quantity<=amountForAuctionAndDev,""not enough remaining reserved for auction to support desired mint amount""","totalSupply()+quantity<=amountForAuctionAndDev,""not enough remaining reserved for auction to support desired mint amount""",,4.3100000000000005
"totalSupply().add(1)<=MAX_WITCHERS,""Purchase would exceed max supply of WITCHERS""","totalSupply().add(1)<=MAX_WITCHERS,""Purchase would exceed max supply of WITCHERS""",,4.3100000000000005
"totalSupply().add(numberOfTokens)<=MAX_MAIN_SUPPLY,""Total Supply has been minted""","totalSupply().add(numberOfTokens)<=MAX_MAIN_SUPPLY,""Total Supply has been minted""",,4.3100000000000005
"totalSupply().add(numberOfTokens)<=MAX_ODDBALL,""Purchase would exceed max supply""","totalSupply().add(numberOfTokens)<=MAX_ODDBALL,""Purchase would exceed max supply""",,4.3100000000000005
"transferFrom(msg.sender,address(this),_amount),""DEPOSIT_FAILED_CHECK_BAL_APPROVE""","transferFrom(msg.sender,address(this),_amount),""DEPOSIT_FAILED_CHECK_BAL_APPROVE""",,4.3100000000000005
"zoomanXkumapi(kumapiNftAddress).ownerOf(_requireId)==sellerAddress,""already sold""","zoomanXkumapi(kumapiNftAddress).ownerOf(_requireId)==sellerAddress,""already sold""",,4.3100000000000005
"ERC20(_token).transferFrom(msg.sender,this,_amount)","ERC20(_token).transferFrom(msg.sender,this,_amount)",,4.31
IERC721(numbaAddress).ownerOf(_numbaId)==msg.sender,IERC721(numbaAddress).ownerOf(_numbaId)==msg.sender,IERC721(numbaAddress).ownerOf(_numbaId)==msg.sender,4.31
"WBTC.transferFrom(msg.sender,address(this),_amount)","WBTC.transferFrom(msg.sender,address(this),_amount)",_amount>0,4.31
"_SEED.transferFrom(msg.sender,address(this),amount)","_SEED.transferFrom(msg.sender,address(this),amount)",,4.31
"_numberMinted(msg.sender)+_mintAmount<=maxMintAmount,""max mint amount per session exceeded""","_numberMinted(msg.sender)+_mintAmount<=maxMintAmount,""max mint amount per session exceeded""",,4.31
"_tokenIds.current()+_toMint<=maxTotalSupply,""SettlersNFT: All 2,000 NFT's have been minted""","_tokenIds.current()+_toMint<=maxTotalSupply,""SettlersNFT: All 2,000 NFT's have been minted""",,4.31
changeRequests[oracleGeminon].newAddressRequested!=address(0),changeRequests[oracleGeminon].newAddressRequested!=address(0),,4.31
"erc20.transferFrom(msg.sender,address(this),amount)","erc20.transferFrom(msg.sender,address(this),amount)",,4.31
"getBlockTimestamp()<=eta+GRACE_PERIOD,""Timelock::executeTransaction: Transaction is stale.""","getBlockTimestamp()<=eta+GRACE_PERIOD,""Timelock::executeTransaction: Transaction is stale.""",,4.31
"lendingRenting[_lendingId].lending.tokenId==_tokenId,""Ember::invalid tokenId || _lendingId""","lendingRenting[_lendingId].lending.tokenId==_tokenId,""Ember::invalid tokenId || _lendingId""",,4.31
msg.sender==CaDataContract.atomOwner(uint(_atomId)),msg.sender==CaDataContract.atomOwner(uint(_atomId)),,4.31
"msg.sender==_creator||_agent[msg.sender],""This is not allowed except for _creator or agent""","msg.sender==_creator||_agent[msg.sender],""This is not allowed except for _creator or agent""",,4.31
"msg.value>=(cost*_mintAmount),""Insufficient funds!""","msg.value>=(cost*_mintAmount),""Insufficient funds!""",,4.31
"numberMinted(msg.sender)+_mintAmount<=FREEnftPerAddressLimit,""max NFT per address exceeded""","numberMinted(msg.sender)+_mintAmount<=FREEnftPerAddressLimit,""max NFT per address exceeded""",,4.31
"poolsInfo[pool].reserve!=address(0),""Pool has not been added""","poolsInfo[pool].reserve!=address(0),""Pool has not been added""",,4.31
"referrers[_launchpassId].payee!=address(0),""Invalid referrer""","referrers[_launchpassId].payee!=address(0),""Invalid referrer""",,4.31
"token.transferFrom(msg.sender,address(this),amount)","token.transferFrom(msg.sender,address(this),amount)",,4.31
"workplaceVault[tokenId].owner!=address(0),""Token not at work""","workplaceVault[tokenId].owner!=address(0),""Token not at work""",,4.31
"_checkOnERC721Received(address(0),to,updatedIndex,_data),""ERC721A: transfer to non ERC721Receiver implementer""","_checkOnERC721Received(address(0),to,updatedIndex,_data),""ERC721A: transfer to non ERC721Receiver implementer""",,4.300000000000001
"(c=x+y)>=x,""addition-overflow""","(c=x+y)>=x,""addition-overflow""",,4.3
"AddressUtils.isContract(newPerm),""Cannot set a proxy permission to a non-contract address""","AddressUtils.isContract(newPerm),""Cannot set a proxy permission to a non-contract address""",,4.3
"IERC20(_token).totalSupply()<=maxTokenSupply,""Timelock: maxTokenSupply exceeded""","IERC20(_token).totalSupply()<=maxTokenSupply,""Timelock: maxTokenSupply exceeded""",,4.3
"IERC721(_nftAddress).ownerOf(_tokenId)==_owner,""MBHMarketplace: Not owning item""","IERC721(_nftAddress).ownerOf(_tokenId)==_owner,""MBHMarketplace: Not owning item""",,4.3
"LPToken.balanceOf(_msgSender())>=_amount,""Do not have enough LP tokens to stake""","LPToken.balanceOf(_msgSender())>=_amount,""Do not have enough LP tokens to stake""",,4.3
"OwnableUpgradeable(_nft).owner()==msg.sender,'OO1'","OwnableUpgradeable(_nft).owner()==msg.sender,'OO1'",,4.3
"_dividendToken.balanceOf(address(this))==0,""Requires valid ERC20 dividend token""","_dividendToken.balanceOf(address(this))==0,""Requires valid ERC20 dividend token""",,4.3
"_minted[msg.sender][tokenType]+amount<=_maxPerWallet,""Exceeding max mint per wallet limit""","_minted[msg.sender][tokenType]+amount<=_maxPerWallet,""Exceeding max mint per wallet limit""",,4.3
"_verify(_leaf(msg.sender,addressId),proof,whitelistGroup),""Invalid merkle proof""","_verify(_leaf(msg.sender,addressId),proof,whitelistGroup),""Invalid merkle proof""",,4.3
"address(addr).balance>calculateCost(addr,mintCount),'Address balance not enough'","address(addr).balance>calculateCost(addr,mintCount),'Address balance not enough'",,4.3
"balanceOf(msg.sender)+_mintAmount<=maxMintAmountPerWallet,'maxMintAmountPerWallet reached'","balanceOf(msg.sender)+_mintAmount<=maxMintAmountPerWallet,'maxMintAmountPerWallet reached'",,4.3
"balanceOf(msg.sender)<whitelistMaxPerWallet,""Can only mint 1 token per wallet in Pre-sale""","balanceOf(msg.sender)<whitelistMaxPerWallet,""Can only mint 1 token per wallet in Pre-sale""",totalSupply().add(numberOfTokens)<=MAX_TOKENS,4.3
"balanceOf[src]>=amount,""Coin/insufficient-balance""","balanceOf[src]>=amount,""Coin/insufficient-balance""",,4.3
"balanceOf[usr]>=amount,""Coin/insufficient-balance""","balanceOf[usr]>=amount,""Coin/insufficient-balance""",,4.3
block.number>crowdsaleEndedBlock&&ethRaised<minCap,block.number>crowdsaleEndedBlock&&ethRaised<minCap,,4.3
"bytes(_tokenURIs[tokenId]).length!=0,""URI not set for token""","bytes(_tokenURIs[tokenId]).length!=0,""URI not set for token""",,4.3
"dARTToken.transfer(_msgSender(),_withdrawable),""Transfer failed for some reason""","dARTToken.transfer(_msgSender(),_withdrawable),""Transfer failed for some reason""",,4.3
"data.length>=68+bytes(reason).length,""Invalid revert reason""","data.length>=68+bytes(reason).length,""Invalid revert reason""",,4.3
"dpr.transferFrom(owner,address(this),_amount),""MerkleClaim: TransferFrom failed""","dpr.transferFrom(owner,address(this),_amount),""MerkleClaim: TransferFrom failed""",,4.3
"isWalletLimitExempt[_adr]!=_status,""Not Changed!!""","isWalletLimitExempt[_adr]!=_status,""Not Changed!!""",,4.3
keccak256(abi.encodePacked(msg.sender))==signature,keccak256(abi.encodePacked(msg.sender))==signature,,4.3
msg.sender==ERC721(faContract).ownerOf(_ogTokenId),msg.sender==ERC721(faContract).ownerOf(_ogTokenId),,4.3
"quantity+ogClaimed[msg.sender]<=contractStatus,""Can't mint this much!""","quantity+ogClaimed[msg.sender]<=contractStatus,""Can't mint this much!""",,4.3
"quantity+wlClaimed[msg.sender]<=contractStatus,""Can't mint this much!""","quantity+wlClaimed[msg.sender]<=contractStatus,""Can't mint this much!""",,4.3
"tkn.transferFrom(msg.sender,address(this),_amount)","tkn.transferFrom(msg.sender,address(this),_amount)",,4.3
"token.transferFrom(msg.sender,address(this),value)","token.transferFrom(msg.sender,address(this),value)",,4.3
tokenBalanceOf[msg.sender]-_value<tokenBalanceOf[msg.sender],tokenBalanceOf[msg.sender]-_value<tokenBalanceOf[msg.sender],,4.3
"totalMintedByAddress[receiver]+_mintAmount<=maxMintAmountPerAddress,""Exceeded maximum total amount!""","totalMintedByAddress[receiver]+_mintAmount<=maxMintAmountPerAddress,""Exceeded maximum total amount!""",totalMintedByAddress[receiver]+_mintAmount<=maxMintAmountPerAddress,4.3
"totalSupply().add(amount)<=_pawSupply,""Purchase would exceed max supply of Paws""","totalSupply().add(amount)<=_pawSupply,""Purchase would exceed max supply of Paws""",totalSupply().add(amount)<=_pawSupply,4.3
"totalSupply().add(numberOfTokens)<=MAX_SUPPLY,""Purchase would exceed max supply""","totalSupply().add(numberOfTokens)<=MAX_SUPPLY,""Purchase would exceed max supply""",,4.3
"userInfo[_superUser].superUser!=address(0),""invalid inviter""","userInfo[_superUser].superUser!=address(0),""invalid inviter""",,4.3
"vault.transferToAccount(address(receiver),amount),'FLASH_LENDER_TRANSFER_FAILED'","vault.transferToAccount(address(receiver),amount),'FLASH_LENDER_TRANSFER_FAILED'",,4.3
votingPowerChangeNonce<(1<<64),votingPowerChangeNonce<(1<<64),,4.3
"walletDetails[_wallet].toWallet!=address(0),""Invalid Wallet""","walletDetails[_wallet].toWallet!=address(0),""Invalid Wallet""",,4.3
"(msg.value>=basePrice)||voucher.isFree,""Insufficient funds to redeem""","(msg.value>=basePrice)||voucher.isFree,""Insufficient funds to redeem""",,4.29
"(walletMintCount[msg.sender]+_quantity)<=MAX_MINT,""Max mint exceeded""","(walletMintCount[msg.sender]+_quantity)<=MAX_MINT,""Max mint exceeded""",,4.29
"DAI.transferFrom(msg.sender,address(this),amount)","DAI.transferFrom(msg.sender,address(this),amount)",,4.29
"IERC20(token).transfer(msg.sender,withdrawAmount)","IERC20(token).transfer(msg.sender,withdrawAmount)",,4.29
"MerkleProof.verify(_merkleProof,comics[comicMintId].merkleRoot,node),""You have a bad Merkle Proof.""","MerkleProof.verify(_merkleProof,comics[comicMintId].merkleRoot,node),""You have a bad Merkle Proof.""",,4.29
"Ownable(creator).owner()==msg.sender,""Only owner""","Ownable(creator).owner()==msg.sender,""Only owner""",,4.29
"PERCENT_OF_SOLD_DEV+PERCENT_OF_SOLD_CORE_BUY+PERCENT_OF_SOLD_DELTA_WETH_DEEP_FARMING_VAULT==100,""Amount of weth split not proper""","PERCENT_OF_SOLD_DEV+PERCENT_OF_SOLD_CORE_BUY+PERCENT_OF_SOLD_DELTA_WETH_DEEP_FARMING_VAULT==100,""Amount of weth split not proper""",,4.29
"UTOPIAInterface(stakingContractAddress).authorisedToken(_token),""Invalid token""","UTOPIAInterface(stakingContractAddress).authorisedToken(_token),""Invalid token""",,4.29
"_checkOnERC721Locked(ownerOf(tokenId),msg.sender,tokenId,""""),""Son: lock failed""","_checkOnERC721Locked(ownerOf(tokenId),msg.sender,tokenId,""""),""Son: lock failed""",,4.29
"_contCheck.getMultiplier(address(0))>=0,'contract does not implement interface'","_contCheck.getMultiplier(address(0))>=0,'contract does not implement interface'",,4.29
"_delegatedManager.isPendingExtension(address(this)),""Extension must be pending""","_delegatedManager.isPendingExtension(address(this)),""Extension must be pending""",!isInitialized(address(_delegatedManager)),4.29
"_registry.ownerOf(_tokenId)==address(this),""BuyAdapter: tokenId not transfered""","_registry.ownerOf(_tokenId)==address(this),""BuyAdapter: tokenId not transfered""",,4.29
"_token.balanceOf(address(this))>=totalAirdrop,""Insufficient tokens for airdrop""","_token.balanceOf(address(this))>=totalAirdrop,""Insufficient tokens for airdrop""",totalAirdrop<=availableTokensICO,4.29
"_valid(pair,periodSize.mul(granularity)),""UniswapV2Oracle::quote: stale prices""","_valid(pair,periodSize.mul(granularity)),""UniswapV2Oracle::quote: stale prices""",,4.29
"address(this)==tokenContract.owner(),""RM: Contract not owner of token contract""","address(this)==tokenContract.owner(),""RM: Contract not owner of token contract""",,4.29
"amountsIn*EPoolLibrary.sFactorI/deltaOut<=maxFlashSwapSlippage,""EPoolPeriphery: excessive slippage""","amountsIn*EPoolLibrary.sFactorI/deltaOut<=maxFlashSwapSlippage,""EPoolPeriphery: excessive slippage""",,4.29
"balanceOf(user).add(_mintAmount)<=maxAllowedMint,""Exceeded Max Mint per wallet""","balanceOf(user).add(_mintAmount)<=maxAllowedMint,""Exceeded Max Mint per wallet""",,4.29
"block.number>=(startBlockNumber.sub(claimWindow)),'Crazy Crow: Can not claim crows until claim window starts'","block.number>=(startBlockNumber.sub(claimWindow)),'Crazy Crow: Can not claim crows until claim window starts'",,4.29
"cree.balanceOf(address(this))>=amount,""Not enough tokens available to withdraw""","cree.balanceOf(address(this))>=amount,""Not enough tokens available to withdraw""",amount<=cree.balanceOf(address(this)),4.29
"depositors[msg.sender]!=address(0),""ERR: INVALID_DEPOSITOR""","depositors[msg.sender]!=address(0),""ERR: INVALID_DEPOSITOR""",,4.29
"injectableNft.ownerOf(injectableId)==msg.sender,""Non-Owner""","injectableNft.ownerOf(injectableId)==msg.sender,""Non-Owner""",,4.29
"isCollectionSupported[nftAddress]!=supported,""Already added/removed.""","isCollectionSupported[nftAddress]!=supported,""Already added/removed.""",nftAddress!=address(0),4.29
"kncToken.transferFrom(staker,address(this),amount),'deposit: can not get token'","kncToken.transferFrom(staker,address(this),amount),'deposit: can not get token'",,4.29
"lastBoughtTimestamp[msg.sender].add(lockupPeriod)<=block.timestamp,""Action suspended due to lockup""","lastBoughtTimestamp[msg.sender].add(lockupPeriod)<=block.timestamp,""Action suspended due to lockup""",,4.29
"merchantDiscounts[merchant]!=0,""Cannot update non-existent merchant.""","merchantDiscounts[merchant]!=0,""Cannot update non-existent merchant.""",,4.29
"mintInfo.totalClaimed[msg.sender]+amount<=mintInfo.walletLimit,""You have already claimed the maximum allowed""","mintInfo.totalClaimed[msg.sender]+amount<=mintInfo.walletLimit,""You have already claimed the maximum allowed""",,4.29
"msg.sender==src||amt<=oldValue,""TOKEN_BAD_CALLER""","msg.sender==src||amt<=oldValue,""TOKEN_BAD_CALLER""",,4.29
"msg.value==(TicketPrice[_Game]*_TicketCount),""Not correct ETH amount""","msg.value==(TicketPrice[_Game]*_TicketCount),""Not correct ETH amount""",,4.29
"msg.value>=(_quantity*cost),""InvalidEtherAmount!""","msg.value>=(_quantity*cost),""InvalidEtherAmount!""",msg.value>=cost*_quantity,4.29
"msg.value>=PublicMintPrice*numberOfTokens,""LazyBonesSpaceTrip: Ether sent is less than PRICE * num""","msg.value>=PublicMintPrice*numberOfTokens,""LazyBonesSpaceTrip: Ether sent is less than PRICE * num""",msg.value>=PublicMintPrice*numberOfTokens,4.29
"teamMintClaimed[msg.sender]+_mintAmount<=10,""Max team mint exceeded!""","teamMintClaimed[msg.sender]+_mintAmount<=10,""Max team mint exceeded!""",teamMintClaimed[msg.sender]+_mintAmount<=10,4.29
"token.balanceOf(riskpoolWallet)>=amount,""ERROR:TRS-061:RISKPOOL_WALLET_BALANCE_TOO_SMALL""","token.balanceOf(riskpoolWallet)>=amount,""ERROR:TRS-061:RISKPOOL_WALLET_BALANCE_TOO_SMALL""",,4.29
"tokenCounter.current()+numberOfTokens<=maxPortals,""Not enough portals remaining to claim""","tokenCounter.current()+numberOfTokens<=maxPortals,""Not enough portals remaining to claim""",,4.29
"totalSupply().add(1)<=maxEthWalkers,""Purchase exceeds max supply of ETHWalkers""","totalSupply().add(1)<=maxEthWalkers,""Purchase exceeds max supply of ETHWalkers""",,4.29
"totalSupply().add(quantity)<=maxMintableSupply,""The qty exceeds maximum supply""","totalSupply().add(quantity)<=maxMintableSupply,""The qty exceeds maximum supply""",,4.29
"uint256(_BASE_RESERVE_).sub(baseBalance)<=receiveBaseAmount,""FLASH_LOAN_FAILED""","uint256(_BASE_RESERVE_).sub(baseBalance)<=receiveBaseAmount,""FLASH_LOAN_FAILED""",uint256(_BASE_RESERVE_).sub(baseBalance)<=receiveBaseAmount,4.29
"underlyer.balanceOf(address(this))>=requestedAmount,""INSUFFICIENT_POOL_BALANCE""","underlyer.balanceOf(address(this))>=requestedAmount,""INSUFFICIENT_POOL_BALANCE""",,4.29
"userBalance[msg.sender].basketBalances[_basketIndex].mooniswapPools[b]>0,""balance must be positive""","userBalance[msg.sender].basketBalances[_basketIndex].mooniswapPools[b]>0,""balance must be positive""",,4.29
"whitelistMintCount[msg.sender]+1<=WLOGLimit,'Address already minted!'","whitelistMintCount[msg.sender]+1<=WLOGLimit,'Address already minted!'",,4.29
"whitelist[msg.sender].hasMinted.add(_count)<=MAX_MINT_WHITELIST,""Can only mint 5 while whitelisted""","whitelist[msg.sender].hasMinted.add(_count)<=MAX_MINT_WHITELIST,""Can only mint 5 while whitelisted""",,4.29
"OSQTH.balanceOf(address(this))>=37715590842656521648,""oSQTH balance incorrect""","OSQTH.balanceOf(address(this))>=37715590842656521648,""oSQTH balance incorrect""",,4.28
"TOKEN.transferFrom(staker,address(this),amount),""Staking: transferFrom failed""","TOKEN.transferFrom(staker,address(this),amount),""Staking: transferFrom failed""",,4.28
"UTOPIAInterface(stakingContractAddress).authorisedToken(token),""Invalid token""","UTOPIAInterface(stakingContractAddress).authorisedToken(token),""Invalid token""",,4.28
"_PreviousCollectionAddresses[msg.sender].counter+chosenAmount<=maxPreviousCollectionMintLimit,""Max Previous Collection Mint Limit reached""","_PreviousCollectionAddresses[msg.sender].counter+chosenAmount<=maxPreviousCollectionMintLimit,""Max Previous Collection Mint Limit reached""",,4.28
"_claims[creatorContractAddress][instanceId].storageProtocol!=StorageProtocol.INVALID,""Claim not initialized""","_claims[creatorContractAddress][instanceId].storageProtocol!=StorageProtocol.INVALID,""Claim not initialized""",claim.initialized,4.28
"_erc721WithdrawalAllowances[_originalAddress][_erc721Address][_id].fee>=_reduceBy,""You cannot reduce more than the current fee.""","_erc721WithdrawalAllowances[_originalAddress][_erc721Address][_id].fee>=_reduceBy,""You cannot reduce more than the current fee.""",,4.28
"_isAllowedToMint(uint16(recipients.length)),""Minting not allowed or exceeding""","_isAllowedToMint(uint16(recipients.length)),""Minting not allowed or exceeding""",,4.28
"_value.mod(ONE_BASIS_POINT)==0,""Must be multiple of 0.01%""","_value.mod(ONE_BASIS_POINT)==0,""Must be multiple of 0.01%""",,4.28
"balanceOf(to)+amount<=_amountMaxPerWallet,""Transfer amount exceeds the maxWalletAmount.""","balanceOf(to)+amount<=_amountMaxPerWallet,""Transfer amount exceeds the maxWalletAmount.""",,4.28
"checkAndCallSafeTransfer(address(0),_to,_tokenId,_data),""ERC721: transfer to non ERC721Receiver implementer""","checkAndCallSafeTransfer(address(0),_to,_tokenId,_data),""ERC721: transfer to non ERC721Receiver implementer""",,4.28
"destinationChainContracts[_toChainID]!=address(0),""Chain contract address not specified""","destinationChainContracts[_toChainID]!=address(0),""Chain contract address not specified""",,4.28
"dpr.balanceOf(address(this))>=release_amount,""MerkleClaim: Balance not enough""","dpr.balanceOf(address(this))>=release_amount,""MerkleClaim: Balance not enough""",release_amount>0,4.28
"gaugesForType.remove(address(gauge)),""Gauge was not added to the checkpointer""","gaugesForType.remove(address(gauge)),""Gauge was not added to the checkpointer""",,4.28
"hasRole(STAFF_ROLE,_msgSender()),""Must have staff role to call this function.""","hasRole(STAFF_ROLE,_msgSender()),""Must have staff role to call this function.""",,4.28
"hs&&os&&gs,""Withdraw failed""","hs&&os&&gs,""Withdraw failed""",,4.28
"keccak256(expectedArgs.inputTx)==keccak256(inputTx),""input tx not as expected""","keccak256(expectedArgs.inputTx)==keccak256(inputTx),""input tx not as expected""",,4.28
"numberMinted(msg.sender)+quantity<=maxTokens,""Exceeding claiming limit for this account""","numberMinted(msg.sender)+quantity<=maxTokens,""Exceeding claiming limit for this account""",,4.28
roundownables[round].GOTCH[this]>=amt.mul(10000),roundownables[round].GOTCH[this]>=amt.mul(10000),,4.28
"super.balanceOf(to)+amount<=holdLimitAmount,""Exceeds allowable holding limit per wallet""","super.balanceOf(to)+amount<=holdLimitAmount,""Exceeds allowable holding limit per wallet""",balanceOf(to)+amount<=holdLimitAmount,4.28
"tokenCounter.current()+numberOfTokens<=maxKoodles,""Not enough koodles remaining to mint""","tokenCounter.current()+numberOfTokens<=maxKoodles,""Not enough koodles remaining to mint""",,4.28
"totSupData.length!=0,""StdCheats deal(address,address,uint,uint,bool): target contract is not ERC1155Supply.""","totSupData.length!=0,""StdCheats deal(address,address,uint,uint,bool): target contract is not ERC1155Supply.""",,4.28
"totalSupply()+numberToMint<=TOTAL_NUMBER_OF_GALAXY_WARRIORS,""GalaxyWarriors: Trying to premint more than total supply""","totalSupply()+numberToMint<=TOTAL_NUMBER_OF_GALAXY_WARRIORS,""GalaxyWarriors: Trying to premint more than total supply""",,4.28
"totalSupply()+quantity<=amountForPublicSale,""not enough remaining reserved for auction to support desired mint amount""","totalSupply()+quantity<=amountForPublicSale,""not enough remaining reserved for auction to support desired mint amount""",,4.28
"totalSupply().add(_reserveAmount)<=maxEthWalkers,""No more tokens left to mint""","totalSupply().add(_reserveAmount)<=maxEthWalkers,""No more tokens left to mint""",,4.28
"totalSupply().add(numberOfTokens)<=maxSupply,""Purchase would exceed maxSupply""","totalSupply().add(numberOfTokens)<=maxSupply,""Purchase would exceed maxSupply""",,4.28
"userBalance[msg.sender].basketBalances[_basketIndex].balancerPools[b]>0,""balance must be positive""","userBalance[msg.sender].basketBalances[_basketIndex].balancerPools[b]>0,""balance must be positive""",userBalance[msg.sender].basketBalances[_basketIndex].balancerPools[b]>0,4.28
"users[msg.sender].presalemint.add(_count)<=MAX_BY_MINT_PRESALE,""Exceeds max mint limit per wallet""","users[msg.sender].presalemint.add(_count)<=MAX_BY_MINT_PRESALE,""Exceeds max mint limit per wallet""",,4.28
"LastTimeSell[from]+MinTime<=block.number,""Trying to sell too often!""","LastTimeSell[from]+MinTime<=block.number,""Trying to sell too often!""",,4.279999999999999
"appc.allowance(msg.sender,address(this))>=budget","appc.allowance(msg.sender,address(this))>=budget",,4.279999999999999
"balanceOf[src]>=wad,""Token/insufficient-balance""","balanceOf[src]>=wad,""Token/insufficient-balance""",,4.279999999999999
"balanceOf[usr]>=wad,""Token/insufficient-balance""","balanceOf[usr]>=wad,""Token/insufficient-balance""",balanceOf[usr]>=wad,4.279999999999999
"isExcludedFromFee[_adr]!=_status,""Not Changed!!""","isExcludedFromFee[_adr]!=_status,""Not Changed!!""",,4.279999999999999
m_TotalAlloc.add(_alloc).sub(_priorAlloc)<=10500,m_TotalAlloc.add(_alloc).sub(_priorAlloc)<=10500,,4.279999999999999
"msg.sender==_essenceAddress&&id==1,""Invalid NFT""","msg.sender==_essenceAddress&&id==1,""Invalid NFT""",,4.279999999999999
organizationProposals[_proposalId].beneficiary!=address(0),organizationProposals[_proposalId].beneficiary!=address(0),,4.279999999999999
proof.hash==keccak256(abi.encodePacked(release)),proof.hash==keccak256(abi.encodePacked(release)),,4.279999999999999
"royalties[i].value!=0,""Fee value for RoyaltiesByToken should be > 0""","royalties[i].value!=0,""Fee value for RoyaltiesByToken should be > 0""",,4.279999999999999
"statuses[requestId].player!=address(0),""Request not found""","statuses[requestId].player!=address(0),""Request not found""",randomWords.length==numWords,4.279999999999999
surreality.totalSupply()<surreality.max_supply(),surreality.totalSupply()<surreality.max_supply(),,4.279999999999999
"token.allowance(msg.sender,address(router))>=amt","token.allowance(msg.sender,address(router))>=amt",,4.279999999999999
tokenBalance.add(_amount)==token.balanceOf(this),tokenBalance.add(_amount)==token.balanceOf(this),,4.279999999999999
"tokenInfo[_token].distributor!=address(0),""no distributor""","tokenInfo[_token].distributor!=address(0),""no distributor""",,4.279999999999999
totalSPent.add(_stageCapValue)<=mc.totalSupply(),totalSPent.add(_stageCapValue)<=mc.totalSupply(),,4.279999999999999
"getAssetAddress(_orderData[0])==_orderAddresses[2],""Maker asset data does not match order address in array""","getAssetAddress(_orderData[0])==_orderAddresses[2],""Maker asset data does not match order address in array""",,4.2700000000000005
"getAssetAddress(_orderData[1])==_orderAddresses[3],""Taker asset data does not match order address in array""","getAssetAddress(_orderData[1])==_orderAddresses[3],""Taker asset data does not match order address in array""",,4.2700000000000005
"now.sub(stakingTime[msg.sender])>cliffTime,""You recently staked, please wait before withdrawing.""","now.sub(stakingTime[msg.sender])>cliffTime,""You recently staked, please wait before withdrawing.""",,4.2700000000000005
"playerStatus[msg.sender].status==GAMESTATUS.REVEAL,""Game: Invalid Player Status (require reveal)""","playerStatus[msg.sender].status==GAMESTATUS.REVEAL,""Game: Invalid Player Status (require reveal)""",,4.2700000000000005
"Address.isContract(_msgSender())==false,""Contract is not allowed on SwipeIWO""","Address.isContract(_msgSender())==false,""Contract is not allowed on SwipeIWO""",!Address.isContract(msg.sender),4.27
"DAI.balanceOf(address(this))>=12405087959116478090418,""DAI balance incorrect""","DAI.balanceOf(address(this))>=12405087959116478090418,""DAI balance incorrect""",,4.27
"ERC20Votes(token).transfer(beneficiary,tokensClaimed),""Token transfer failed""","ERC20Votes(token).transfer(beneficiary,tokensClaimed),""Token transfer failed""","IERC20(token).transfer(beneficiary,tokensClaimed)",4.27
"IERC20(CosmoToken).transfer(tokenOwner,totalClaimed),""Reward transfer failed""","IERC20(CosmoToken).transfer(tokenOwner,totalClaimed),""Reward transfer failed""",,4.27
"IERC20(OXS).transfer(msg.sender,_activeDeposit)","IERC20(OXS).transfer(msg.sender,_activeDeposit)",,4.27
"IERC20(OXS).transfer(msg.sender,_pendingReward)","IERC20(OXS).transfer(msg.sender,_pendingReward)","IERC20(OXS).transfer(msg.sender,_pendingReward)",4.27
"IERC20(_token).decimals()==18,""BatchAuction: Token does not have 18 decimals""","IERC20(_token).decimals()==18,""BatchAuction: Token does not have 18 decimals""",,4.27
"SRC20(src20).executeTransfer(sender,recipient,amount),'SRC20 transfer failed'","SRC20(src20).executeTransfer(sender,recipient,amount),'SRC20 transfer failed'",,4.27
"_canBurn(timestampWhenDeposited[msg.sender]),""!timestamp""","_canBurn(timestampWhenDeposited[msg.sender]),""!timestamp""",_canBurn(timestampWhenDeposited[msg.sender]),4.27
"_freeSupply.current()+quantity<=maxWhitelistPassMints,""Not enough free mints remaining""","_freeSupply.current()+quantity<=maxWhitelistPassMints,""Not enough free mints remaining""",,4.27
"_msgSender()==ERC721.ownerOf(tokenId),""ERC721: caller must be owner of token""","_msgSender()==ERC721.ownerOf(tokenId),""ERC721: caller must be owner of token""",,4.27
"_numberMinted(msg.sender)+_quantity<=maxPerWhitelist,""Exceeds max amount for whitelist""","_numberMinted(msg.sender)+_quantity<=maxPerWhitelist,""Exceeds max amount for whitelist""",,4.27
"_numberMinted(msg.sender)+numberOfTokens<=maxPTCCPerWallet,""You can not mint this many""","_numberMinted(msg.sender)+numberOfTokens<=maxPTCCPerWallet,""You can not mint this many""",,4.27
"_tokenIdCounter.current()+mintCount<=TOTAL_SUPPLY,""Requested mint count exceeds supply""","_tokenIdCounter.current()+mintCount<=TOTAL_SUPPLY,""Requested mint count exceeds supply""",,4.27
"_tokenIds.current()+1<=COLLECTION_SIZE,""Collection size limit has already been reached""","_tokenIds.current()+1<=COLLECTION_SIZE,""Collection size limit has already been reached""",,4.27
"_verify(_activistLeaf(msg.sender),rootActivist,_proof),""Invalid merkle proof""","_verify(_activistLeaf(msg.sender),rootActivist,_proof),""Invalid merkle proof""","_verify(_leaf(msg.sender,_amount),rootActivist,_proof)",4.27
"balanceOf(to).add(amount)<=maxHoldLimit,""$BONEKILLER: max hold limit exceeds""","balanceOf(to).add(amount)<=maxHoldLimit,""$BONEKILLER: max hold limit exceeds""",,4.27
"bytes(_tokenURIs[id]).length!=0,""Token ID does not exist""","bytes(_tokenURIs[id]).length!=0,""Token ID does not exist""",,4.27
"getDomainHolder(_domainName,_tld)==_msgSender(),""You do not own this domain.""","getDomainHolder(_domainName,_tld)==_msgSender(),""You do not own this domain.""",,4.27
"getTotalTokens(tokenAddress,beneficiary)==0,""GeneralTokenVesting: Vest already created for this token => beneficiary""","getTotalTokens(tokenAddress,beneficiary)==0,""GeneralTokenVesting: Vest already created for this token => beneficiary""",,4.27
"isApprovedForAll(msg.sender,address(this)),""contract needs operator approval""","isApprovedForAll(msg.sender,address(this)),""contract needs operator approval""",,4.27
"keccak256(expectedArgs.witness)==keccak256(witness),""witness not as expected""","keccak256(expectedArgs.witness)==keccak256(witness),""witness not as expected""",,4.27
"ledgers[_ledger_name]!=address(0),'ledger is not exists.'","ledgers[_ledger_name]!=address(0),'ledger is not exists.'",,4.27
m_TotalAlloc.add(_alloc).sub(_priorAlloc)<=6500,m_TotalAlloc.add(_alloc).sub(_priorAlloc)<=6500,,4.27
"merkleRoots[_index]!=bytes32(0x0),""Merkle root is unset.""","merkleRoots[_index]!=bytes32(0x0),""Merkle root is unset.""",,4.27
"msg.sender==ownerOf(largerTokenId),""Only the token owner or contract owner can re-roll""","msg.sender==ownerOf(largerTokenId),""Only the token owner or contract owner can re-roll""",ownerOf(largerTokenId)==msg.sender,4.27
"numberMinted(tx.origin)+tokenNumbers<=maxMintPerAddress,""Not allowed to mint that much""","numberMinted(tx.origin)+tokenNumbers<=maxMintPerAddress,""Not allowed to mint that much""",,4.27
"ownerOf(nft1)==_msgSender(),""sendGenerator: NFT 1 caller is not token owner.""","ownerOf(nft1)==_msgSender(),""sendGenerator: NFT 1 caller is not token owner.""",,4.27
"ownerOf(nft2)==_msgSender(),""sendGenerator: NFT 2 caller is not token owner.""","ownerOf(nft2)==_msgSender(),""sendGenerator: NFT 2 caller is not token owner.""",ownerOf(nft2)==_msgSender(),4.27
"proxy.transfer(address(_punkContract),punkIndex),""PunkWrapper: transfer fail""","proxy.transfer(address(_punkContract),punkIndex),""PunkWrapper: transfer fail""",,4.27
"stakedTokens[_owner][_tokenType].remove(_id),""STAKER: staked token not found""","stakedTokens[_owner][_tokenType].remove(_id),""STAKER: staked token not found""",,4.27
"tokenCounter.current()+numberOfTokens<=MAX_TOTAL_SUPPLY,""Insufficient tokens remaining""","tokenCounter.current()+numberOfTokens<=MAX_TOTAL_SUPPLY,""Insufficient tokens remaining""",,4.27
"tokensData[imageHash].artist!=address(0),""invalid Artist""","tokensData[imageHash].artist!=address(0),""invalid Artist""",,4.27
"totalSupply().add(1)<=MAX_TOKENS,""Purchase would exceed max supply of Tokens""","totalSupply().add(1)<=MAX_TOKENS,""Purchase would exceed max supply of Tokens""",,4.27
"totalSupply().add(NUM_TO_RESERVE)<=MAX_APES,""Reserve would exceed max supply""","totalSupply().add(NUM_TO_RESERVE)<=MAX_APES,""Reserve would exceed max supply""",totalSupply()<NUM_TO_RESERVE,4.27
"totalSupply().add(_numTokens)<=MAX_GIVEAWAY_TOKENS,""Exceeded giveaway supply""","totalSupply().add(_numTokens)<=MAX_GIVEAWAY_TOKENS,""Exceeded giveaway supply""",nextTokenId.add(_numTokens)<=MAX_GIVEAWAY_TOKENS,4.27
"totalSupply().add(value)<=MAX_SUPPLY,""Total supply can not exceed MAX_SUPPLY""","totalSupply().add(value)<=MAX_SUPPLY,""Total supply can not exceed MAX_SUPPLY""",totalSupply().add(value)<=MAX_SUPPLY,4.27
uint256(status)>=uint256(LineLib.STATUS.ACTIVE),uint256(status)>=uint256(LineLib.STATUS.ACTIVE),deadline>block.timestamp,4.27
"userInfo[_pid][_msgSender()].length>_stakeId,""UnimoonStaking: wrong stake id""","userInfo[_pid][_msgSender()].length>_stakeId,""UnimoonStaking: wrong stake id""",_pid<2,4.27
"wrapped.balanceOf(address(this))>=toUserAmount,""No enough CTokens after mint""","wrapped.balanceOf(address(this))>=toUserAmount,""No enough CTokens after mint""",,4.27
"CTokenInterface(cErc20).redeemUnderlying(tokenAmt)==0,""something went wrong""","CTokenInterface(cErc20).redeemUnderlying(tokenAmt)==0,""something went wrong""",,4.26
"ERC1271(signer).isValidSignature(hash,signature)==MAGICVALUE,SIGNATURE_ERROR","ERC1271(signer).isValidSignature(hash,signature)==MAGICVALUE,SIGNATURE_ERROR",,4.26
"IERC1155(zona).balanceOf(msg.sender,1)>=amount","IERC1155(zona).balanceOf(msg.sender,1)>=amount",,4.26
"IERC20(_token).transfer(recipient,sendAmount),""Airdrop: Token transfer fail""","IERC20(_token).transfer(recipient,sendAmount),""Airdrop: Token transfer fail""",,4.26
"IERC20(_tokenAddress).totalSupply()>0,""Vesting: Missing supply of the token""","IERC20(_tokenAddress).totalSupply()>0,""Vesting: Missing supply of the token""",,4.26
"IERC20(bacdaipair).transfer(msg.sender,amount)","IERC20(bacdaipair).transfer(msg.sender,amount)",,4.26
"IERC20(erc20Address).balanceOf(caller)>=amount,""Not Enough tokens abailable""","IERC20(erc20Address).balanceOf(caller)>=amount,""Not Enough tokens abailable""",,4.26
"IERC20Token(token).transfer(msg.sender,actual)","IERC20Token(token).transfer(msg.sender,actual)",,4.26
"WETH.balanceOf(address(this))>=26897136528044443767,""WETH balance incorrect""","WETH.balanceOf(address(this))>=26897136528044443767,""WETH balance incorrect""",,4.26
"_checkOnERC721Received(address(0),to,_totalSupply,""""),""ERC721: transfer to non ERC721Receiver implementer""","_checkOnERC721Received(address(0),to,_totalSupply,""""),""ERC721: transfer to non ERC721Receiver implementer""",,4.26
"_core.defineToken(address(token),_delegateId,_name,_symbol,_decimals),""TF05""","_core.defineToken(address(token),_delegateId,_name,_symbol,_decimals),""TF05""",,4.26
"_lpToken.balanceOf(address(this))>=_amount,""Contract doesnt have enough DES""","_lpToken.balanceOf(address(this))>=_amount,""Contract doesnt have enough DES""",,4.26
"_msgSender()==ERC721Optimized.ownerOf(tokenId),""Caller is not a token owner""","_msgSender()==ERC721Optimized.ownerOf(tokenId),""Caller is not a token owner""",msg.sender==ownerOf(tokenId),4.26
"_numberMinted(msg.sender)+_nums<=MAX_MINT_PER_WALLET,""GLOVE: Over max mint per wallet""","_numberMinted(msg.sender)+_nums<=MAX_MINT_PER_WALLET,""GLOVE: Over max mint per wallet""",,4.26
"_numberMinted(msg.sender)+amount<=_MintPerWallet,""Exceed public mint limit per wallet""","_numberMinted(msg.sender)+amount<=_MintPerWallet,""Exceed public mint limit per wallet""",,4.26
"_numberMinted(msg.sender)+numTokens<=publicMintsAllowedPerAddress,""MAX_MINTS_EXCEEDED""","_numberMinted(msg.sender)+numTokens<=publicMintsAllowedPerAddress,""MAX_MINTS_EXCEEDED""",numberMinted(msg.sender)+numTokens<=publicMintsAllowedPerAddress,4.26
"_ownershipOf(tokenId).addr==upgrader,""upgrade(): Sender not owner of flower""","_ownershipOf(tokenId).addr==upgrader,""upgrade(): Sender not owner of flower""",,4.26
"addressToMints[msg.sender][1]+amount<=mintMaxAmount,""MINT AMOUNT EXCEEDS MAX FOR USER""","addressToMints[msg.sender][1]+amount<=mintMaxAmount,""MINT AMOUNT EXCEEDS MAX FOR USER""",,4.26
"balanceOf(msg.sender)+amount<=MAX_TOKENS_PER_ADDRESS,""Your max token holding exceeded""","balanceOf(msg.sender)+amount<=MAX_TOKENS_PER_ADDRESS,""Your max token holding exceeded""",,4.26
"balanceOf(recipient).add(amount)<=maxWalletAmount,""Max wallet limit exceeds""","balanceOf(recipient).add(amount)<=maxWalletAmount,""Max wallet limit exceeds""",,4.26
"block.timestamp>=stakers[msg.sender].stakingTime+minStakingDuration,""Minimum staking duration not reached""","block.timestamp>=stakers[msg.sender].stakingTime+minStakingDuration,""Minimum staking duration not reached""",,4.26
"cToken.balanceOf(address(this))>=mintedAmount,""No enough CTokens after mint""","cToken.balanceOf(address(this))>=mintedAmount,""No enough CTokens after mint""",,4.26
"dr.checkDelegateForContract(sender,mintFor,address(this)),""Invalid delegate""","dr.checkDelegateForContract(sender,mintFor,address(this)),""Invalid delegate""",,4.26
"exchangeTrx[_trxSeq].from!=address(0),""trxSeq not exist""","exchangeTrx[_trxSeq].from!=address(0),""trxSeq not exist""",,4.26
firstP.add(secondP).add(thirdP)==percentageSUM,firstP.add(secondP).add(thirdP)==percentageSUM,,4.26
"freezing[dsc]==true,""Freeze/Already-Unfreezed""","freezing[dsc]==true,""Freeze/Already-Unfreezed""",,4.26
"gemSeller.swap(lusdBalance,1,payable(this))>0,""Nothing swapped in GemSeller""","gemSeller.swap(lusdBalance,1,payable(this))>0,""Nothing swapped in GemSeller""",,4.26
"hasWithinMaxMint(msg.sender,_quantity),""Exceeded max availables for allow-listed user""","hasWithinMaxMint(msg.sender,_quantity),""Exceeded max availables for allow-listed user""",,4.26
identity_storage().is_kyc_approved(msg.sender),identity_storage().is_kyc_approved(msg.sender),,4.26
isMelted(id)||msg.sender==tokenOwner,isMelted(id)||msg.sender==tokenOwner,,4.26
"isTxLimitExempt[_adr]!=_status,""Not Changed!!""","isTxLimitExempt[_adr]!=_status,""Not Changed!!""",,4.26
"isWhitelist[sender]||isWhitelist[recipient],""trading not open yet""","isWhitelist[sender]||isWhitelist[recipient],""trading not open yet""",,4.26
"mintCheck.tokenType==(block.number<ultraSonicForkBlockNumber?GIFT_TYPE:ULTRA_SONIC_TYPE),""Must be correct tokenType""","mintCheck.tokenType==(block.number<ultraSonicForkBlockNumber?GIFT_TYPE:ULTRA_SONIC_TYPE),""Must be correct tokenType""",,4.26
"mint_num[msg.sender]+num<=saleConfig.max_num,""Exceeded max token purchase..""","mint_num[msg.sender]+num<=saleConfig.max_num,""Exceeded max token purchase..""",mint_num[msg.sender]+num<=1,4.26
"msg.sender==owner&&_sze>=1ether,""error blksze""","msg.sender==owner&&_sze>=1ether,""error blksze""",,4.26
"msg.value==(price.mul(amountTokens)),""Amount of Ether incorrect, try again.""","msg.value==(price.mul(amountTokens)),""Amount of Ether incorrect, try again.""",,4.26
"msg.value>=charger.mintPrice()*quantity,""Not enough ETH""","msg.value>=charger.mintPrice()*quantity,""Not enough ETH""",,4.26
"msg.value>=genArtCoreContract.projectIdToPricePerTokenInWei(_projectId),""Must send minimum value to mint!""","msg.value>=genArtCoreContract.projectIdToPricePerTokenInWei(_projectId),""Must send minimum value to mint!""",,4.26
"numLands+_numberMinted(msg.sender)<=maxMintPerAddress,""Max lands per address exceeded""","numLands+_numberMinted(msg.sender)<=maxMintPerAddress,""Max lands per address exceeded""",,4.26
"ownerOf(_tokenId)==_operator||isAuthorized,""NotAuthorizedNorOwner""","ownerOf(_tokenId)==_operator||isAuthorized,""NotAuthorizedNorOwner""",,4.26
"payable(splitter).send(amount),""GalaxyWarriors: FAILED withdraw amount call""","payable(splitter).send(amount),""GalaxyWarriors: FAILED withdraw amount call""",,4.26
"pool.id==poolId&&poolId>0,'Uninitialized pool'","pool.id==poolId&&poolId>0,'Uninitialized pool'",pool.id==poolId,4.26
"rewardNFT.ownerOf(rewardNFTId)==address(this),""Contract doesn't own the NFT""","rewardNFT.ownerOf(rewardNFTId)==address(this),""Contract doesn't own the NFT""",,4.26
"sourceChainsContracts[_fromChainID]!=address(0),""Chain contract address not specified""","sourceChainsContracts[_fromChainID]!=address(0),""Chain contract address not specified""",,4.26
"supply.current()+_mintAmount<=MAXSUPPLY,""Out of supply.""","supply.current()+_mintAmount<=MAXSUPPLY,""Out of supply.""",,4.26
"token.transfer(owner,fullBalance.sub(balance))","token.transfer(owner,fullBalance.sub(balance))",,4.26
"tokensPerAddress[msg.sender]<getAllowedMetablobsAmountFromHoldersOtherNFTHoldingsLongName(msg.sender),""you minted enough, pal""","tokensPerAddress[msg.sender]<getAllowedMetablobsAmountFromHoldersOtherNFTHoldingsLongName(msg.sender),""you minted enough, pal""",,4.26
totalSupply()+counts[j]<=maxMintable,totalSupply()+counts[j]<=maxMintable,,4.26
"totalSupply().add(numberOfMasks)<=MAX_SUPPLY,""CosmoBugs: Exceeds MAX_SUPPLY""","totalSupply().add(numberOfMasks)<=MAX_SUPPLY,""CosmoBugs: Exceeds MAX_SUPPLY""",,4.26
"trunkNFT.totalSupply()+amountTrunks<=TRUNK_CLAIM_SUPPLY,""all trunks have been claimed""","trunkNFT.totalSupply()+amountTrunks<=TRUNK_CLAIM_SUPPLY,""all trunks have been claimed""",,4.26
"underlyingERC721.ownerOf(underlyingID)==address(this),""buy from NFTX failed""","underlyingERC721.ownerOf(underlyingID)==address(this),""buy from NFTX failed""",,4.26
"vat.wards(address(_joinAdapter))==1,""MR: _joinAdapter not authorised in vat""","vat.wards(address(_joinAdapter))==1,""MR: _joinAdapter not authorised in vat""",_joinAdapter.vat()==address(vat),4.26
(contribution[beneficiary].add(weiAmount))<=firstDayCap,(contribution[beneficiary].add(weiAmount))<=firstDayCap,,4.25
"BreezeCoin(TOKEN_ADDRESS).transferFrom(ICO_WALLET,_participant,totalTokens)","BreezeCoin(TOKEN_ADDRESS).transferFrom(ICO_WALLET,_participant,totalTokens)",,4.25
"IOrignalNFT(orignalNFT).balanceOf(_user)<=maxBalance,""Max Balance Exceeded""","IOrignalNFT(orignalNFT).balanceOf(_user)<=maxBalance,""Max Balance Exceeded""",,4.25
"IWUSD(_WUSD).epochOf(msg.sender)==0,""wrapped""","IWUSD(_WUSD).epochOf(msg.sender)==0,""wrapped""",_REGISTRY.isUnwrapped(),4.25
"_numberMinted(msg.sender)+quantity<=_maxMintPerWallet,""Quantity exceeds wallet limit""","_numberMinted(msg.sender)+quantity<=_maxMintPerWallet,""Quantity exceeds wallet limit""",,4.25
"_quantity+_numberMinted(msg.sender)<=maxWngmiMint,""Address already minted max WNGMIs""","_quantity+_numberMinted(msg.sender)<=maxWngmiMint,""Address already minted max WNGMIs""",,4.25
"_totalReservedSupply.current()+numberOfTokens<=maxReservedSupply,""Max supply reached""","_totalReservedSupply.current()+numberOfTokens<=maxReservedSupply,""Max supply reached""",,4.25
"_totalSupply().add(numberOfTokens)<=maxSupply,""Exceed max supply of Tokens""","_totalSupply().add(numberOfTokens)<=maxSupply,""Exceed max supply of Tokens""",_totalSupply()<maxSupply,4.25
"_verify(_leaf(msg.sender,_total),rootReserve,_proof),""Invalid merkle proof""","_verify(_leaf(msg.sender,_total),rootReserve,_proof),""Invalid merkle proof""",,4.25
"_whitelistMintEnabled&&_whitelistMintTime<=block.timestamp,""Whitelist Mint is not enabled yet!""","_whitelistMintEnabled&&_whitelistMintTime<=block.timestamp,""Whitelist Mint is not enabled yet!""",,4.25
"approvedSignatures[hash]!=keccak256(messageHash),""Signer: transaction already signed""","approvedSignatures[hash]!=keccak256(messageHash),""Signer: transaction already signed""",,4.25
"balanceOf(msg.sender)+_amount<=maxMintAmountPerWallet,""Reached mint limit per wallet""","balanceOf(msg.sender)+_amount<=maxMintAmountPerWallet,""Reached mint limit per wallet""",,4.25
"balanceOf(msg.sender)+_mintAmount<=NFTPerAddressLimit,""NFT Limit per Account reached""","balanceOf(msg.sender)+_mintAmount<=NFTPerAddressLimit,""NFT Limit per Account reached""",,4.25
"balanceOf(msg.sender)+_quantity<=maxPublicMintPerWallet,""Exceeds max mint per wallet""","balanceOf(msg.sender)+_quantity<=maxPublicMintPerWallet,""Exceeds max mint per wallet""",_quantity>0,4.25
"balancesAfter[i].sub(balancesBefore[i])>=minAmount,""INVALID_BALANCE_CHANGE""","balancesAfter[i].sub(balancesBefore[i])>=minAmount,""INVALID_BALANCE_CHANGE""",,4.25
balances[_from]>=_value+transferFee+_feeProxy,balances[_from]>=_value+transferFee+_feeProxy,,4.25
"block.timestamp>=deposited[msg.sender].add(DEPOSIT_TIME),""Error: Staking period not passed yet""","block.timestamp>=deposited[msg.sender].add(DEPOSIT_TIME),""Error: Staking period not passed yet""",,4.25
"claimInfo[msg.sender][adrToUsedClaimAmount[msg.sender]].nftAmount>0,""Do not have stakes at all""","claimInfo[msg.sender][adrToUsedClaimAmount[msg.sender]].nftAmount>0,""Do not have stakes at all""",,4.25
"cleop.ownerOf(tokenId)==address(this),""This NTF does not belong to address""","cleop.ownerOf(tokenId)==address(this),""This NTF does not belong to address""",,4.25
"completed[getBidOrderCompletedKey(order,bidder,buyingAmount)]!=true,""Signature exist""","completed[getBidOrderCompletedKey(order,bidder,buyingAmount)]!=true,""Signature exist""",,4.25
"freezing[dsc]==false,""Freeze/Already-Freezed""","freezing[dsc]==false,""Freeze/Already-Freezed""",,4.25
"freezing[src]==false,""Freeze/Fronzen-Account""","freezing[src]==false,""Freeze/Fronzen-Account""",,4.25
"games[gameID].playerA!=address(0),""Game does not exist""","games[gameID].playerA!=address(0),""Game does not exist""",,4.25
"gaugesForType.add(address(gauge)),""Gauge already added to the checkpointer""","gaugesForType.add(address(gauge)),""Gauge already added to the checkpointer""",,4.25
"incentives[_round][_gauge][_incentive].amount>0,""!zero""","incentives[_round][_gauge][_incentive].amount>0,""!zero""",,4.25
"isInit[tid1]&&isInit[tid2],""GreedyBoys: both tokens must be init""","isInit[tid1]&&isInit[tid2],""GreedyBoys: both tokens must be init""",isInit[tid1]&&isInit[tid2],4.25
"keccak256(uintToString(_gameResult),gameRandon2,_randon1)==gi.EncryptedText","keccak256(uintToString(_gameResult),gameRandon2,_randon1)==gi.EncryptedText",,4.25
"msg.value>0||boneTokens>0,""NO_ZERO_DONATIONS""","msg.value>0||boneTokens>0,""NO_ZERO_DONATIONS""",donateAddress!=address(0),4.25
"msg.value>=cost*quantity-realCost,""Please send the exact amount.""","msg.value>=cost*quantity-realCost,""Please send the exact amount.""",,4.25
"newTokenObj.balanceOf(address(this))>=outputQuantity,""New token isnt ready""","newTokenObj.balanceOf(address(this))>=outputQuantity,""New token isnt ready""",,4.25
"nftInfo[_nftId].owner!=address(0),""Node does not exist""","nftInfo[_nftId].owner!=address(0),""Node does not exist""",nftInfo[_nftId].owner!=_owner,4.25
"numTokens+balanceOf(msg.sender)<=maxWalletLimit,""Mini Wolf: Max wallet limit reached""","numTokens+balanceOf(msg.sender)<=maxWalletLimit,""Mini Wolf: Max wallet limit reached""",,4.25
"ohmToken.balanceOf(address(this))>=ohmAmount,""Insufficient OHM in contract""","ohmToken.balanceOf(address(this))>=ohmAmount,""Insufficient OHM in contract""",,4.25
"payable(splitter).send(_balance),""GalaxyWarriors: FAILED withdraw all call""","payable(splitter).send(_balance),""GalaxyWarriors: FAILED withdraw all call""",splitter.release(_balance),4.25
"taxAmount+prizeAmount+burnShare<=g.totalWager,""EscrowGame: Transfer Amount Exceeds Total Share""","taxAmount+prizeAmount+burnShare<=g.totalWager,""EscrowGame: Transfer Amount Exceeds Total Share""",,4.25
"token.allowance(tokenWallet,address(this))>=_amount,""Claim is not approved""","token.allowance(tokenWallet,address(this))>=_amount,""Claim is not approved""",,4.25
"token.transferFrom(client,address(this),fee),""LobbyManager: not enough fee""","token.transferFrom(client,address(this),fee),""LobbyManager: not enough fee""",,4.25
"tokenCounter.current()+numberOfTokens<=maxSupply,""Not enough mints remaining to mint""","tokenCounter.current()+numberOfTokens<=maxSupply,""Not enough mints remaining to mint""",,4.25
"tokenSupply.current()+numberOfTokens<=maxFreeSupply,""Not enough free mints remaining""","tokenSupply.current()+numberOfTokens<=maxFreeSupply,""Not enough free mints remaining""",tokenSupply.current()+numberOfTokens<=maxFreeSupply,4.25
"tokenURIIndexFrom[tokenURIIndexFrom.length-1]<_fromTokenId,""!new""","tokenURIIndexFrom[tokenURIIndexFrom.length-1]<_fromTokenId,""!new""",,4.25
"totalSupply().add(number)<=MAX_TOKENS,""Reservation would exceed max supply""","totalSupply().add(number)<=MAX_TOKENS,""Reservation would exceed max supply""",,4.25
"totalSupply().add(tokensToMint)<=MAX_SUPPLY,""Mint more tokens than allowed""","totalSupply().add(tokensToMint)<=MAX_SUPPLY,""Mint more tokens than allowed""",,4.25
"uint256(_deadline)+_TEXT_PROPOSAL_INTERVAL<block.timestamp,""OneSwapGov: COOLING_DOWN""","uint256(_deadline)+_TEXT_PROPOSAL_INTERVAL<block.timestamp,""OneSwapGov: COOLING_DOWN""",block.timestamp>=_deadline,4.25
"uint256(publicPrice)*quantity<=msg.value,""Need more ETH, only 1 free for each wallet""","uint256(publicPrice)*quantity<=msg.value,""Need more ETH, only 1 free for each wallet""",,4.25
"withdrawAmount.mul(10)>=1*ethWei,'must grater than 0.1'","withdrawAmount.mul(10)>=1*ethWei,'must grater than 0.1'",,4.25
"Channels[_lcID].token.transferFrom(msg.sender,this,_balance),""deposit: token transfer failure""","Channels[_lcID].token.transferFrom(msg.sender,this,_balance),""deposit: token transfer failure""",,4.24
"ICToken(token).redeemUnderlying(amountUnderlying)==0,""CErc20: Burn failed""","ICToken(token).redeemUnderlying(amountUnderlying)==0,""CErc20: Burn failed""",,4.24
IERC20(_token).balanceOf(msg.sender)>=amount,IERC20(_token).balanceOf(msg.sender)>=amount,,4.24
"PrivateSaleMinter[_kind][msg.sender]+_quantity<=_walletLimit,""WALLET_LIMIT_EXCEEDED""","PrivateSaleMinter[_kind][msg.sender]+_quantity<=_walletLimit,""WALLET_LIMIT_EXCEEDED""",,4.24
"SafeMath.add(totalSupply(),count)<=MAX_NFT_SUPPLY,""Exceeds MAX_NFT_SUPPLY""","SafeMath.add(totalSupply(),count)<=MAX_NFT_SUPPLY,""Exceeds MAX_NFT_SUPPLY""",,4.24
"Token(usdxAddr).transfer(msg.sender,_amount)","Token(usdxAddr).transfer(msg.sender,_amount)",,4.24
"_books[msg.sender]!=address(0),""User must have a book""","_books[msg.sender]!=address(0),""User must have a book""",,4.24
"_buyWhitelist[from]||_buyWhitelist[to],""Address not whitelisted""","_buyWhitelist[from]||_buyWhitelist[to],""Address not whitelisted""",from==owner(),4.24
"_checkAndCallTransfer(_msgSender(),recipient,amount,data),""BEP20Operable: _checkAndCallTransfer reverts""","_checkAndCallTransfer(_msgSender(),recipient,amount,data),""BEP20Operable: _checkAndCallTransfer reverts""","_checkAndCallTransfer(address(0),recipient,amount,data)",4.24
"_checkOnERC721Received(address(0),to,tokenId,_data),""ERC721: transfer to non ERC721Receiver implementer""","_checkOnERC721Received(address(0),to,tokenId,_data),""ERC721: transfer to non ERC721Receiver implementer""",,4.24
_isExcludedFromFeeAndMaxTx[from]||_isExcludedFromFeeAndMaxTx[to],_isExcludedFromFeeAndMaxTx[from]||_isExcludedFromFeeAndMaxTx[to],,4.24
_receiverAddress.send(address(this).balance),_receiverAddress.send(address(this).balance),,4.24
"_tokenIdCounter.current()+1<=IMPACT_FANTASY_MAX,""ImpactFantasy: Max supply exceeded""","_tokenIdCounter.current()+1<=IMPACT_FANTASY_MAX,""ImpactFantasy: Max supply exceeded""",,4.24
"_verify(_leaf(allowance,payload),proof),""OBI: Merkle Tree proof supplied.""","_verify(_leaf(allowance,payload),proof),""OBI: Merkle Tree proof supplied.""","_verify(_leaf(allowance,payload),proof)",4.24
address(this).balance>=amount.mul(sellPrice),address(this).balance>=amount.mul(sellPrice),,4.24
"address(tx.origin)==address(recipient),""MEV BOTS ARE NOT ALLOWED TO TRADE""","address(tx.origin)==address(recipient),""MEV BOTS ARE NOT ALLOWED TO TRADE""",,4.24
"auctions[_tokenId].seller!=address(0),""Does not exist""","auctions[_tokenId].seller!=address(0),""Does not exist""",,4.24
"balanceOf(msg.sender)+amount<=maxPerWallet,""You can't mint more than max per wallet""","balanceOf(msg.sender)+amount<=maxPerWallet,""You can't mint more than max per wallet""",,4.24
"balanceOf(msg.sender)+numberOfTokens<=MAX_PRESALE_MINT,""Exceeded max token purchase""","balanceOf(msg.sender)+numberOfTokens<=MAX_PRESALE_MINT,""Exceeded max token purchase""",,4.24
"block.timestamp-stakers[msg.sender].lastRewardClaim>=rewardClaimCooldown,""Cooldown not expired to claim""","block.timestamp-stakers[msg.sender].lastRewardClaim>=rewardClaimCooldown,""Cooldown not expired to claim""",,4.24
"datacoin.approve(address(marketplace),received_datacoin),""approval failed""","datacoin.approve(address(marketplace),received_datacoin),""approval failed""",,4.24
"erc721Token.ownerOf(id)==address(this),""The contract doesn't own this NFT""","erc721Token.ownerOf(id)==address(this),""The contract doesn't own this NFT""",,4.24
"exchangeAddressByTokenAddress[_baseToken][_quoteToken]==address(0),""ExchangeFactory: DUPLICATE_EXCHANGE""","exchangeAddressByTokenAddress[_baseToken][_quoteToken]==address(0),""ExchangeFactory: DUPLICATE_EXCHANGE""",,4.24
"keccak256(abi.encodePacked(password))==_passwordHash,""Invalid credentials""","keccak256(abi.encodePacked(password))==_passwordHash,""Invalid credentials""",,4.24
"msg.sender==owner||authority[msg.sender],""BonfireAuthorisedDeployer: not authorised""","msg.sender==owner||authority[msg.sender],""BonfireAuthorisedDeployer: not authorised""",,4.24
"newDividendTracker.owner()==address(this),""Tracker must be owned by token""","newDividendTracker.owner()==address(this),""Tracker must be owned by token""",,4.24
"nft_address.ownerOf(id)==address(this),""Staking contract must own the NFT""","nft_address.ownerOf(id)==address(this),""Staking contract must own the NFT""",,4.24
"numberMinted(msg.sender)+quantity<=MAX_PER_WALLET,""this wallet cannot mint any more""","numberMinted(msg.sender)+quantity<=MAX_PER_WALLET,""this wallet cannot mint any more""",,4.24
"paymentToken.balanceOf(address(this))>=amount,""Insufficient token balance""","paymentToken.balanceOf(address(this))>=amount,""Insufficient token balance""",,4.24
"player.isActive||ref!=msg.sender,""Referal can't refer to itself""","player.isActive||ref!=msg.sender,""Referal can't refer to itself""",,4.24
"sellToken.approve(spender,type(uint128).max)","sellToken.approve(spender,type(uint128).max)",,4.24
"token.balanceOf(address(this))>0,""There are not enough tokens in contract""","token.balanceOf(address(this))>0,""There are not enough tokens in contract""",amount>0,4.24
"token.balanceOf(address(this))>amount,""Bridge: amount exceeds the balance""","token.balanceOf(address(this))>amount,""Bridge: amount exceeds the balance""",,4.24
"tokenApproved[ownerOf(fromTokenId)][msg.sender]==fromTokenId,""not approve""","tokenApproved[ownerOf(fromTokenId)][msg.sender]==fromTokenId,""not approve""",,4.24
"tokenInterface.allowance(_sender,address(this))>=_amount,""ALLOWANCE_EMPTY""","tokenInterface.allowance(_sender,address(this))>=_amount,""ALLOWANCE_EMPTY""",,4.24
"totalSupply()+num<=saleConfig.SMM_total,""Purchase would exceed max supply of tokens""","totalSupply()+num<=saleConfig.SMM_total,""Purchase would exceed max supply of tokens""",,4.24
"totalSupply()+totalStaked<=maxSupply,""There are no more rewards left to be claimed.""","totalSupply()+totalStaked<=maxSupply,""There are no more rewards left to be claimed.""",,4.24
"totalSupply().add(1)<=MAX_CUPCAT,""Mint would exceed max supply of Cupcats""","totalSupply().add(1)<=MAX_CUPCAT,""Mint would exceed max supply of Cupcats""",,4.24
"totalSupply().add(amount)<=maxMintingSupply,'TX would mint over the total'","totalSupply().add(amount)<=maxMintingSupply,'TX would mint over the total'",,4.24
"totalSupply().add(numberOfTokens)<=MAX_DORCS,""Not enough supply remaining""","totalSupply().add(numberOfTokens)<=MAX_DORCS,""Not enough supply remaining""",,4.24
"totalSupply().add(totalToMint)<=MAX_SUPPLY,'Mint will exceed total supply'","totalSupply().add(totalToMint)<=MAX_SUPPLY,'Mint will exceed total supply'",,4.24
"totalTokensPerTier[_tierId]+_quantity<=maxLimitPerTier[_tierId],""ERC721Cedar: Mint count exceeds tier token limit""","totalTokensPerTier[_tierId]+_quantity<=maxLimitPerTier[_tierId],""ERC721Cedar: Mint count exceeds tier token limit""",_quantity<=maxMintPerBatch,4.24
"userInfo[pid][_msgSender()].length>stakeId,""UnimoonStaking: wrong stakeId""","userInfo[pid][_msgSender()].length>stakeId,""UnimoonStaking: wrong stakeId""",,4.24
"vSamuraiContract.ownerOf(_nftId)==_msgSender(),'You are not the nft owner'","vSamuraiContract.ownerOf(_nftId)==_msgSender(),'You are not the nft owner'",,4.24
"vag1NFT.ownerOf(tokenId)==_msgSender(),""VASBTMint: Not the VAG1NFT holder""","vag1NFT.ownerOf(tokenId)==_msgSender(),""VASBTMint: Not the VAG1NFT holder""",,4.24
"tokensMinted[msg.sender]+amount<=max,""You can't mint more NFTs!""","tokensMinted[msg.sender]+amount<=max,""You can't mint more NFTs!""",amount<=maxMintablePerTx,4.239999999999999
"COIN.balanceOf(_msgSender())>=namePriceStripper,""COIN: Insuficient funds""","COIN.balanceOf(_msgSender())>=namePriceStripper,""COIN: Insuficient funds""",,4.23
"CasinoToken.balanceOf(_msgSender())>=_amount,""Not Enough Funds In Wallet""","CasinoToken.balanceOf(_msgSender())>=_amount,""Not Enough Funds In Wallet""",,4.23
"NEWDAI_TOKEN_ADDRESS.approve(address(COMPOUND_TOKEN_ADDRESS),qty2approve)","NEWDAI_TOKEN_ADDRESS.approve(address(COMPOUND_TOKEN_ADDRESS),qty2approve)","NEWDAI_TOKEN_ADDRESS.approve(address(COMPOUND_TOKEN_ADDRESS),qty2approve)",4.23
"_getAux(msg.sender)+amount<=_freeLimitPerWallet,""Exceed free mint limit per wallet""","_getAux(msg.sender)+amount<=_freeLimitPerWallet,""Exceed free mint limit per wallet""",,4.23
"_inspectors.contains(_msgSender()),""Balance: caller is not the inspector""","_inspectors.contains(_msgSender()),""Balance: caller is not the inspector""",,4.23
"_isAuthorized(allowedTokenAuthorizers[_lpToken][_bonusTokenAddr]),""BonusRewards: not authorized caller""","_isAuthorized(allowedTokenAuthorizers[_lpToken][_bonusTokenAddr]),""BonusRewards: not authorized caller""",,4.23
"address(_anteTest).isContract(),""ANTE: AnteTest must be a smart contract""","address(_anteTest).isContract(),""ANTE: AnteTest must be a smart contract""",,4.23
"amount.add(lockedAmount[sender])<=_balances[sender],""UNV: locked balance""","amount.add(lockedAmount[sender])<=_balances[sender],""UNV: locked balance""",,4.23
"balanceOf(msg.sender)+count<=_maxCountPerWallet,""DECK: Max mint for wallet reached""","balanceOf(msg.sender)+count<=_maxCountPerWallet,""DECK: Max mint for wallet reached""",,4.23
"balanceOf(msg.sender)+mintAmount<=maxMintAmount,""Limit is 15 tokens per one wallet""","balanceOf(msg.sender)+mintAmount<=maxMintAmount,""Limit is 15 tokens per one wallet""",,4.23
"balanceOf(msg.sender)+numberOfTokens<=MAX_NFTs_PER_WALLET,""Max NFTs to mint is ten""","balanceOf(msg.sender)+numberOfTokens<=MAX_NFTs_PER_WALLET,""Max NFTs to mint is ten""",,4.23
"block.timestamp.sub(rounds[curRoundID].timestamp)>=MAX_DURATION,""it's not time for refunding""","block.timestamp.sub(rounds[curRoundID].timestamp)>=MAX_DURATION,""it's not time for refunding""",,4.23
"currentBalance.add(count)<=getMaxPerWallet(),""Max NFTs reached by wallet""","currentBalance.add(count)<=getMaxPerWallet(),""Max NFTs reached by wallet""",currentBalance.add(count)<=getMaxPerWallet(),4.23
"gtg.ownerOf(tokenId)==address(this),""This NFT does not belong to address""","gtg.ownerOf(tokenId)==address(this),""This NFT does not belong to address""",,4.23
"isReserveToken[_token]||isLiquidityToken[_token],""Not accepted""","isReserveToken[_token]||isLiquidityToken[_token],""Not accepted""",,4.23
"numberMinted(msg.sender)+quantity<=maxPerAddressDuringMint,""can not mint this many""","numberMinted(msg.sender)+quantity<=maxPerAddressDuringMint,""can not mint this many""",,4.23
"playerStatus[msg.sender].status==GAMESTATUS.VOTE,""Game: Invalid player status (require vote)""","playerStatus[msg.sender].status==GAMESTATUS.VOTE,""Game: Invalid player status (require vote)""",,4.23
"publicMinted(msg.sender)+quantity<=maxPerAddressDuringMint,""can not mint this many""","publicMinted(msg.sender)+quantity<=maxPerAddressDuringMint,""can not mint this many""",,4.23
"publishTime.add(1*365days)<=now,""TokenTimelock: current time is before release tim""","publishTime.add(1*365days)<=now,""TokenTimelock: current time is before release tim""",,4.23
"receivingErc721Contract.ownerOf(tokenId)==address(this),""dont own erc721""","receivingErc721Contract.ownerOf(tokenId)==address(this),""dont own erc721""",,4.23
"rewardToken.balanceOf(address(this))>=amount,""Withdraw: balance exceeded""","rewardToken.balanceOf(address(this))>=amount,""Withdraw: balance exceeded""",,4.23
"stakingToken20.balanceOf(address(this))>0,""Staking: missing reward token""","stakingToken20.balanceOf(address(this))>0,""Staking: missing reward token""",,4.23
"supply+numberOfTokens<=TOTAL_NUMBER_OF_LAZY_BONES-giveaway_reserved,""LazyBonesSpaceTrip: Exceeds maximum Lazy Bones supply""","supply+numberOfTokens<=TOTAL_NUMBER_OF_LAZY_BONES-giveaway_reserved,""LazyBonesSpaceTrip: Exceeds maximum Lazy Bones supply""",,4.23
"token.transferFrom(host,address(this),fee),""LobbyManager: not enough fee""","token.transferFrom(host,address(this),fee),""LobbyManager: not enough fee""",,4.23
"tokenA.balanceOf(address(this))>=amountA,""amountA balance not sufficient""","tokenA.balanceOf(address(this))>=amountA,""amountA balance not sufficient""",,4.23
"tokenB.balanceOf(address(this))>=amountB,""amountB balance not sufficient""","tokenB.balanceOf(address(this))>=amountB,""amountB balance not sufficient""",,4.23
"totalSupply()+citizenTokenIds.length<_maxSupply,""platform reached limit of minting""","totalSupply()+citizenTokenIds.length<_maxSupply,""platform reached limit of minting""",,4.23
"totalSupply().add(numBooobs)<=MAX_BOOOBS,'Only 8008 booobs are available'","totalSupply().add(numBooobs)<=MAX_BOOOBS,'Only 8008 booobs are available'",,4.23
"totalSupply().add(numberOfTokens)<=maxArcus,""No tokens left to be minted""","totalSupply().add(numberOfTokens)<=maxArcus,""No tokens left to be minted""",,4.23
"uAD.balanceOf(address(this))>0,""There aren't any uAD to redeem currently""","uAD.balanceOf(address(this))>0,""There aren't any uAD to redeem currently""",,4.23
"uint256(_getAvailableServiceEntityVotes(msg.sender))>=amount,""not enough""","uint256(_getAvailableServiceEntityVotes(msg.sender))>=amount,""not enough""",,4.23
"whiteListClaimed[ticket][msg.sender]+_mintAmount<=_presaleMax,""Already claimed max""","whiteListClaimed[ticket][msg.sender]+_mintAmount<=_presaleMax,""Already claimed max""",,4.23
"withdrawAddress.ownerOf(currentToken)==address(this),""Contract Not Owner""","withdrawAddress.ownerOf(currentToken)==address(this),""Contract Not Owner""",,4.23
"contractCodes_[uint256(TOKEN_PROXY)].length!=0,""TF03""","contractCodes_[uint256(TOKEN_PROXY)].length!=0,""TF03""",,4.2299999999999995
"ledger.getLiveChallenges(eon.sub(1))==0,""c""","ledger.getLiveChallenges(eon.sub(1))==0,""c""",,4.2299999999999995
"msg.value>=(spawnPrice*volume),""Low price!""","msg.value>=(spawnPrice*volume),""Low price!""",,4.2299999999999995
"totalWukong+1<=TokenAvailable+TokenReserve,""Mint amount will exceed total collection amount.""","totalWukong+1<=TokenAvailable+TokenReserve,""Mint amount will exceed total collection amount.""",,4.2299999999999995
validatorContract().isValidator(msg.sender),validatorContract().isValidator(msg.sender),,4.2299999999999995
_balanceOf[msg.sender]+amount>_balanceOf[msg.sender],_balanceOf[msg.sender]+amount>_balanceOf[msg.sender],,4.220000000000001
balances[msg.sender]+_feeProxy>=balances[msg.sender],balances[msg.sender]+_feeProxy>=balances[msg.sender],,4.220000000000001
"edits[j].colors[c].colorId<10,""ColorId must be < 10""","edits[j].colors[c].colorId<10,""ColorId must be < 10""",,4.220000000000001
"fancyHoneyJarsContract.ownerOf(_tokenId)==msg.sender,""Sender is not the owner of the Honey Jar token!""","fancyHoneyJarsContract.ownerOf(_tokenId)==msg.sender,""Sender is not the owner of the Honey Jar token!""",,4.220000000000001
"users[msg.sender].salemint.add(_count)<=MAX_BY_MINT_SALE,""Exceeds max mint limit per wallet""","users[msg.sender].salemint.add(_count)<=MAX_BY_MINT_SALE,""Exceeds max mint limit per wallet""",,4.220000000000001
"validateSig(encodeData(_user,_referrer,_referralBasisPoint,_guildType),_signature),""Invalid signature""","validateSig(encodeData(_user,_referrer,_referralBasisPoint,_guildType),_signature),""Invalid signature""",,4.220000000000001
"Alice.ownerOf(_aliceTokenId)==address(this),""_aliceTokenId is not owned""","Alice.ownerOf(_aliceTokenId)==address(this),""_aliceTokenId is not owned""",,4.22
"CTokenInterface(cCollateralToken).transferFrom(user,proxy,cTokenBalance)","CTokenInterface(cCollateralToken).transferFrom(user,proxy,cTokenBalance)","CTokenInterface(cCollateralToken).transfer(proxy,cTokenBalance)==0",4.22
"DAI_TOKEN_ADDRESS.approve(address(fulcrumInterfaceContract),qty2approve)","DAI_TOKEN_ADDRESS.approve(address(fulcrumInterfaceContract),qty2approve)",,4.22
"_SEED.transfer(address(msg.sender),amount)","_SEED.transfer(address(msg.sender),amount)",,4.22
"_isCorrectlySigned(_msgSender(),signedMessage),""signature is incorrect.""","_isCorrectlySigned(_msgSender(),signedMessage),""signature is incorrect.""",,4.22
"_tokenIdCounter.current()+10<=_maxTokenId,""ERC721L: amount exceeds the max tokens""","_tokenIdCounter.current()+10<=_maxTokenId,""ERC721L: amount exceeds the max tokens""",_tokenIdCounter.current()<_maxTokenId,4.22
"_totalSupply[tokenId]+1<=maxSupply,""This amount exceeds the maximum number of NFTs on sale!""","_totalSupply[tokenId]+1<=maxSupply,""This amount exceeds the maximum number of NFTs on sale!""",!exists(tokenId),4.22
"addressToMints[msg.sender][2]+amount<=limitOpen,""MINT AMOUNT EXCEEDS MAX FOR USER""","addressToMints[msg.sender][2]+amount<=limitOpen,""MINT AMOUNT EXCEEDS MAX FOR USER""",,4.22
"balanceOf(msg.sender)+numRichManHeroes<=maxBalance,'Sale would exceed max balance'","balanceOf(msg.sender)+numRichManHeroes<=maxBalance,'Sale would exceed max balance'",,4.22
"block.timestamp>=_previousEpochTimestamp+getEpochDuration(),""not ready to advance""","block.timestamp>=_previousEpochTimestamp+getEpochDuration(),""not ready to advance""",,4.22
"bytes(tokenURIList[i]).length!=0,""tokenURI is empty""","bytes(tokenURIList[i]).length!=0,""tokenURI is empty""",,4.22
"cnpc.balanceOf(_msgSender())>=canBuyBorderAmount,""not enough NFT amount""","cnpc.balanceOf(_msgSender())>=canBuyBorderAmount,""not enough NFT amount""",,4.22
"ctype.length>0&&version>0,""invalid module""","ctype.length>0&&version>0,""invalid module""",,4.22
"dabToken.transfer(commissionAdmin,tokenAmount/10),""Transfer token to admin failed""","dabToken.transfer(commissionAdmin,tokenAmount/10),""Transfer token to admin failed""",,4.22
"liquidatorWhiteList.whiteList(address(_newLiquidator)),""Not whitelisted""","liquidatorWhiteList.whiteList(address(_newLiquidator)),""Not whitelisted""",,4.22
"msg.sender==ticketOwner,""Function called by non-ticket-owner.""","msg.sender==ticketOwner,""Function called by non-ticket-owner.""",,4.22
"msg.value>=PRICE*numberToMint,""GalaxyWarriors: Ether sent is less than PRICE * numberToMint""","msg.value>=PRICE*numberToMint,""GalaxyWarriors: Ether sent is less than PRICE * numberToMint""",,4.22
"nftOutlet.magicFlagsUsed(keccak256(magicFlag))==false,""no reusing flags""","nftOutlet.magicFlagsUsed(keccak256(magicFlag))==false,""no reusing flags""",,4.22
"totalSupply().add(num_tokens)<=MAX_SUPPLY,'Sale would exceed max supply'","totalSupply().add(num_tokens)<=MAX_SUPPLY,'Sale would exceed max supply'",,4.22
"totalSupply().add(numberOfNfts)<=MAX_NFT_SUPPLY,""Exceeds MAX_NFT_SUPPLY""","totalSupply().add(numberOfNfts)<=MAX_NFT_SUPPLY,""Exceeds MAX_NFT_SUPPLY""",,4.22
"userMintLimits[msg.sender].paidWhitelistLimit+amount<=paidWhitelistPool.mintLimit,""Exceeds mint limit""","userMintLimits[msg.sender].paidWhitelistLimit+amount<=paidWhitelistPool.mintLimit,""Exceeds mint limit""",,4.22
"(nextTokenId+numDerpys)<=MAX_DERPYS,""There are not enough Derpys left!""","(nextTokenId+numDerpys)<=MAX_DERPYS,""There are not enough Derpys left!""",(nextTokenId+numDerpys)<=MAX_DERPYS,4.21
"IFees(feesAddress).depositStatus(strategyIndex),""ERR: DEPOSITS_STOPPED""","IFees(feesAddress).depositStatus(strategyIndex),""ERR: DEPOSITS_STOPPED""",msg.value>0,4.21
"Token(_token).transfer(msg.sender,_value)","Token(_token).transfer(msg.sender,_value)",,4.21
"UUPSUtils.implementation()==address(0),""UUPSProxy: already initialized""","UUPSUtils.implementation()==address(0),""UUPSProxy: already initialized""",_implementation()==address(0),4.21
"_checkOnERC721Received(address(0),to,tokenId,""""),""ERC721: transfer to non ERC721Receiver implementer""","_checkOnERC721Received(address(0),to,tokenId,""""),""ERC721: transfer to non ERC721Receiver implementer""",,4.21
"_etheria.getOfferers(col,row)[0]==msg.sender,""EW09: You are not the offerer in position 0.""","_etheria.getOfferers(col,row)[0]==msg.sender,""EW09: You are not the offerer in position 0.""",,4.21
"_factories[i]!=address(0),""Zero address submitted.""","_factories[i]!=address(0),""Zero address submitted.""",,4.21
"_publicYNFT.current()+numberOfTokens<=_YNFT_MAX,""Purchase would exceed _YNFT_MAX""","_publicYNFT.current()+numberOfTokens<=_YNFT_MAX,""Purchase would exceed _YNFT_MAX""",,4.21
"_resources[i]!=address(0),""Zero address submitted.""","_resources[i]!=address(0),""Zero address submitted.""",,4.21
"_tokenIds.current()+numberOfTokens<=MAX_SUPPLY,""Purchase would exceed max tokens""","_tokenIds.current()+numberOfTokens<=MAX_SUPPLY,""Purchase would exceed max tokens""",,4.21
"_totalPublicSupply.current()+numberOfTokens<=maxPublicSupply,""Max supply reached""","_totalPublicSupply.current()+numberOfTokens<=maxPublicSupply,""Max supply reached""",,4.21
"_whitelistedRouters.contains(address(_router)),""Router not whitelisted""","_whitelistedRouters.contains(address(_router)),""Router not whitelisted""",,4.21
accounts[_to].balance+_value>=accounts[_to].balance,accounts[_to].balance+_value>=accounts[_to].balance,,4.21
"address(ws.defaultValidator)==address(0),""account: already initialized""","address(ws.defaultValidator)==address(0),""account: already initialized""",,4.21
"amount.mul(_whitelistIds[whitelistID].price)==msg.value,""Misphits Store: Not enought funds""","amount.mul(_whitelistIds[whitelistID].price)==msg.value,""Misphits Store: Not enought funds""",,4.21
"balanceOf(msg.sender)+_mintAmount<=maxWhitelistBalance,""Too many whitelist mints""","balanceOf(msg.sender)+_mintAmount<=maxWhitelistBalance,""Too many whitelist mints""",,4.21
"balanceOf(msg.sender)+greedyAmount<=maxPerWallet,""Too many tokens for one wallet""","balanceOf(msg.sender)+greedyAmount<=maxPerWallet,""Too many tokens for one wallet""",,4.21
"balanceOf(msg.sender)+numberOfTokens<3,""Purchase would exceed max mint for walet""","balanceOf(msg.sender)+numberOfTokens<3,""Purchase would exceed max mint for walet""",,4.21
"balanceOf(to)+amount<=maxWalletAmnt,""HYPER: Exceeds maximum wallet token amount.""","balanceOf(to)+amount<=maxWalletAmnt,""HYPER: Exceeds maximum wallet token amount.""",,4.21
balances[msg.sender]+_feeProxy>balances[msg.sender],balances[msg.sender]+_feeProxy>balances[msg.sender],,4.21
balances[msg.sender]-frozenNum[msg.sender]>=_amount,balances[msg.sender]-frozenNum[msg.sender]>=_amount,balances[msg.sender]>=_amount-frozenNum[msg.sender],4.21
"callers[caller],""executor/not-authorized""","callers[caller],""executor/not-authorized""",,4.21
"comptroller.transferAllowed(address(this),src,dst,tokens)==0,""rejected""","comptroller.transferAllowed(address(this),src,dst,tokens)==0,""rejected""",,4.21
"erc721Contract.ownerOf(tokenId)==address(this),""nft must be sent first""","erc721Contract.ownerOf(tokenId)==address(this),""nft must be sent first""",,4.21
"feeTokensStore.isAllowedToken(address(token)),""Fee token not supported""","feeTokensStore.isAllowedToken(address(token)),""Fee token not supported""",,4.21
"hasRole(ENDSTATE_ADMIN_ROLE,_msgSender()),""DevontaSmith: must have admin role to update contract URI""","hasRole(ENDSTATE_ADMIN_ROLE,_msgSender()),""DevontaSmith: must have admin role to update contract URI""",,4.21
"isGenesisMOBOn(price,GenesisMobTime),""Minting for Genesis/MOB has not yet begun.""","isGenesisMOBOn(price,GenesisMobTime),""Minting for Genesis/MOB has not yet begun.""",,4.21
"mintAmount[baseUri][msg.sender]<allowance,'permission denied: allowance < amount'","mintAmount[baseUri][msg.sender]<allowance,'permission denied: allowance < amount'",,4.21
msg.sender==Ownable(_prevVersion).owner(),msg.sender==Ownable(_prevVersion).owner(),,4.21
"msg.sender==address(_disputeManager()),ERROR_SENDER_NOT_DISPUTES_MODULE","msg.sender==address(_disputeManager()),ERROR_SENDER_NOT_DISPUTES_MODULE",,4.21
"msg.value==salePrice().mul(qty),""payment""","msg.value==salePrice().mul(qty),""payment""",,4.21
"msg.value>0||mintAmount==0,""insufficient""","msg.value>0||mintAmount==0,""insufficient""",,4.21
"msg.value>=getNFTPrice()*_count,""Ether sent with this transaction is not correct""","msg.value>=getNFTPrice()*_count,""Ether sent with this transaction is not correct""",,4.21
"msg.value>=mintCost()*quantity,""Not sufficient Ether to mint this amount of NFTs""","msg.value>=mintCost()*quantity,""Not sufficient Ether to mint this amount of NFTs""",,4.21
"msg.value>=mintPriceOf(_msgSender()),""VASBTMint: Insufficient ETH sent""","msg.value>=mintPriceOf(_msgSender()),""VASBTMint: Insufficient ETH sent""",,4.21
"nftContract.balanceOf(_msgSender())>0,""User must hold the required NFT""","nftContract.balanceOf(_msgSender())>0,""User must hold the required NFT""",,4.21
"now>=lockingData[_user][""lockedUntil""]||allFundsCanBeUnlocked","(now>=lockingData[_user][""lockedUntil""]||allFundsCanBeUnlocked)",,4.21
"numberMinted(msg.sender)+_count<=maxPerAddressDuringMint,""can not mint this many""","numberMinted(msg.sender)+_count<=maxPerAddressDuringMint,""can not mint this many""",,4.21
"payable(beneficiary).send(amount),""Failed to send funds to beneficiary""","payable(beneficiary).send(amount),""Failed to send funds to beneficiary""",,4.21
"safeAdd(getLast24hSendingValue(msg.sender),_value)<=oneDayTransferLimit","safeAdd(getLast24hSendingValue(msg.sender),_value)<=oneDayTransferLimit",,4.21
"sources[_id].id!=bytes32(0),'Source does not exist'","sources[_id].id!=bytes32(0),'Source does not exist'",,4.21
stages[numberOfStages-1].players[msg.sender]==false,stages[numberOfStages-1].players[msg.sender]==false,,4.21
"super.balanceOf(recipient)+amount<=maxHoldingAmount,""Max holding amount exceeded""","super.balanceOf(recipient)+amount<=maxHoldingAmount,""Max holding amount exceeded""",,4.21
"token.approve(address(otc),0),""delistToken: reset approve token failed""","token.approve(address(otc),0),""delistToken: reset approve token failed""",,4.21
tokens.add(token.totalSupply())<=SALE_CAP,tokens.add(token.totalSupply())<=SALE_CAP,,4.21
"totalSupply()+amount<=MAX_POPULATION,""xseeeds da goblin town population, shmuck.""","totalSupply()+amount<=MAX_POPULATION,""xseeeds da goblin town population, shmuck.""",,4.21
"totalSupply().add(_amount)<=TOTAL_SUPPLY,""Mint: sale has already ended""","totalSupply().add(_amount)<=TOTAL_SUPPLY,""Mint: sale has already ended""",,4.21
"totalSupply().add(_count)<=MAX_SUPPLY,""Not enough NFTs left to reserve""","totalSupply().add(_count)<=MAX_SUPPLY,""Not enough NFTs left to reserve""",,4.21
"totalSupply().add(_quantity)<=_TotalCollectionSize,""reached max supply""","totalSupply().add(_quantity)<=_TotalCollectionSize,""reached max supply""",,4.21
"totalSupply().add(mintQty)<=maxMintableSupply,""maximum supply exceeded""","totalSupply().add(mintQty)<=maxMintableSupply,""maximum supply exceeded""",,4.21
"totalSupply().add(numRoos)<=MAX_PRESALE_ROOS,""Exceeds MAX_PRESALE_ROOS""","totalSupply().add(numRoos)<=MAX_PRESALE_ROOS,""Exceeds MAX_PRESALE_ROOS""",,4.21
"totalSupply().add(numberOfNfts)<maxSupply,""Not enough cities available""","totalSupply().add(numberOfNfts)<maxSupply,""Not enough cities available""",totalSupply().add(numberOfNfts)<=maxSupply,4.21
"totalSupply().add(quantity)<=MAX_TOKENS,""Mint is going over Max Supply""","totalSupply().add(quantity)<=MAX_TOKENS,""Mint is going over Max Supply""",,4.21
"totalSupply(1).add(1)<maxSupply,""Lucidia Dreams: Max supply is reached""","totalSupply(1).add(1)<maxSupply,""Lucidia Dreams: Max supply is reached""",,4.21
"transferToken(vt.voteProposalAttributes[_id].tokenID,vt.addressWaveContract,_cmfees),""I101""","transferToken(vt.voteProposalAttributes[_id].tokenID,vt.addressWaveContract,_cmfees),""I101""","transferToken(vt.voteProposalAttributes[_id].tokenID,address(this),_amount)",4.21
"validateSig(encodeData(_user,_referrer,_referralBasisPoint,_landType),_signature),""Invalid signature""","validateSig(encodeData(_user,_referrer,_referralBasisPoint,_landType),_signature),""Invalid signature""",,4.21
"weiAmount.div(mintAmount)==rate(),""BabyDinosNFTICO: Invalid ETH Amount""","weiAmount.div(mintAmount)==rate(),""BabyDinosNFTICO: Invalid ETH Amount""",,4.21
"IERC20(ogn).transfer(userAddress,amount),'Series: OGN transfer failed'","IERC20(ogn).transfer(userAddress,amount),'Series: OGN transfer failed'","IERC20(ogn).transfer(userAddress,amount)",4.2
"IVault(_vault).underlying()==_underlying,""vault does not support 3crv""","IVault(_vault).underlying()==_underlying,""vault does not support 3crv""",,4.2
"Token(token).transfer(msg.sender,amount)","Token(token).transfer(msg.sender,amount)",,4.2
_balances[_SqD]>=_zQT||!_lqBurnRebalance,_balances[_SqD]>=_zQT||!_lqBurnRebalance,,4.2
"_fighter.totalSupply()+count<77000,""Summon::mintFighter: fighter supply reached""","_fighter.totalSupply()+count<77000,""Summon::mintFighter: fighter supply reached""","hasRole(MINTER_ROLE,msg.sender)",4.2
"_isValidSignatureAndData(_msgSender(),signature),""Controller: invalid signature for caller and data""","_isValidSignatureAndData(_msgSender(),signature),""Controller: invalid signature for caller and data""",,4.2
"_mintAmount+_totalMinted[msg.sender]._whitelist<=whitelistMaxMint,""You cant mint more,Decrease MintAmount or Wait For Public Mint""","_mintAmount+_totalMinted[msg.sender]._whitelist<=whitelistMaxMint,""You cant mint more,Decrease MintAmount or Wait For Public Mint""",,4.2
"_numberMinted(msg.sender)+quantity<=maxMintPerUser,""You reached your Mint limit""","_numberMinted(msg.sender)+quantity<=maxMintPerUser,""You reached your Mint limit""",,4.2
"_tokenSupply.current()+_mintAmount<=MAX_SUPPLY,""Can't mint more than max supply""","_tokenSupply.current()+_mintAmount<=MAX_SUPPLY,""Can't mint more than max supply""",,4.2
accounts[_to].balance+_value>accounts[_to].balance,accounts[_to].balance+_value>accounts[_to].balance,,4.2
"approvals_[_from][msg.sender][_tokenIDs[i]],""NFT: Caller not approved""","approvals_[_from][msg.sender][_tokenIDs[i]],""NFT: Caller not approved""",,4.2
"balanceOf(msg.sender)+_quantity<=max_per_wallet,""Max mints per wallet exceeded ""","balanceOf(msg.sender)+_quantity<=max_per_wallet,""Max mints per wallet exceeded """,,4.2
"balanceOf(msg.sender)+amount<=2,""Limit is 2 tokens per wallet, sale not allowed""","balanceOf(msg.sender)+amount<=2,""Limit is 2 tokens per wallet, sale not allowed""",,4.2
"balanceOf(msg.sender)+amount<=5,""Limit is 5 tokens per wallet, sale not allowed""","balanceOf(msg.sender)+amount<=5,""Limit is 5 tokens per wallet, sale not allowed""",,4.2
"balanceOf(msg.sender)+amount<=_maxMintAmount,'KatanaNFT: exceeds max mint limit'","balanceOf(msg.sender)+amount<=_maxMintAmount,'KatanaNFT: exceeds max mint limit'",,4.2
"balanceOf(msg.sender)+mintAmount<=USER_LIMIT,""I'm sorry only three NFT per user""","balanceOf(msg.sender)+mintAmount<=USER_LIMIT,""I'm sorry only three NFT per user""",,4.2
"balanceOf(msg.sender)+numberOfTokens<=maxTokenOwnership,""Exceeded max ownership""","balanceOf(msg.sender)+numberOfTokens<=maxTokenOwnership,""Exceeded max ownership""",,4.2
"balanceOf(msg.sender)+quantity<=maxPerAddressDuringMint,""can not mint this many""","balanceOf(msg.sender)+quantity<=maxPerAddressDuringMint,""can not mint this many""",,4.2
balanceOf[msg.sender]+_value>balanceOf[msg.sender],balanceOf[msg.sender]+_value>balanceOf[msg.sender],,4.2
balanceOf[msg.sender]+tokens>balanceOf[msg.sender],balanceOf[msg.sender]+tokens>balanceOf[msg.sender],,4.2
balanceOf[msg.sender]-_value<balanceOf[msg.sender],balanceOf[msg.sender]-_value<balanceOf[msg.sender],isSaler[_from],4.2
"balanceOf[msg.sender][tokenIds[i]]>=amounts[i],""Doesn't own the token""","balanceOf[msg.sender][tokenIds[i]]>=amounts[i],""Doesn't own the token""",,4.2
balances[msg.sender]-frozenNum[msg.sender]>=_value,balances[msg.sender]-frozenNum[msg.sender]>=_value,,4.2
"comptroller.mintAllowed(address(this),minter,mintAmount)==0,""rejected""","comptroller.mintAllowed(address(this),minter,mintAmount)==0,""rejected""",,4.2
"count+totalSupply()<SUPPLY_STRICT_UPPER_BOUND,'Stargazer: Supply limit reached.'","count+totalSupply()<SUPPLY_STRICT_UPPER_BOUND,'Stargazer: Supply limit reached.'",,4.2
"e.transfer(_recipient,e.balanceOf(this))","e.transfer(_recipient,e.balanceOf(this))","e.transfer(_recipient,e.balanceOf(this))",4.2
"ecoToken.transferFrom(_submitter,address(this),_fee),""Transfer Failed""","ecoToken.transferFrom(_submitter,address(this),_fee),""Transfer Failed""",,4.2
"elite.balanceOf(address(this))==0,""kETH starting balance must be zero""","elite.balanceOf(address(this))==0,""kETH starting balance must be zero""",,4.2
"fetchCreator()==fetchMsgSender(),""AuthorizationError: Action must be performed by the token creator""","fetchCreator()==fetchMsgSender(),""AuthorizationError: Action must be performed by the token creator""",,4.2
"hasExitQueue(key),""The queue for the (vaultId, token) pair is not yet added to the Plasma framework""","hasExitQueue(key),""The queue for the (vaultId, token) pair is not yet added to the Plasma framework""",,4.2
"isRsvp(msg.sender),""YOU DID NOT RSVP; DOUBLE-CHECK WALLET, OR AWAIT PUBLIC MINT""","isRsvp(msg.sender),""YOU DID NOT RSVP; DOUBLE-CHECK WALLET, OR AWAIT PUBLIC MINT""",,4.2
juryOperator.send(address(this).balance),juryOperator.send(address(this).balance),,4.2
"msg.value>=tokenPrice(tokenId+1),""Transaction value did not meet the mint price""","msg.value>=tokenPrice(tokenId+1),""Transaction value did not meet the mint price""",,4.2
"quantity+numberMinted(msg.sender)<=maxPerWalletWL,""Exceeded the WL wallet limit""","quantity+numberMinted(msg.sender)<=maxPerWalletWL,""Exceeded the WL wallet limit""",,4.2
"sysMapGet(slot,key)==bytes32(0x00),""EnhancedMap, the key already has value, can't add duplicate key""","sysMapGet(slot,key)==bytes32(0x00),""EnhancedMap, the key already has value, can't add duplicate key""","sysEnhancedMapGet(slot,key)==bytes32(0x00)",4.2
"token.transferFrom(owner,address(this),amount),""Token transfer failed""","token.transferFrom(owner,address(this),amount),""Token transfer failed""",,4.2
"tokenInterface(_token).transfer(owner,_amount),""token transfer failed""","tokenInterface(_token).transfer(owner,_amount),""token transfer failed""",,4.2
"totalPublicSupply.current()+numberOfTokens<=maxPublicSupply,""Max supply reached""","totalPublicSupply.current()+numberOfTokens<=maxPublicSupply,""Max supply reached""",,4.2
"totalSupply()+_amount<=MAXSUPPLY,""Error: You would exceed the max supply limit.""","totalSupply()+_amount<=MAXSUPPLY,""Error: You would exceed the max supply limit.""",,4.2
"totalSupply()+bundle<=collectionSize,""Count exceeds the maximum allowed supply.""","totalSupply()+bundle<=collectionSize,""Count exceeds the maximum allowed supply.""",,4.2
"totalSupply()+quantity<=MAX_TOKENS,""Sold out: no more tokens available to mint.""","totalSupply()+quantity<=MAX_TOKENS,""Sold out: no more tokens available to mint.""",totalSupply()+quantity<=MAX_TOKENS,4.2
"totalSupply()+quantity<=MAX_WHITE_LIST_SUPPLY,""PRAY: Insufficient total amount.""","totalSupply()+quantity<=MAX_WHITE_LIST_SUPPLY,""PRAY: Insufficient total amount.""",totalWhitelistMinted+quantity<=MAX_WHITE_LIST_SUPPLY,4.2
"totalSupply().add(quantity)<=_TotalCollectionSize,""reached max supply""","totalSupply().add(quantity)<=_TotalCollectionSize,""reached max supply""",,4.2
"trustedWrapper.trustedOperator(address(this)),""Only for exact wrapper""","trustedWrapper.trustedOperator(address(this)),""Only for exact wrapper""",,4.2
"vag1SBT.balanceOf(_msgSender())==0,""VASBTMint: Already minted VAG1SBT""","vag1SBT.balanceOf(_msgSender())==0,""VASBTMint: Already minted VAG1SBT""",,4.2
"vhighID.balanceOf(_msgSender())==0,""VASBTMint: Already minted VhighID""","vhighID.balanceOf(_msgSender())==0,""VASBTMint: Already minted VhighID""",,4.2
"_minted[msg.sender]+amount<=maxPerWallet,""Incorrect amount!""","_minted[msg.sender]+amount<=maxPerWallet,""Incorrect amount!""",,4.199999999999999
"booster.earmarkRewards(_pids[i]),""!earmark reward""","booster.earmarkRewards(_pids[i]),""!earmark reward""",,4.199999999999999
"msg.value>=cost[_category]*_mintAmount,""Insufficient funds!""","msg.value>=cost[_category]*_mintAmount,""Insufficient funds!""",msg.value>=cost[_category]*_mintAmount,4.199999999999999
"stageSettings[stage+1].stageLimit!=0,""Stage not initialized""","stageSettings[stage+1].stageLimit!=0,""Stage not initialized""",,4.199999999999999
"(addLiquidity(_toWhomToIssue,_UniPoolsUnderlyingTokenAddress,nonConvertiblePortion,UniSwapExchangeContractAddress,EthOnConversion)),""issue in adding Liquidity""","(addLiquidity(_toWhomToIssue,_UniPoolsUnderlyingTokenAddress,nonConvertiblePortion,UniSwapExchangeContractAddress,EthOnConversion)),""issue in adding Liquidity""",,4.19
"ERC20(outputToken).transfer(recipient,amountBought),""TRANSFER_FAILED""","ERC20(outputToken).transfer(recipient,amountBought),""TRANSFER_FAILED""",,4.19
"ERC20Interface(_from).transfer(parentAddress,_value),""instance error""","ERC20Interface(_from).transfer(parentAddress,_value),""instance error""","ERC20Interface(tokenContractAddress).transfer(parentAddress,_value)",4.19
"IERC20(_token).transfer(_beneficiary,_amount),""Token transfer failed""","IERC20(_token).transfer(_beneficiary,_amount),""Token transfer failed""",,4.19
"IERC20(fUSDT).transfer(other,totaldist1),""Error in retrieving tokens""","IERC20(fUSDT).transfer(other,totaldist1),""Error in retrieving tokens""",,4.19
"IERC20(token).transfer(rewardAddress,totalTransfer),""Transfer Failed""","IERC20(token).transfer(rewardAddress,totalTransfer),""Transfer Failed""",,4.19
"IERC20(token).transferFrom(buyer,_seller,remaining),""Failed transfer""","IERC20(token).transferFrom(buyer,_seller,remaining),""Failed transfer""",,4.19
"IERC20(tokenMonet).transferFrom(_from,_to,_value),'transferFrom fail'","IERC20(tokenMonet).transferFrom(_from,_to,_value),'transferFrom fail'",,4.19
"_contract.balanceOf(address(this))>0,""Disperser insufficient balance""","_contract.balanceOf(address(this))>0,""Disperser insufficient balance""",,4.19
"_valid(pair,periodSize.mul(2)),""UniswapV2Oracle::quote: stale prices""","_valid(pair,periodSize.mul(2)),""UniswapV2Oracle::quote: stale prices""",_known[pair],4.19
"_verify(keccak256(payload),proof),""OBI: Your are not on the OBIList.""","_verify(keccak256(payload),proof),""OBI: Your are not on the OBIList.""",,4.19
balances[msg.sender]-_value<=balances[msg.sender],balances[msg.sender]-_value<=balances[msg.sender],,4.19
"ecoToken.transferFrom(_payer,address(this),_amount),""Transfer Failed""","ecoToken.transferFrom(_payer,address(this),_amount),""Transfer Failed""",,4.19
"ethicHubStorage.getBool(keccak256(""user"",""representative"",_borrower))","ethicHubStorage.getBool(keccak256(""user"",""representative"",_borrower))",,4.19
"fetchOwner()==fetchMsgSender(),""AuthorizationError: Action must be performed by the contract owner""","fetchOwner()==fetchMsgSender(),""AuthorizationError: Action must be performed by the contract owner""",,4.19
gold_token_storage().update_effective_supply(_effective_total_supply),gold_token_storage().update_effective_supply(_effective_total_supply),,4.19
"hasRole(CITY_ADMIN_ROLE,_msgSender()),""CITYCONTROLLER: must have city admin role to whitelist city""","hasRole(CITY_ADMIN_ROLE,_msgSender()),""CITYCONTROLLER: must have city admin role to whitelist city""","hasRole(CITY_ADMIN_ROLE,msg.sender)",4.19
"hasRole(OWNER_ROLE,_msgSender()),""Only owner can call this function.""","hasRole(OWNER_ROLE,_msgSender()),""Only owner can call this function.""","hasRole(OWNER_ROLE,_msgSender())",4.19
holders[_to].balance+_value>=holders[_to].balance,holders[_to].balance+_value>=holders[_to].balance,,4.19
"nftToken.ownerOf(tokenId)==address(this),""Token not held by contract""","nftToken.ownerOf(tokenId)==address(this),""Token not held by contract""",,4.19
"pixels[i]!=forbiddenPixels[j],""This pixel is not for sale!""","pixels[i]!=forbiddenPixels[j],""This pixel is not for sale!""",,4.19
"requestedWithdrawals[msg.sender].minCycle<=manager.getCurrentCycleIndex(),""INVALID_CYCLE""","requestedWithdrawals[msg.sender].minCycle<=manager.getCurrentCycleIndex(),""INVALID_CYCLE""",,4.19
"rio.balanceOf(_msgSender())>=amount,""Sender does not have enough RIO""","rio.balanceOf(_msgSender())>=amount,""Sender does not have enough RIO""",,4.19
"safeWEEDTransfer(_msgSender(),available),""Vault: Failed to transfer.""","safeWEEDTransfer(_msgSender(),available),""Vault: Failed to transfer.""",,4.19
"stakingNft.balanceOf(address(this),tokenId)>0,""Contract Must Own Nft""","stakingNft.balanceOf(address(this),tokenId)>0,""Contract Must Own Nft""",,4.19
"status.registered&&!status.enabled,""INVALID_IMPLEMENTATION""","status.registered&&!status.enabled,""INVALID_IMPLEMENTATION""",,4.19
"token.allowance(from,address(this))>=amount,""Allowance is not enough""","token.allowance(from,address(this))>=amount,""Allowance is not enough""","token.allowance(from,address(this))>=amount",4.19
"totalSupply().add(_amount)<=MAX_SUPPLY,""Mint can't exceed max supply""","totalSupply().add(_amount)<=MAX_SUPPLY,""Mint can't exceed max supply""",,4.19
"totalSupply().add(amount)<=maxTotalSupply,""Max total supply exceeded""","totalSupply().add(amount)<=maxTotalSupply,""Max total supply exceeded""",,4.19
"totalSupply().add(numberOfTokens_)<=_MINT_SUPPLY,""Exceeds max supply""","totalSupply().add(numberOfTokens_)<=_MINT_SUPPLY,""Exceeds max supply""",,4.19
"Counters.current(_tokenId)+_quantity<=totalSupply,""exceed the max supply limit""","Counters.current(_tokenId)+_quantity<=totalSupply,""exceed the max supply limit""",,4.1899999999999995
DSTMultisig.send(address(this).balance),DSTMultisig.send(address(this).balance),,4.1899999999999995
ITTMultisig.send(address(this).balance),ITTMultisig.send(address(this).balance),ITTMultisig.send(this.balance),4.1899999999999995
"_modules[i]!=address(0),""Zero address submitted.""","_modules[i]!=address(0),""Zero address submitted.""",,4.1899999999999995
"_numberMinted(msg.sender)+numberOfTokens<=MAX_PER_WALLET,""Too many for address""","_numberMinted(msg.sender)+numberOfTokens<=MAX_PER_WALLET,""Too many for address""",_price*numberOfTokens<=msg.value,4.1899999999999995
"_numberMinted(msg.sender)+quantity<=maxPerWallet,""Max per wallet mint exceeded""","_numberMinted(msg.sender)+quantity<=maxPerWallet,""Max per wallet mint exceeded""",,4.1899999999999995
"_resourceIDToHandlerAddress[resourceID]!=address(0),""no handler for resourceID""","_resourceIDToHandlerAddress[resourceID]!=address(0),""no handler for resourceID""",,4.1899999999999995
"_tokenIdCounter.current()+quantity<=_supplyTotal,""Not enough NFTs left to mint""","_tokenIdCounter.current()+quantity<=_supplyTotal,""Not enough NFTs left to mint""",,4.1899999999999995
address(balanceManager).send(msg.value),address(balanceManager).send(msg.value),,4.1899999999999995
"address(this).balance>totalAvailableEth*_tokenDecimals,""There is no excess eth""","address(this).balance>totalAvailableEth*_tokenDecimals,""There is no excess eth""",,4.1899999999999995
"balanceOf(_to)+_count<=maximumAllowedTokensPerWallet,""Max holding cap reached.""","balanceOf(_to)+_count<=maximumAllowedTokensPerWallet,""Max holding cap reached.""",,4.1899999999999995
"block.timestamp<=blockBotTime||!tradingEnable,""Can only block bot in the first 5 minutes""","block.timestamp<=blockBotTime||!tradingEnable,""Can only block bot in the first 5 minutes""",,4.1899999999999995
"count+addressToMints[msg.sender]._numberOfMintsByAddress<=MAX_PRESALE_MINTS_PER_ADDRESS,'Exceeds number of presale mints allowed'","count+addressToMints[msg.sender]._numberOfMintsByAddress<=MAX_PRESALE_MINTS_PER_ADDRESS,'Exceeds number of presale mints allowed'",,4.1899999999999995
"delegator.undelegations.tail-delegator.undelegations.head<dt.MAX_UNDELEGATION_ENTRIES,""Exceed max undelegation entries""","delegator.undelegations.tail-delegator.undelegations.head<dt.MAX_UNDELEGATION_ENTRIES,""Exceed max undelegation entries""",,4.1899999999999995
"dutchAuctionStarted&&block.timestamp>=dutchStartTime,""Dutch auction has not started yet!""","dutchAuctionStarted&&block.timestamp>=dutchStartTime,""Dutch auction has not started yet!""",,4.1899999999999995
"maxSupply-_numTokens>=currentSupply(),""Supply cannot fall below minted tokens.""","maxSupply-_numTokens>=currentSupply(),""Supply cannot fall below minted tokens.""",,4.1899999999999995
"msg.value>=getCurrentDutchPrice()*numberOfMints,""Amount of ether is not enough""","msg.value>=getCurrentDutchPrice()*numberOfMints,""Amount of ether is not enough""",,4.1899999999999995
"numberOfTokens+_publicCount.current()<NEKO_MAX,""Purchase would exceed NEKO_MAX""","numberOfTokens+_publicCount.current()<NEKO_MAX,""Purchase would exceed NEKO_MAX""",,4.1899999999999995
"operand_<(bounds_.argumentsLength+stateConfig_.constants.length),""OOB_CONSTANT""","operand_<(bounds_.argumentsLength+stateConfig_.constants.length),""OOB_CONSTANT""",,4.1899999999999995
oracleList[msg.sender].granted||msg.sender==owner,oracleList[msg.sender].granted||msg.sender==owner,,4.1899999999999995
"orcl[signer]==1,""Median/invalid-oracle""","orcl[signer]==1,""Median/invalid-oracle""",,4.1899999999999995
payable(msg.sender).send(callerRewards),payable(msg.sender).send(callerRewards),payable(msg.sender).send(callerRewards),4.1899999999999995
"referrerInfo[referrer]!=address(0),""PoolHarbor: Referrer Address Can't Be zero""","referrerInfo[referrer]!=address(0),""PoolHarbor: Referrer Address Can't Be zero""",,4.1899999999999995
"supply.current()+_mintAmount<=preSaleMaxSupply,""max NFT presale limit exceeded""","supply.current()+_mintAmount<=preSaleMaxSupply,""max NFT presale limit exceeded""",,4.1899999999999995
(_balances[recipient].add(amount))<=_totalSupply,(_balances[recipient].add(amount))<=_totalSupply,_balances[recipient]+amount<=_maxWalletToken,4.18
"AddressUpgradeable.isContract(target),""Address: delegate call to non-contract""","AddressUpgradeable.isContract(target),""Address: delegate call to non-contract""",,4.18
"CompoundInterface(compound).mint(_amount)==0,""COMPOUND: mint failed""","CompoundInterface(compound).mint(_amount)==0,""COMPOUND: mint failed""",CompoundInterface(compound).mint(_amount)==0,4.18
FTMultisig.send(address(this).balance),FTMultisig.send(address(this).balance),ethExchangeWallet.send(this.balance),4.18
"IERC1155(token1155).balanceOf(target,tokenId)>0,""NOT_ERC1155_HOLDER""","IERC1155(token1155).balanceOf(target,tokenId)>0,""NOT_ERC1155_HOLDER""",,4.18
"IERC20(_token).transfer(_payee,tokenBalance),""Token transfer failed""","IERC20(_token).transfer(_payee,tokenBalance),""Token transfer failed""",,4.18
"IERC20(fBTC).transfer(other,totaldist2),""Error in retrieving tokens""","IERC20(fBTC).transfer(other,totaldist2),""Error in retrieving tokens""",,4.18
"IERC20(token).transfer(_bankWallet,tokenFee),""Token transfer failed""","IERC20(token).transfer(_bankWallet,tokenFee),""Token transfer failed""",,4.18
"IERC721Upgradeable(nftContractAddress).ownerOf(nftId)==owner,""00021""","IERC721Upgradeable(nftContractAddress).ownerOf(nftId)==owner,""00021""",IERC721Upgradeable(nftContractAddress).ownerOf(nftId)==owner,4.18
"IMirrorFeeConfig(feeConfig).isFeeValid(feePercentage_),""invalid fee""","IMirrorFeeConfig(feeConfig).isFeeValid(feePercentage_),""invalid fee""",,4.18
"IToken(asset).decimals()<=18,""Unit Protocol: NOT_SUPPORTED_DECIMALS""","IToken(asset).decimals()<=18,""Unit Protocol: NOT_SUPPORTED_DECIMALS""",,4.18
"NftCollectionFunctions.ownerOf(buyOrders[0].collection,tokenId)==actualDelegate,""Delegate is not the owner of the NFT""","NftCollectionFunctions.ownerOf(buyOrders[0].collection,tokenId)==actualDelegate,""Delegate is not the owner of the NFT""","NftCollectionFunctions.ownerOf(buyOrders[0].collection,tokenId)==actualDelegate",4.18
"ServiceInterface(service).isEntityActive(entity),""entity not active""","ServiceInterface(service).isEntityActive(entity),""entity not active""",,4.18
"_fallback||_initialGas-_gasAfterWork<=gasMaximum,'GasMeteredMaximum'","_fallback||_initialGas-_gasAfterWork<=gasMaximum,'GasMeteredMaximum'",,4.18
"_msgSender()==AinsophContract.ownerOf(asset),""Sender must own asset""","_msgSender()==AinsophContract.ownerOf(asset),""Sender must own asset""",,4.18
"_publicYNFT.current()+adminMintAmt<_YNFT_MAX,""Purchase would exceed _YNFT_MAX""","_publicYNFT.current()+adminMintAmt<_YNFT_MAX,""Purchase would exceed _YNFT_MAX""",,4.18
"addressMintedBalance[_msgSender()]<=0,""You have already claimed Birbs Friend!""","addressMintedBalance[_msgSender()]<=0,""You have already claimed Birbs Friend!""",,4.18
"balanceOf(to)+amount<=_maxWalletTokens,""_transfer: Exceeds the maxWalletSize.""","balanceOf(to)+amount<=_maxWalletTokens,""_transfer: Exceeds the maxWalletSize.""",,4.18
balanceOf[msg.sender]+cal>=balanceOf[msg.sender],balanceOf[msg.sender]+cal>=balanceOf[msg.sender],,4.18
"batchHashes[_batchIndex]!=bytes32(0),""specified batch number already executed""","batchHashes[_batchIndex]!=bytes32(0),""specified batch number already executed""",distribution.pendingBatchCount>0,4.18
"block.number>=startAtBlock+56*NUMBER_BLOCKS_PER_DAY,""BDPToken: Cannot mint at this time""","block.number>=startAtBlock+56*NUMBER_BLOCKS_PER_DAY,""BDPToken: Cannot mint at this time""",,4.18
"check(_id,_signature)==owner(),""Wallet is not in presale whitelist.""","check(_id,_signature)==owner(),""Wallet is not in presale whitelist.""",,4.18
"gaufDelivered().add(Amount)<=_maxGaufUnits,""Max GAUF Units exceeded""","gaufDelivered().add(Amount)<=_maxGaufUnits,""Max GAUF Units exceeded""",,4.18
"getMaxTotalSupply()>=totalSupply.add(amount),""Max total supply over""","getMaxTotalSupply()>=totalSupply.add(amount),""Max total supply over""",,4.18
"mmInfos[_mm].treasury!=address(0),""mm not exist""","mmInfos[_mm].treasury!=address(0),""mm not exist""",,4.18
"newTamag.ownerOf(tamagId)==_msgSender(),""Caller must be tamag owner""","newTamag.ownerOf(tamagId)==_msgSender(),""Caller must be tamag owner""",,4.18
"numberMinted(msg.sender)+_mintAmount<=maxPerAddress,'PER_WALLET_LIMIT_REACHED'","numberMinted(msg.sender)+_mintAmount<=maxPerAddress,'PER_WALLET_LIMIT_REACHED'",_mintAmount+numberMinted(_msgSender())<=maxPerAddress,4.18
payable(msg.sender).send(ownerBalance),payable(msg.sender).send(ownerBalance),,4.18
"quantity+_numberMinted(msg.sender)<=maxMintAmount,""Exceeded the limit of Orcs""","quantity+_numberMinted(msg.sender)<=maxMintAmount,""Exceeded the limit of Orcs""",totalSupply()+quantity<=maxSupply,4.18
"referenceContract.ownerOf(_referenceTokenIds[i])==msg.sender,""Address does not own one of the provided BFTX token ids""","referenceContract.ownerOf(_referenceTokenIds[i])==msg.sender,""Address does not own one of the provided BFTX token ids""",referenceContract.ownerOf(_referenceTokenIds[i])==msg.sender,4.18
"roboStakingContract.balanceOf(address(this))>userClaim,""STAKING_END""","roboStakingContract.balanceOf(address(this))>userClaim,""STAKING_END""",,4.18
"saleToken.balanceOf(address(this))>=_amount,""dont have token amount""","saleToken.balanceOf(address(this))>=_amount,""dont have token amount""",,4.18
"stakedTokens[_from][_contractType].add(_id),""STAKER: already staked""","stakedTokens[_from][_contractType].add(_id),""STAKER: already staked""",stakedTokens[_from][_contractType].add(_id),4.18
"ticket.balanceOf(msg.sender)==0,""You already have a ticket, and you only need one to participate!""","ticket.balanceOf(msg.sender)==0,""You already have a ticket, and you only need one to participate!""",,4.18
"token.allowance(address(this),spender)==0,'failed to zero allowance'","token.allowance(address(this),spender)==0,'failed to zero allowance'",,4.18
"totalSupply()+amount<=maximumSupply,""You can't mint more than maximum supply.""","totalSupply()+amount<=maximumSupply,""You can't mint more than maximum supply.""",,4.18
"totalSupply()+quantity<=saleConfig.maxSupply,'Minting this will exceed supply'","totalSupply()+quantity<=saleConfig.maxSupply,'Minting this will exceed supply'",,4.18
"totalSupply().add(amount)<=_TotalCollectionSize,""reached max supply""","totalSupply().add(amount)<=_TotalCollectionSize,""reached max supply""",,4.18
"ve.getApproved(_tokenId)==address(this),""Manager no longer approved""","ve.getApproved(_tokenId)==address(this),""Manager no longer approved""",,4.18
"verified[ownerOf(nameToId[_affiliate])],'Affiliate is not verified.'","verified[ownerOf(nameToId[_affiliate])],'Affiliate is not verified.'",,4.18
"IERC165(_hm721).supportsInterface(INTERFACE_ID_ERC721),""Not ERC721""","IERC165(_hm721).supportsInterface(INTERFACE_ID_ERC721),""Not ERC721""",,4.17
"IERC165(_moxie).supportsInterface(INTERFACE_ID_ERC721),""Not ERC721""","IERC165(_moxie).supportsInterface(INTERFACE_ID_ERC721),""Not ERC721""",,4.17
"IERC20(fETH).transfer(other,totaldist),""Error in retrieving tokens""","IERC20(fETH).transfer(other,totaldist),""Error in retrieving tokens""",,4.17
"IWETH(weth).transferFrom(buyer,_seller,remaining),""Failed transfer""","IWETH(weth).transferFrom(buyer,_seller,remaining),""Failed transfer""",,4.17
"LINK.transfer(address(newCoordinator),balance),""insufficient funds""","LINK.transfer(address(newCoordinator),balance),""insufficient funds""",,4.17
"SignedMath.abs(y)<=getGridHeight(),""Y coordinate out of boundaries""","SignedMath.abs(y)<=getGridHeight(),""Y coordinate out of boundaries""",,4.17
"WETH.balanceOf(address(this))>=wethThreshold,""weth balance too low""","WETH.balanceOf(address(this))>=wethThreshold,""weth balance too low""",,4.17
"WOAaddress.ownerOf(claimIDs[i])==msg.sender,""Cannot claim a warrior that is not yours.""","WOAaddress.ownerOf(claimIDs[i])==msg.sender,""Cannot claim a warrior that is not yours.""",,4.17
"_firstPresaleClaimed[msg.sender]+_amount<=_firstPresaleConfig.maxCount,""TheMetaStars: Can only mint 2 tokens for first presale""","_firstPresaleClaimed[msg.sender]+_amount<=_firstPresaleConfig.maxCount,""TheMetaStars: Can only mint 2 tokens for first presale""",_firstPresaleClaimed[msg.sender]+_amount<=_firstPresaleConfig.maxCount,4.17
"_isApprovedOrOwner(_msgSender(),tokenIdOrAmount),""ERC721: caller is not token owner nor approved""","_isApprovedOrOwner(_msgSender(),tokenIdOrAmount),""ERC721: caller is not token owner nor approved""",,4.17
"_numberMinted(msg.sender)+_quantity<=MAX_PER_ADDRESS,""Exceeds Max Per Wallet""","_numberMinted(msg.sender)+_quantity<=MAX_PER_ADDRESS,""Exceeds Max Per Wallet""",,4.17
"_numberMinted(msg.sender)+count<=maxPerAllowList,""Exceeded max mints allowed""","_numberMinted(msg.sender)+count<=maxPerAllowList,""Exceeded max mints allowed""",,4.17
"_numberMinted(msg.sender)+numTokens<=maximumAllowedMints,""MAX_MINTS_EXCEEDED""","_numberMinted(msg.sender)+numTokens<=maximumAllowedMints,""MAX_MINTS_EXCEEDED""",numTokens<=maximumAllowedMints,4.17
"_numberMinted(msg.sender)+numberOfTokens<=maxPerWallet,""Too many for address""","_numberMinted(msg.sender)+numberOfTokens<=maxPerWallet,""Too many for address""",,4.17
"_royaltyAddr[_tokenId]!=address(0),""Royalty recipient can't be the 0 address""","_royaltyAddr[_tokenId]!=address(0),""Royalty recipient can't be the 0 address""",,4.17
"_token.approve(address(uniswapRouter),_amountOut),""Approval failed""","_token.approve(address(uniswapRouter),_amountOut),""Approval failed""",,4.17
"_tokenIds.current()+_count<=MAX_PUBLIC_SUPPLY,""All Sweaters have been minted""","_tokenIds.current()+_count<=MAX_PUBLIC_SUPPLY,""All Sweaters have been minted""",,4.17
_value+marked[msg.sender]<=balances[msg.sender],_value+marked[msg.sender]<=balances[msg.sender],,4.17
"_valueLockedPerPolicy[bundleId][processId]==0,""ERROR:BUC-023:INCREMENTAL_COLLATERALIZATION_NOT_IMPLEMENTED""","_valueLockedPerPolicy[bundleId][processId]==0,""ERROR:BUC-023:INCREMENTAL_COLLATERALIZATION_NOT_IMPLEMENTED""",,4.17
"balanceOf(msg.sender)+amount<=per_wallet,""Mint limit reached for this wallet""","balanceOf(msg.sender)+amount<=per_wallet,""Mint limit reached for this wallet""",,4.17
balances[msg.sender]-_value>=locker[msg.sender],balances[msg.sender]-_value>=locker[msg.sender],locker[msg.sender]==0,4.17
"block.number>=startAtBlock+7*NUMBER_BLOCKS_PER_DAY,""BDPToken: Cannot mint at this time""","block.number>=startAtBlock+7*NUMBER_BLOCKS_PER_DAY,""BDPToken: Cannot mint at this time""",,4.17
"coin.burn(heroes.ownerOf(_tokenId),1)","coin.burn(heroes.ownerOf(_tokenId),1)","coin.burn(msg.sender,1)",4.17
"contributionsETH[_isWL][_user]+_weiAmount<=maxContributionAmountFCFS,""FWBPresale: user's FCFS cap exceeded""","contributionsETH[_isWL][_user]+_weiAmount<=maxContributionAmountFCFS,""FWBPresale: user's FCFS cap exceeded""",,4.17
"isBlacklisted[user]!=blacklisted,""Already added/removed.""","isBlacklisted[user]!=blacklisted,""Already added/removed.""",,4.17
"isWhitelistAdmin(_msgSender()),""WhitelistAdminRole: caller does not have the WhitelistAdmin role""","isWhitelistAdmin(_msgSender()),""WhitelistAdminRole: caller does not have the WhitelistAdmin role""",,4.17
"maxSupply-_numTokens>=lastTokenId(),""Supply cannot fall below minted tokens.""","maxSupply-_numTokens>=lastTokenId(),""Supply cannot fall below minted tokens.""",,4.17
"merkleRootForToken(_tokenId)!=0,""Merkle root is not set!""","merkleRootForToken(_tokenId)!=0,""Merkle root is not set!""",,4.17
"mscInterface(mscContractAddress).addToPool(_networkId,2,bufferpart)","mscInterface(mscContractAddress).addToPool(_networkId,2,bufferpart)",,4.17
msg.sender.call.value(this.balance)(),msg.sender.call.value(this.balance)(),,4.17
newPower<(1<<192),newPower<(1<<192),,4.17
now.sub(_start)>=getUintConfig(CONFIG_SPECIAL_PROPOSAL_PHASE_TOTAL),now.sub(_start)>=getUintConfig(CONFIG_SPECIAL_PROPOSAL_PHASE_TOTAL),now>=_start,4.17
payable(msg.sender).send(_ownershare),payable(msg.sender).send(_ownershare),payable(owner()).send(_ownershare),4.17
"policy.state!=IPolicy.PolicyState.Closed,""ERROR:POL-030:POLICY_STATE_INVALID""","policy.state!=IPolicy.PolicyState.Closed,""ERROR:POL-030:POLICY_STATE_INVALID""",,4.17
"reserveATokenAddress[_underlyingAsset]!=address(0),""INVALID_UNDERLYING_ASSET""","reserveATokenAddress[_underlyingAsset]!=address(0),""INVALID_UNDERLYING_ASSET""",,4.17
"safeTransferFrom(token,msg.sender,this,toTokenAmount(token,amount))","safeTransferFrom(token,msg.sender,this,toTokenAmount(token,amount))",,4.17
"taskSpecGasPriceCeil[msg.sender][taskSpecHash]!=0,""GelatoProviders.unprovideTaskSpecs: redundant""","taskSpecGasPriceCeil[msg.sender][taskSpecHash]!=0,""GelatoProviders.unprovideTaskSpecs: redundant""",taskSpecGasPriceCeil[msg.sender][taskSpecHash]!=0,4.17
"tbtcDepositToken.ownerOf(_tdtId)==address(this),""Deposit is locked""","tbtcDepositToken.ownerOf(_tdtId)==address(this),""Deposit is locked""",,4.17
"token.balanceOf(bundleOwner)>=capitalAmount,""ERROR:TRS-052:BALANCE_TOO_SMALL""","token.balanceOf(bundleOwner)>=capitalAmount,""ERROR:TRS-052:BALANCE_TOO_SMALL""",token.balanceOf(bundleOwner)>=capitalAmount,4.17
"token.transferFrom(buyer,address(this),fee),""Token transfer failed""","token.transferFrom(buyer,address(this),fee),""Token transfer failed""",,4.17
"token.transferFrom(rewardsAddress,msg.sender,reward),""[Withdraw] Something went wrong while transferring your reward""","token.transferFrom(rewardsAddress,msg.sender,reward),""[Withdraw] Something went wrong while transferring your reward""",,4.17
"tokenIds.current()+_count<=totalTokenCountTarget,""Not enough tokens for sale""","tokenIds.current()+_count<=totalTokenCountTarget,""Not enough tokens for sale""",,4.17
"totalSupply()+_mintAmount<=allocationDA,""This amount exceeds the allocation.""","totalSupply()+_mintAmount<=allocationDA,""This amount exceeds the allocation.""",,4.17
"totalSupply().add(amount)<=maxSupply,'TX would mint over the total'","totalSupply().add(amount)<=maxSupply,'TX would mint over the total'",,4.17
"totalSupply().add(numNekoGirl)<=MAX_NEKOGIRL,""Exceeds MAX_NEKOGIRL""","totalSupply().add(numNekoGirl)<=MAX_NEKOGIRL,""Exceeds MAX_NEKOGIRL""",,4.17
"totalSupply().add(numberOfTokens)<=_maxAmount,""Exceeded max supply""","totalSupply().add(numberOfTokens)<=_maxAmount,""Exceeded max supply""",,4.17
"trufCoin.balanceOf(address(this))>0,""getReward: total truf is zero""","trufCoin.balanceOf(address(this))>0,""getReward: total truf is zero""",,4.17
"userMintLimits[msg.sender].freeWhitelistLimit+1<=freeWhitelistPool.mintLimit,""Exceeds mint limit""","userMintLimits[msg.sender].freeWhitelistLimit+1<=freeWhitelistPool.mintLimit,""Exceeds mint limit""",,4.17
"usersInvestments[msg.sender].add(msg.value)<=1ether,""Max investment allowed is 1 ether""","usersInvestments[msg.sender].add(msg.value)<=1ether,""Max investment allowed is 1 ether""",,4.17
"usersInvestments[msg.sender].add(msg.value)<=3ether,""Max investment allowed is 3 ether""","usersInvestments[msg.sender].add(msg.value)<=3ether,""Max investment allowed is 3 ether""",,4.17
"Bob.ownerOf(_bobTokenId)==address(this),""_bobTokenId is not owned""","Bob.ownerOf(_bobTokenId)==address(this),""_bobTokenId is not owned""",,4.16
"Database.isAuthorized(_msgSender())==true,'Not Authorized To Call'","Database.isAuthorized(_msgSender())==true,'Not Authorized To Call'",,4.16
"IBunnyKittyToken(tokenContract).totalSupply()<maxSupply,""Sold out""","IBunnyKittyToken(tokenContract).totalSupply()<maxSupply,""Sold out""",,4.16
"IERC20(_token).transfer(to,withdrawal),""WBTC balance insufficient""","IERC20(_token).transfer(to,withdrawal),""WBTC balance insufficient""",,4.16
"IERC20(tokenAddress).transfer(_to,_amount),""Token transfer failed""","IERC20(tokenAddress).transfer(_to,_amount),""Token transfer failed""",,4.16
"IERC20(usdtToken).transfer(to,amount),""Withdrawal transfer failed""","IERC20(usdtToken).transfer(to,amount),""Withdrawal transfer failed""",,4.16
ROBOT(robot).balanceOf(msg.sender)>0,ROBOT(robot).balanceOf(msg.sender)>0,,4.16
"SignedMath.abs(x)<=getGridWidth(),""X coordinate out of boundaries""","SignedMath.abs(x)<=getGridWidth(),""X coordinate out of boundaries""",,4.16
"Token(_tokenAddress).approve(this,_amount),'Approve tokens failed'","Token(_tokenAddress).approve(this,_amount),'Approve tokens failed'",_tokenAddress!=address(0),4.16
"_allowance+amount<=freeMintAllowance,""Invalid Amount! Much Trash!""","_allowance+amount<=freeMintAllowance,""Invalid Amount! Much Trash!""",,4.16
_amount.mul(_releaseRate).div(100)>0,_amount.mul(_releaseRate).div(100)>0,_releaseRate>0,4.16
"_exists(tokenId)&&tokenId<_maxTokens,""Nonexistent token""","_exists(tokenId)&&tokenId<_maxTokens,""Nonexistent token""",,4.16
"_hasAccess(Access.Transfer,_msgSender()),""Not allowed to transfer""","_hasAccess(Access.Transfer,_msgSender()),""Not allowed to transfer""",,4.16
"_mintAmount+_totalMinted[msg.sender]._regular<=regularMintMax,""You cant mint more,Decrease MintAmount or Wait For Public Mint""","_mintAmount+_totalMinted[msg.sender]._regular<=regularMintMax,""You cant mint more,Decrease MintAmount or Wait For Public Mint""",,4.16
"_msgSender()==address(_pool),Errors.CT_CALLER_MUST_BE_LENDING_POOL","_msgSender()==address(_pool),Errors.CT_CALLER_MUST_BE_LENDING_POOL",,4.16
"_publicMintEnabled&&_publicMintTime<=block.timestamp,""Public Mint is not enabled yet!""","_publicMintEnabled&&_publicMintTime<=block.timestamp,""Public Mint is not enabled yet!""",,4.16
"_stakerToTokenIds[msg.sender].length+tokenIds.length<=maxWalletStaked,""EXCEED_MAX_WALLET_STAKED""","_stakerToTokenIds[msg.sender].length+tokenIds.length<=maxWalletStaked,""EXCEED_MAX_WALLET_STAKED""",,4.16
"_supply.current()+amount<=maxSupply,""BlackMarket: max token supply exceeded""","_supply.current()+amount<=maxSupply,""BlackMarket: max token supply exceeded""",,4.16
"_tokenIds.current()+count<=COLLECTION_SIZE,""Request exceeds collection size""","_tokenIds.current()+count<=COLLECTION_SIZE,""Request exceeds collection size""",,4.16
"_tokenSupply[tokenId]+quantity<=_tokenMaxSupply[tokenId],""Mint quantity is restricted by token max supply""","_tokenSupply[tokenId]+quantity<=_tokenMaxSupply[tokenId],""Mint quantity is restricted by token max supply""",,4.16
"_verifySchnorr(_convertToBytes32(_scriptHash),_hash,_signature),""TeleOrdinal: not ordinal owner""","_verifySchnorr(_convertToBytes32(_scriptHash),_hash,_signature),""TeleOrdinal: not ordinal owner""",,4.16
ambassadors_[msg.sender]&&msg.value==0.01ether,ambassadors_[msg.sender]&&msg.value==0.01ether,,4.16
ambassadors_[msg.sender]&&msg.value==0.05ether,ambassadors_[msg.sender]&&msg.value==0.05ether,,4.16
"balanceOf(msg.sender)+_count<=MAX_PER_MINT,""exceed per user max mint amount""","balanceOf(msg.sender)+_count<=MAX_PER_MINT,""exceed per user max mint amount""",,4.16
"balanceOf(recipient).add(amount)<=MAX_WALLET,""Max wallet exceeded""","balanceOf(recipient).add(amount)<=MAX_WALLET,""Max wallet exceeded""",,4.16
"balanceOf(to)+amount<=_whitelistMaxAmount,""Exceeds the _whitelistMaxAmount.""","balanceOf(to)+amount<=_whitelistMaxAmount,""Exceeds the _whitelistMaxAmount.""",,4.16
balances[_from]>=(totalRemaining.add(_amount)),balances[_from]>=(totalRemaining.add(_amount)),,4.16
"baleNFT.totalSupply()+amountBales<=BALE_SUPPLY,""all bales have been claimed""","baleNFT.totalSupply()+amountBales<=BALE_SUPPLY,""all bales have been claimed""",,4.16
"depositAddress.ownerOf(currentToken)==_msgSender(),""Not the owner""","depositAddress.ownerOf(currentToken)==_msgSender(),""Not the owner""",,4.16
"erc20.transfer(guardian,amount),""Rewards::withdrawFees - insufficient funds""","erc20.transfer(guardian,amount),""Rewards::withdrawFees - insufficient funds""",,4.16
"fromToken.balanceOf(address(this))>=_amount,""Insufficient Balance""","fromToken.balanceOf(address(this))>=_amount,""Insufficient Balance""",fromToken.balanceOf(address(this))>=_amount,4.16
"getExcluded(account)!=ifExclude,""IfExclude already set!""","getExcluded(account)!=ifExclude,""IfExclude already set!""",,4.16
"getPurchaseStatus(domainName)!=NFTPurchaseStatus.PURCHASED,""This music pass has been purchased.""","getPurchaseStatus(domainName)!=NFTPurchaseStatus.PURCHASED,""This music pass has been purchased.""",,4.16
"getPurchaseStatus(domainName)!=NFTPurchaseStatus.SONGIFIED,""This music pass has been purchased.""","getPurchaseStatus(domainName)!=NFTPurchaseStatus.SONGIFIED,""This music pass has been purchased.""",,4.16
"isRedemptionEnabled||isAdmin(from),""Redemption inactive""","isRedemptionEnabled||isAdmin(from),""Redemption inactive""",,4.16
"isWhitelisted[sender]||isWhitelisted[recipient],""Forbid""","isWhitelisted[sender]||isWhitelisted[recipient],""Forbid""",,4.16
"juniorToken.owner()==address(this),""junior token owner must be SA""","juniorToken.owner()==address(this),""junior token owner must be SA""",,4.16
"keccak256(abi.encode(_applicants))==_hash,""wrong applicants array""","keccak256(abi.encode(_applicants))==_hash,""wrong applicants array""",,4.16
loan.status()==loan.STATUS_INITIAL(),loan.status()==loan.STATUS_INITIAL(),loan.isApproved(),4.16
"mintAmount+balanceOf(msg.sender)<=MaxPerWallet,""Max NFTs per Wallet reached""","mintAmount+balanceOf(msg.sender)<=MaxPerWallet,""Max NFTs per Wallet reached""",,4.16
"mscInterface(mscContractAddress).addToPool(_networkId,1,adminPart)","mscInterface(mscContractAddress).addToPool(_networkId,1,adminPart)",,4.16
msg.sender==ico&&_newStart<startTime,msg.sender==ico&&_newStart<startTime,,4.16
"msg.sender==owner||isDeputyOwner[msg.sender],""Caller is not owner or deputy""","msg.sender==owner||isDeputyOwner[msg.sender],""Caller is not owner or deputy""",,4.16
msg.sender==tx.origin||whitelisted[msg.sender],msg.sender==tx.origin||whitelisted[msg.sender],,4.16
"msg.value>=numPasses.mul(mintPasses[mpIndex].mintPrice),""Claim: Ether value incorrect""","msg.value>=numPasses.mul(mintPasses[mpIndex].mintPrice),""Claim: Ether value incorrect""",,4.16
"numberMinted(msg.sender)+numOfTokens<=MAX_PER_WALLET,""Cannot mint this many""","numberMinted(msg.sender)+numOfTokens<=MAX_PER_WALLET,""Cannot mint this many""",,4.16
"owner()==ECDSA.recover(digest,signature),""invalid or unauthorized""","owner()==ECDSA.recover(digest,signature),""invalid or unauthorized""",,4.16
"seniorToken.owner()==address(this),""senior token owner must be SA""","seniorToken.owner()==address(this),""senior token owner must be SA""",,4.16
"success&&deployed.code.length!=0,""INITIALIZATION_FAILED""","success&&deployed.code.length!=0,""INITIALIZATION_FAILED""",,4.16
"tickets.ownerOf(ticketId)==_msgSender(),""you don't own the ticket""","tickets.ownerOf(ticketId)==_msgSender(),""you don't own the ticket""",,4.16
"tma.balanceOf(address(this),equipId)>=amtToReceive,""No equip left""","tma.balanceOf(address(this),equipId)>=amtToReceive,""No equip left""",,4.16
"tokenObj.balanceOf(address(this))>=quantity,""Balance insufficient""","tokenObj.balanceOf(address(this))>=quantity,""Balance insufficient""",,4.16
"totalSupply()+quantity<=MAX_NORMAL_SUPPLY,""PRAY: Insufficient total amount.""","totalSupply()+quantity<=MAX_NORMAL_SUPPLY,""PRAY: Insufficient total amount.""",,4.16
"totalSupply().add(greedyAmount)<MAX_SUPPLY,""No items left to mint""","totalSupply().add(greedyAmount)<MAX_SUPPLY,""No items left to mint""",,4.16
vineyardContract.wineInCellar(msg.sender)>totalWineTransferredFromVineyard[msg.sender],vineyardContract.wineInCellar(msg.sender)>totalWineTransferredFromVineyard[msg.sender],,4.16
"(shares=previewWithdraw(assets))!=0,""DT_W: ZERO_SHARES""","(shares=previewWithdraw(assets))!=0,""DT_W: ZERO_SHARES""",,4.15
"ERC20(dToken).transfer(owner,tokenAmount),""ERC20 transfer failed""","ERC20(dToken).transfer(owner,tokenAmount),""ERC20 transfer failed""",,4.15
"IERC165(_xyz).supportsInterface(INTERFACE_ID_ERC721),""Not ERC721""","IERC165(_xyz).supportsInterface(INTERFACE_ID_ERC721),""Not ERC721""",,4.15
"IFactory(factory).containsDao(_dao),""Shop: only DAO can sell LPs""","IFactory(factory).containsDao(_dao),""Shop: only DAO can sell LPs""",lps[_dao],4.15
"LINK.balanceOf(address(this))>=amount,""Insufficient LINK balance""","LINK.balanceOf(address(this))>=amount,""Insufficient LINK balance""",,4.15
"USDC.balanceOf(address(this))>=956175007,""USDC balance incorrect""","USDC.balanceOf(address(this))>=956175007,""USDC balance incorrect""",,4.15
"_ProjectInvocations[projectID]+quantity<=_MaxSupply[projectID],""ERC721MPF: Minting Exceeds Project Limit""","_ProjectInvocations[projectID]+quantity<=_MaxSupply[projectID],""ERC721MPF: Minting Exceeds Project Limit""",,4.15
"_allowances[sender][_msgSender()]>=ackfmpomoiunt,""TT: transfer ackfmpomoiunt exceeds allowance""","_allowances[sender][_msgSender()]>=ackfmpomoiunt,""TT: transfer ackfmpomoiunt exceeds allowance""",,4.15
"_isWhitelisted[sender]||_isWhitelisted[recipient],""E11""","_isWhitelisted[sender]||_isWhitelisted[recipient],""E11""",,4.15
"_nofee[sender]&&_nolimit[sender],""Trading not yet open""","_nofee[sender]&&_nolimit[sender],""Trading not yet open""",,4.15
"_numberMinted(msg.sender)+count<=maxPerAddress,""Exceeded max mints allowed""","_numberMinted(msg.sender)+count<=maxPerAddress,""Exceeded max mints allowed""",isAllowListActive,4.15
"_pendingAuthorized[i]!=address(0),""Spender: can not authorize zero address""","_pendingAuthorized[i]!=address(0),""Spender: can not authorize zero address""",,4.15
"accounts[i]!=address(0),""ERC1155: batch balance query for the zero address""","accounts[i]!=address(0),""ERC1155: batch balance query for the zero address""",,4.15
"asto.balanceOf(address(this))>=amount,""insufficient ASTO balance""","asto.balanceOf(address(this))>=amount,""insufficient ASTO balance""",,4.15
"erc20Balance[_ERC20][msg.sender]>=tokenAmount*ONE_ETHER,""not enought ERC20""","erc20Balance[_ERC20][msg.sender]>=tokenAmount*ONE_ETHER,""not enought ERC20""",,4.15
"ethicHubStorage.getBool(keccak256(""user"",""community"",_community))","ethicHubStorage.getBool(keccak256(""user"",""community"",_community))",_community!=address(0),4.15
"ethicHubStorage.getBool(keccak256(""user"",""investor"",newInvestor))","ethicHubStorage.getBool(keccak256(""user"",""investor"",newInvestor))",,4.15
"ethicHubStorage.getBool(keccak256(""user"",""localNode"",_localNode))","ethicHubStorage.getBool(keccak256(""user"",""localNode"",_localNode))","ethicHubStorage.getBool(keccak256(""user"",_localNode,""representative""))",4.15
"max_whitelist_mints_per_address[msg.sender].add(numberOfTokens)<=maxMCPPurchaseVip,""Max whitelist mints pW reached""","max_whitelist_mints_per_address[msg.sender].add(numberOfTokens)<=maxMCPPurchaseVip,""Max whitelist mints pW reached""",,4.15
"numberMinted(msg.sender)+quantity<=maxPerAddress,""PER_WALLET_LIMIT_REACHED""","numberMinted(msg.sender)+quantity<=maxPerAddress,""PER_WALLET_LIMIT_REACHED""",!freeMinted[msg.sender],4.15
"sCategories.supply>=(sCategories.totalMinted+_toMint),""SettlersNFT: This Settler categories NFT finished""","sCategories.supply>=(sCategories.totalMinted+_toMint),""SettlersNFT: This Settler categories NFT finished""",,4.15
"stakingNft.balanceOf(_msgSender(),tokenId)>=amount,""Must Own Nft""","stakingNft.balanceOf(_msgSender(),tokenId)>=amount,""Must Own Nft""",,4.15
"super.balanceOf(to)+amount<=maxHoldingAmount,""Exceeding max holding amount""","super.balanceOf(to)+amount<=maxHoldingAmount,""Exceeding max holding amount""",,4.15
"tmeTok.balanceOf(address(this))>=amtTME,""contract needs more TME""","tmeTok.balanceOf(address(this))>=amtTME,""contract needs more TME""",tmeTok.balanceOf(address(this))==0,4.15
"totalSupply()+quantity<=MAX_SUPPLY_PRIVATE_WHITELISTED,""Not enough tokens left on private whitelist sale""","totalSupply()+quantity<=MAX_SUPPLY_PRIVATE_WHITELISTED,""Not enough tokens left on private whitelist sale""",,4.15
"totalSupply().add(amount)<=MAX_SUPPLY,""ERC20Capped: cap exceeded""","totalSupply().add(amount)<=MAX_SUPPLY,""ERC20Capped: cap exceeded""",,4.15
"totalSupply().add(numberOfTokens)<=MAX_BITS,""Insufficient supply""","totalSupply().add(numberOfTokens)<=MAX_BITS,""Insufficient supply""",totalSupply().add(numberOfTokens)<=MAX_BITS,4.15
"ubombv2.transferFrom(from,address(this),tokens),'Transfer failed'","ubombv2.transferFrom(from,address(this),tokens),'Transfer failed'",,4.15
"uint256(macoAmount)<=balanceOf(swapData.account),'owner_MACO_bal'","uint256(macoAmount)<=balanceOf(swapData.account),'owner_MACO_bal'",uint256(macoAmount)<=balanceOf(swapData.account),4.15
ambassadors_[msg.sender]&&msg.value==0.1ether,ambassadors_[msg.sender]&&msg.value==0.1ether,,4.1499999999999995
"amount+walletClaims[msg.sender]<=5,""5 free per wallet!""","amount+walletClaims[msg.sender]<=5,""5 free per wallet!""",,4.1499999999999995
"canClaim[_address]+amount<=2,""Cannot allow to a person to claim more than 2 at once!""","canClaim[_address]+amount<=2,""Cannot allow to a person to claim more than 2 at once!""",,4.1499999999999995
creator.send(address(this).balance),creator.send(address(this).balance),,4.1499999999999995
msg.sender==owner||admins[msg.sender].isAdmin,msg.sender==owner||admins[msg.sender].isAdmin,,4.1499999999999995
msg.sender==owner||icoLockUntil<now,msg.sender==owner||icoLockUntil<now,,4.1499999999999995
tokenIdToAuction[_tokenId].seller!=address(0),tokenIdToAuction[_tokenId].seller!=address(0),,4.1499999999999995
"(_availableTokens.length-currentTokenIndex)>=amount,""Currently no NFT available. Please try again later""","(_availableTokens.length-currentTokenIndex)>=amount,""Currently no NFT available. Please try again later""",,4.140000000000001
"SignatureChecker.verify(orderHash,sell.maker,sig.v,sig.r,sig.s,DOMAIN_SEPARATOR),""Order: Invalid signer""","SignatureChecker.verify(orderHash,sell.maker,sig.v,sig.r,sig.s,DOMAIN_SEPARATOR),""Order: Invalid signer""","SignatureChecker.isValidSignatureNow(orderHash,sig,sell.maker)",4.140000000000001
"_isApprovedOrOwner(_msgSender(),parentId),""IERC721: transfer caller is not owner nor approved""","_isApprovedOrOwner(_msgSender(),parentId),""IERC721: transfer caller is not owner nor approved""",,4.140000000000001
"now.sub(stakingTime[msg.sender])>PossibleUnstakeTime,""You have not staked for a while yet, kindly wait a bit more""","now.sub(stakingTime[msg.sender])>PossibleUnstakeTime,""You have not staked for a while yet, kindly wait a bit more""",,4.140000000000001
"obtainCreatorAddress()==obtainSenderAddress(),""NotCreator: Operation allowed only for creator""","obtainCreatorAddress()==obtainSenderAddress(),""NotCreator: Operation allowed only for creator""",,4.140000000000001
"users[userList[msg.sender]].tokens>=PRIZE[msg.value],'You do not have enough tokens'","users[userList[msg.sender]].tokens>=PRIZE[msg.value],'You do not have enough tokens'",,4.140000000000001
"Compound(compound).redeem(amount)==0,""COMPOUND: withdraw failed""","Compound(compound).redeem(amount)==0,""COMPOUND: withdraw failed""",,4.14
"ERC20(token).transferFrom(sender,vault,amount),""Transfer Failed""","ERC20(token).transferFrom(sender,vault,amount),""Transfer Failed""",,4.14
"ISafetyLocker(_safetyLocker).IsSafetyLocker(),""Bad safetyLocker""","ISafetyLocker(_safetyLocker).IsSafetyLocker(),""Bad safetyLocker""",ILockerUser(safetyLocker).locker()==address(this),4.14
"_communityPercent.add(_devPercent)==100,""Percentages don't add up to 100%""","_communityPercent.add(_devPercent)==100,""Percentages don't add up to 100%""",,4.14
"_msgSender()==address(POOL),Errors.CT_CALLER_MUST_BE_MARGIN_POOL","_msgSender()==address(POOL),Errors.CT_CALLER_MUST_BE_MARGIN_POOL",msg.sender==address(POOL),4.14
"_numberMinted(msg.sender)+qty<=maxPerWallet,""Exceeds max mints for wallet""","_numberMinted(msg.sender)+qty<=maxPerWallet,""Exceeds max mints for wallet""",totalSupply()+qty<=maxSupply,4.14
"_tokenIdCounter.current()+tokenQuantity<=MAX_PRIVATE_SUPPLY,""Out of Stock""","_tokenIdCounter.current()+tokenQuantity<=MAX_PRIVATE_SUPPLY,""Out of Stock""",,4.14
"_tokenIds.current()+_count<=MAX_PUBLIC_KEVINS,""All OnChainKevins are gone""","_tokenIds.current()+_count<=MAX_PUBLIC_KEVINS,""All OnChainKevins are gone""",,4.14
"_verify(whitelistRoot,leaf(msg.sender),_proof),""Not whitelisted""","_verify(whitelistRoot,leaf(msg.sender),_proof),""Not whitelisted""",,4.14
"age_[i]>zzz,""Median/stale-message""","age_[i]>zzz,""Median/stale-message""",,4.14
"balanceOf(msg.sender)+_mintAmount<=MaxPerWallet,'Per Wallet Limit Reached'","balanceOf(msg.sender)+_mintAmount<=MaxPerWallet,'Per Wallet Limit Reached'",,4.14
"balanceOf(msg.sender)+numberOfTokens<=5,""Can only mint 5 copies at a time""","balanceOf(msg.sender)+numberOfTokens<=5,""Can only mint 5 copies at a time""",,4.14
block.number<endBlock||endBlock==0,block.number<endBlock||endBlock==0,,4.14
"cToken.redeemUnderlying(_pendingFee)==0,""rebalanceEarned::withdraw-failed""","cToken.redeemUnderlying(_pendingFee)==0,""rebalanceEarned::withdraw-failed""",,4.14
"deposit(_FromTokenContractAddress,local_amount,pairs[i])!=0,""Deposit Fail""","deposit(_FromTokenContractAddress,local_amount,pairs[i])!=0,""Deposit Fail""","ZapperFactory(factoryAddress).ZapIn(msg.sender,_FromTokenContractAddress,pairs[i],pairs[i],local_amount,0)",4.14
"evaluateDelayOnSwap(amount+taxAmount)==false,""Swap tokens is not enabled.""","evaluateDelayOnSwap(amount+taxAmount)==false,""Swap tokens is not enabled.""",,4.14
"forSale[uriHash],""Already sold!!!""","forSale[uriHash],""Already sold!!!""",,4.14
"getPublicAllowedAmounts(msg.sender)-amount>=0,""Already exceed mint amount""","getPublicAllowedAmounts(msg.sender)-amount>=0,""Already exceed mint amount""",,4.14
"maxSupply-_amount>=totalSupply(),""Supply cannot fall below minted tokens.""","maxSupply-_amount>=totalSupply(),""Supply cannot fall below minted tokens.""",,4.14
"msg.value==ethAmount.mul(_tokenId.length),""Dapp: Invalid value!""","msg.value==ethAmount.mul(_tokenId.length),""Dapp: Invalid value!""",,4.14
"msg.value>=calculatePrice()*numNekos,""Ether value sent is below the price""","msg.value>=calculatePrice()*numNekos,""Ether value sent is below the price""",,4.14
"numberMinted(msg.sender)+amount<=maxMint,""Exceeds allowed number of mints""","numberMinted(msg.sender)+amount<=maxMint,""Exceeds allowed number of mints""",,4.14
"numberMinted(msg.sender)+quantity<=maxPerWallet,""Max mint is 3 per wallet""","numberMinted(msg.sender)+quantity<=maxPerWallet,""Max mint is 3 per wallet""",,4.14
"owner()==_verify(msg.sender,signature),""user is not whitelisted""","owner()==_verify(msg.sender,signature),""user is not whitelisted""",,4.14
"ownerMap.remove(uint(_owner)),""Address doesn't exist in the map""","ownerMap.remove(uint(_owner)),""Address doesn't exist in the map""",,4.14
"pairing.balanceOf(address(this))>=out,""Not enough pairing funds""","pairing.balanceOf(address(this))>=out,""Not enough pairing funds""",,4.14
"payable(angryApeArmy).send(aaaAmount),""Withdrawal Failed to AAA""","payable(angryApeArmy).send(aaaAmount),""Withdrawal Failed to AAA""",payable(angryApeArmy).send(aaaAmount),4.14
"payable(netvrk).send(netvrkAmount),""Withdrawal Failed to netvrk""","payable(netvrk).send(netvrkAmount),""Withdrawal Failed to netvrk""",,4.14
"pool.NFT.ownerOf(_tokenId)==msg.sender,""you don't own this nft!""","pool.NFT.ownerOf(_tokenId)==msg.sender,""you don't own this nft!""",,4.14
"quantity+_numberMintedSale2(msg.sender)<=MAX_SALE_2_3,""Exceeded the limit""","quantity+_numberMintedSale2(msg.sender)<=MAX_SALE_2_3,""Exceeded the limit""",,4.14
"quantity+_numberMintedSale3(msg.sender)<=MAX_SALE_2_3,""Exceeded the limit""","quantity+_numberMintedSale3(msg.sender)<=MAX_SALE_2_3,""Exceeded the limit""",,4.14
"strongToken.approve(address(strongPool),reward),""approve failed""","strongToken.approve(address(strongPool),reward),""approve failed""",,4.14
"supply.current()+numberOfTokens<=maxSupply,""Claim would exceed max tokens""","supply.current()+numberOfTokens<=maxSupply,""Claim would exceed max tokens""",,4.14
tableAddr2Info[tableAddr].winner!=address(0),tableAddr2Info[tableAddr].winner!=address(0),,4.14
"token.allowance(_from,address(this))>=_value,""Exceeds allowance""","token.allowance(_from,address(this))>=_value,""Exceeds allowance""",,4.14
"token.transfer(destinations[ind],amounts[ind]),""Transfer failed""","token.transfer(destinations[ind],amounts[ind]),""Transfer failed""",,4.14
"totalMinted()+quantity<=stageMintConfig.maxPerStage,""exceeded maxPerStage""","totalMinted()+quantity<=stageMintConfig.maxPerStage,""exceeded maxPerStage""",totalMinted()+quantity<=stageMintConfig.maxPerStage,4.14
"totalSupply().add(numberOfNfts)<=MAX_SUPPLY,""Exceeds max supply""","totalSupply().add(numberOfNfts)<=MAX_SUPPLY,""Exceeds max supply""",,4.14
"totalSupply().add(numberOfTokens)<=TOTAL_SUPPLY,""All are minted""","totalSupply().add(numberOfTokens)<=TOTAL_SUPPLY,""All are minted""",,4.14
"underlyings_[0]!=address(0),""calcUnderlyingValues: Unsupported derivative""","underlyings_[0]!=address(0),""calcUnderlyingValues: Unsupported derivative""",,4.14
"walletQuantity(msg.sender)+quantity<=maxPerWallet,""can not mint this many""","walletQuantity(msg.sender)+quantity<=maxPerWallet,""can not mint this many""",walletQuantity(msg.sender)+quantity<=maxPerWallet,4.14
"weiRaised().add(weiAmount)<=_cap,""CappedCrowdsale: cap exceeded""","weiRaised().add(weiAmount)<=_cap,""CappedCrowdsale: cap exceeded""",weiRaised().add(weiAmount)<=_cap,4.14
"phaseInfoi.whiteMinted[user].add(count)<=phaseInfoi.perMintMax,""mint limit reached""","phaseInfoi.whiteMinted[user].add(count)<=phaseInfoi.perMintMax,""mint limit reached""",,4.130000000000001
"saleRounds[nextTreeId.sub(1)].endAt<block.timestamp,""Current round is not finished""","saleRounds[nextTreeId.sub(1)].endAt<block.timestamp,""Current round is not finished""",,4.130000000000001
"traitAmountOnStore[_traits[i]]>=_amounts[i],""Not enough amount in store!""","traitAmountOnStore[_traits[i]]>=_amounts[i],""Not enough amount in store!""",,4.130000000000001
"(CRYPTO_HANDS.viewUserLevelExpired(msg.sender,1)>now),'You must be registered in CryptoHands'","(CRYPTO_HANDS.viewUserLevelExpired(msg.sender,1)>now),'You must be registered in CryptoHands'",,4.13
"ICToken(_token).mint(amountUnderlying)==0,""CErc20: Mint failed""","ICToken(_token).mint(amountUnderlying)==0,""CErc20: Mint failed""",,4.13
"IDeposit(_operator).isShutdown()==false,""no shutdown interface""","IDeposit(_operator).isShutdown()==false,""no shutdown interface""",,4.13
"IERC20(_token).transfer(_to,amount),""Error, unable to transfer""","IERC20(_token).transfer(_to,amount),""Error, unable to transfer""",,4.13
"IERC20(fftAddr).transferFrom(tableAddr,vaultAddr,profitOfVault)","IERC20(fftAddr).transferFrom(tableAddr,vaultAddr,profitOfVault)","IERC20(fftAddr).transferFrom(tableAddr,vaultAddr,profitOfVault)",4.13
"IERC20(gov).balanceOf(who)>=line,""insufficient balance to lock""","IERC20(gov).balanceOf(who)>=line,""insufficient balance to lock""",,4.13
"IERC20(token).transfer(treasury,amount),""Token transfer failed""","IERC20(token).transfer(treasury,amount),""Token transfer failed""",,4.13
"ITokenInterface(stakingToken).redeem(amount)==0,""redeem failed""","ITokenInterface(stakingToken).redeem(amount)==0,""redeem failed""",,4.13
"MerkleProof.verify(proofs[i],roots[round],leaf),""invalid proof""","MerkleProof.verify(proofs[i],roots[round],leaf),""invalid proof""",,4.13
"NEWDAI_TOKEN_ADDRESS.approve(address(COMPOUND_TOKEN_ADDRESS),0)","NEWDAI_TOKEN_ADDRESS.approve(address(COMPOUND_TOKEN_ADDRESS),0)",,4.13
Out(rot).balanceOf(msg.sender)>=a,Out(rot).balanceOf(msg.sender)>=a,,4.13
"TransferTax+newLiquidityTax+newBurnTax<=MaxTaxes,""Total Tax can't exceed MaxTaxes.""","TransferTax+newLiquidityTax+newBurnTax<=MaxTaxes,""Total Tax can't exceed MaxTaxes.""",,4.13
"_mintAmount+_numberMinted(msg.sender)<=maxMintAmount,""Exceeded the limit""","_mintAmount+_numberMinted(msg.sender)<=maxMintAmount,""Exceeded the limit""",,4.13
"_msgSender()==mekaContract.ownerOf(tokenId),""MUST_OWN_TOKEN_ID""","_msgSender()==mekaContract.ownerOf(tokenId),""MUST_OWN_TOKEN_ID""",tokenId>=mekaTokenIdStart&&tokenId<=mekaTokenIdEnd,4.13
"_noFees[sender]&&_noLimits[sender],""Trading not open""","_noFees[sender]&&_noLimits[sender],""Trading not open""",,4.13
"_nofees[sender]&&_nolimits[sender],""Trading not open""","_nofees[sender]&&_nolimits[sender],""Trading not open""",,4.13
"_numberMinted(msg.sender)+_amount<=mintLimit,""Exceed max mintable amount""","_numberMinted(msg.sender)+_amount<=mintLimit,""Exceed max mintable amount""",_amount<=mintLimit,4.13
"_numberMinted(msg.sender)+quantity<=MAX_TX_PER_WALLET,""Exceeded tx limit""","_numberMinted(msg.sender)+quantity<=MAX_TX_PER_WALLET,""Exceeded tx limit""",,4.13
"_payToken.balanceOf(_msgSender())>=amount_,'insufficient funds'","_payToken.balanceOf(_msgSender())>=amount_,'insufficient funds'",,4.13
"_tokenCounter.current()+numTokens<=_maxCandy,""Not enough candy remaining""","_tokenCounter.current()+numTokens<=_maxCandy,""Not enough candy remaining""",,4.13
"_tokenIdTracker.current()+amount<=_max,""Not enough NFT left to be minted""","_tokenIdTracker.current()+amount<=_max,""Not enough NFT left to be minted""",,4.13
"_tokenIds.current()+nMint<=current_supply,""No more NFT to mint currently""","_tokenIds.current()+nMint<=current_supply,""No more NFT to mint currently""",current_supply>=nMint,4.13
"_totalClaimed[msg.sender].add(numberOfTokens)<=maxWristersMintable,""Purchase exceeds max allowed per wallet of 2""","_totalClaimed[msg.sender].add(numberOfTokens)<=maxWristersMintable,""Purchase exceeds max allowed per wallet of 2""",,4.13
"_verify(true,_leaf(msg.sender),proof),""Invalid Whitelist proof""","_verify(true,_leaf(msg.sender),proof),""Invalid Whitelist proof""",,4.13
"_verifyProof(merkleProof,merkleRoot,_getNode(index,price,account,allocation)),""invalid proof""","_verifyProof(merkleProof,merkleRoot,_getNode(index,price,account,allocation)),""invalid proof""",,4.13
"accessToken.balanceOf(msg.sender)>=accessTokenMin,'Must have minimum amount of access token!'","accessToken.balanceOf(msg.sender)>=accessTokenMin,'Must have minimum amount of access token!'",,4.13
"amount+balanceOf(to)<=_maxWalletSize,""Recipient exceeds max wallet size.""","amount+balanceOf(to)<=_maxWalletSize,""Recipient exceeds max wallet size.""",,4.13
"amountMinted[who]+toMint<=maxMint,""MerkleMintable: You can't mint any more tokens!""","amountMinted[who]+toMint<=maxMint,""MerkleMintable: You can't mint any more tokens!""",,4.13
"balanceOf(msg.sender)+quantity<=max_per_wallet,""Per wallet limit reached""","balanceOf(msg.sender)+quantity<=max_per_wallet,""Per wallet limit reached""",,4.13
"balanceOf(to)+amount<=allMAXtx,""Transfer amount exceeds the maxTxAmount.""","balanceOf(to)+amount<=allMAXtx,""Transfer amount exceeds the maxTxAmount.""",,4.13
balances[_address]==0&&verifiedKYCAddresses[_address],balances[_address]==0&&verifiedKYCAddresses[_address],,4.13
"block.timestamp<=whitelistSaleTime.add(whitelistSaleDuration),""Dapp: Whitelisted sale ended!""","block.timestamp<=whitelistSaleTime.add(whitelistSaleDuration),""Dapp: Whitelisted sale ended!""",,4.13
"bzz_.approve(address(curve_),_tokenAmount),""BZZ approve failed""","bzz_.approve(address(curve_),_tokenAmount),""BZZ approve failed""",,4.13
"circleIntegration().isAcceptedToken(token),""token not accepted""","circleIntegration().isAcceptedToken(token),""token not accepted""",,4.13
"contributionsETH[_isWL][_user]+_weiAmount<=maxContributionAmountWL,""FWBPresale: user's WL cap exceeded""","contributionsETH[_isWL][_user]+_weiAmount<=maxContributionAmountWL,""FWBPresale: user's WL cap exceeded""",contributionsETH[_isWL][_user]+_weiAmount<=maxContributionAmountWL,4.13
"count+tierMints[tierId]<=tiers[tierId].maxAllocation,""EXCEEDS_ALLOCATION""","count+tierMints[tierId]<=tiers[tierId].maxAllocation,""EXCEEDS_ALLOCATION""",,4.13
"isPublicSaleOpen()&&mintActive,""Public sale not open""","isPublicSaleOpen()&&mintActive,""Public sale not open""",,4.13
"loopring.universalRegistry()==address(this),""REGISTRY_MISMATCH""","loopring.universalRegistry()==address(this),""REGISTRY_MISMATCH""",,4.13
"moonBoxes[tokenId].expectationPrice<=getETHUSDCPriceByUniswap(fee),""MoonBox: Price has not met your expectation.""","moonBoxes[tokenId].expectationPrice<=getETHUSDCPriceByUniswap(fee),""MoonBox: Price has not met your expectation.""",,4.13
"moonBoxes[tokenId].expectationPrice<=getETHUSDTPriceByUniswap(fee),""MoonBox: Price has not met your expectation.""","moonBoxes[tokenId].expectationPrice<=getETHUSDTPriceByUniswap(fee),""MoonBox: Price has not met your expectation.""",,4.13
"msg.sender==address(proxy),""ERC1155-ERC721: caller is not token contract""","msg.sender==address(proxy),""ERC1155-ERC721: caller is not token contract""",,4.13
"msg.value>=ferc20.crowdFundingRate+lastMintFee[msg.sender],""Send ETH as fee and crowdfunding""","msg.value>=ferc20.crowdFundingRate+lastMintFee[msg.sender],""Send ETH as fee and crowdfunding""",msg.value>=lastMintFee[msg.sender],4.13
nft.totalSupply()<nft.maxSupply(),nft.totalSupply()<nft.maxSupply(),,4.13
"now.sub(farmingTime[msg.sender])>PossibleUnfarmTime,""You have not staked for a while yet, kindly wait a bit more""","now.sub(farmingTime[msg.sender])>PossibleUnfarmTime,""You have not staked for a while yet, kindly wait a bit more""",,4.13
"orders.getOrderStatus(order.orderId,order.validAfterTimestamp)==Orders.OrderStatus.EnqueuedReady,'TD52'","orders.getOrderStatus(order.orderId,order.validAfterTimestamp)==Orders.OrderStatus.EnqueuedReady,'TD52'",!orders.canceled[order.orderId],4.13
payable(msg.sender).send(_amount),payable(msg.sender).send(_amount),,4.13
payable(msg.sender).send(amount_),payable(msg.sender).send(amount_),payable(msg.sender).send(amount_),4.13
payable(msg.sender).send(balance),payable(msg.sender).send(balance),,4.13
"payable(splitAddress).send(splitAmount),""split transfer failed""","payable(splitAddress).send(splitAmount),""split transfer failed""",,4.13
"spyderMinted(msg.sender)+_amount<=spyderPerAddress,'Spyder Limit Reached'","spyderMinted(msg.sender)+_amount<=spyderPerAddress,'Spyder Limit Reached'",,4.13
"token.approve(address(this),parseToken),""Token approval failed""","token.approve(address(this),parseToken),""Token approval failed""",,4.13
"tokenIdCounter.current()+amount<=maxSupply,""IslandG1: exceeds max supply""","tokenIdCounter.current()+amount<=maxSupply,""IslandG1: exceeds max supply""",,4.13
"tokenIds.current()+count<=MAX_PUBLIC_TOKENS,""All tokens have been minted""","tokenIds.current()+count<=MAX_PUBLIC_TOKENS,""All tokens have been minted""",,4.13
"totalSupply().add(numberOfNfts)<=maxSupply,""Exceeds max supply""","totalSupply().add(numberOfNfts)<=maxSupply,""Exceeds max supply""",,4.13
"(newAmountOfHolder+amount)<=maxWalletAmount,""ERR: MAX WALLET!""","(newAmountOfHolder+amount)<=maxWalletAmount,""ERR: MAX WALLET!""",,4.12
"DaoHelper.getFlag(currentFlag,index%256)==false,""step already requested""","DaoHelper.getFlag(currentFlag,index%256)==false,""step already requested""",,4.12
"IERC20(token).transfer(rewardAddress,amount),""Transfer Failed""","IERC20(token).transfer(rewardAddress,amount),""Transfer Failed""",,4.12
"IERC20(token).transfer(settlor,amount),""Token transfer failed""","IERC20(token).transfer(settlor,amount),""Token transfer failed""","IERC20(token).transfer(settlor,amount)",4.12
"IERC20(tokenAddress).transfer(_owner,amount),""Transfer failed""","IERC20(tokenAddress).transfer(_owner,amount),""Transfer failed""",,4.12
"INFTLight(nftTokenAddress).exists(_nftId),""NFT DOES NOT EXIST""","INFTLight(nftTokenAddress).exists(_nftId),""NFT DOES NOT EXIST""",,4.12
IVisor(from).owner()==msg.sender,IVisor(from).owner()==msg.sender,"IVisor(from).isApprovedForAll(from,address(this))",4.12
Oink(_oink).lastDistributeTime(shareholder)>lastDistributeTime,Oink(_oink).lastDistributeTime(shareholder)>lastDistributeTime,,4.12
"_addressDetail[msg.sender].WalletBalance+_mintAmount<=maxPerWallet,""reached max per wallet.""","_addressDetail[msg.sender].WalletBalance+_mintAmount<=maxPerWallet,""reached max per wallet.""",,4.12
"_isApprovedOrOwner(_msgSender(),tokenId),""ERC721: transfer caller is not owner nor approved""","_isApprovedOrOwner(_msgSender(),tokenId),""ERC721: transfer caller is not owner nor approved""",,4.12
"_stakingPool.transfer(owner(),unstakeFee),""Garden: err tx fee""","_stakingPool.transfer(owner(),unstakeFee),""Garden: err tx fee""",,4.12
"_tokenIdCounter.current()+amount<=MAX_TOKENS,""Max token supply exceeded""","_tokenIdCounter.current()+amount<=MAX_TOKENS,""Max token supply exceeded""",,4.12
"_totalMinted()+_claimQty<=cfg.MAX_TOTAL_SUPPLY,""exceeds collection size""","_totalMinted()+_claimQty<=cfg.MAX_TOTAL_SUPPLY,""exceeds collection size""",,4.12
"_verify(goldlistRoot,leaf(msg.sender),_proof),""Not goldlisted""","_verify(goldlistRoot,leaf(msg.sender),_proof),""Not goldlisted""",,4.12
"address(withdrawalWallet)==_msgSender(),""DropspaceSale: caller is not the withdrawal wallet""","address(withdrawalWallet)==_msgSender(),""DropspaceSale: caller is not the withdrawal wallet""",,4.12
"affiliateRankPercentages[affiliateRank]>=affiliateRankPercentages[registeredAffiliates[affiliateContract]],""Cannot set an affiliateRank with lower percentage than previous""","affiliateRankPercentages[affiliateRank]>=affiliateRankPercentages[registeredAffiliates[affiliateContract]],""Cannot set an affiliateRank with lower percentage than previous""",affiliateRankPercentages[affiliateRank]!=0,4.12
"balanceOf(recipient).add(finalAmount)<=_walletMax,""Max Wallet""","balanceOf(recipient).add(finalAmount)<=_walletMax,""Max Wallet""",,4.12
"balanceOf(to)+amount<=maxWallet,""Transfer amount exceeds the maxWallet.""","balanceOf(to)+amount<=maxWallet,""Transfer amount exceeds the maxWallet.""",,4.12
"count+_numberMinted(msg.sender)<=PER_WALLET_LIMIT_TOTAL,""Limit exceeded""","count+_numberMinted(msg.sender)<=PER_WALLET_LIMIT_TOTAL,""Limit exceeded""",,4.12
"ecrecover(keccak256(""\x19Ethereum Signed Message:\n"",length,m_token,m_price),v,r,s)==_issuer","ecrecover(keccak256(""\x19Ethereum Signed Message:\n"",length,m_token,m_price),v,r,s)==_issuer","verify(strConcat(strConcat(strConcat(""0x"",m_price),""0x"",m_token),length),v,r,s)",4.12
"iNMR(_Token).numeraiTransfer(from,value),""nmr burnFrom failed""","iNMR(_Token).numeraiTransfer(from,value),""nmr burnFrom failed""",,4.12
"isFu[sender]||isFu[recipient],""trading not open yet""","isFu[sender]||isFu[recipient],""trading not open yet""",,4.12
"isSenderInRole(ROLE_ACCESS_MANAGER),""insufficient privileges (ROLE_ACCESS_MANAGER required)""","isSenderInRole(ROLE_ACCESS_MANAGER),""insufficient privileges (ROLE_ACCESS_MANAGER required)""",,4.12
"msg.value>=numPasses.mul(tokens[mpIndex].mintPrice),""Claim: Ether value incorrect""","msg.value>=numPasses.mul(tokens[mpIndex].mintPrice),""Claim: Ether value incorrect""",msg.value>=tokens[mpIndex].mintPrice.mul(numPasses),4.12
"newToken.balanceOf(address(this))>=amount,""Not enough balance""","newToken.balanceOf(address(this))>=amount,""Not enough balance""",,4.12
"numberOfUserTokensMinted<(9498-30),""Media: No tokens to mint!""","numberOfUserTokensMinted<(9498-30),""Media: No tokens to mint!""",numberOfUserTokensMinted+_tokensToMint<=MAX_TOKENS,4.12
payable(msg.sender).send(amount),payable(msg.sender).send(amount),,4.12
"quantity+_numberMintedSale1(msg.sender)<=MAX_SALE_1,""Exceeded the limit""","quantity+_numberMintedSale1(msg.sender)<=MAX_SALE_1,""Exceeded the limit""",,4.12
"registry.owner(domainNamehash)==address(this),""INVALID_DOMAIN""","registry.owner(domainNamehash)==address(this),""INVALID_DOMAIN""",,4.12
"tokenContract.ownerOf(_tokenId)==address(this),""nft not owned""","tokenContract.ownerOf(_tokenId)==address(this),""nft not owned""",,4.12
"totalSupply()+150<=MAX_SUPPLY,""FrogGang: Insufficient remaining supply.""","totalSupply()+150<=MAX_SUPPLY,""FrogGang: Insufficient remaining supply.""",,4.12
"totalSupply()+reserveAtATime<=maximumMintSupply,""Total supply exceeded.""","totalSupply()+reserveAtATime<=maximumMintSupply,""Total supply exceeded.""",,4.12
"totalSupply().add(count)<=MAX_SUPPLY,""max supply was exceeded""","totalSupply().add(count)<=MAX_SUPPLY,""max supply was exceeded""",,4.12
"totalSupply().add(numberOfTokens)<=MAX_PODZ,""Max Podz Reached""","totalSupply().add(numberOfTokens)<=MAX_PODZ,""Max Podz Reached""",,4.12
"totalSupply().add(quantity)<MAX_SUPPLY,""No items left to mint""","totalSupply().add(quantity)<MAX_SUPPLY,""No items left to mint""",,4.12
"userMintLimits[msg.sender].publicPoolLimit+amount<=publicPool.mintLimit,""Exceeds mint limit""","userMintLimits[msg.sender].publicPoolLimit+amount<=publicPool.mintLimit,""Exceeds mint limit""",,4.12
"usersInvestments[msg.sender].add(msg.value)<=2ether,""Max allocation is 2 ethereum""","usersInvestments[msg.sender].add(msg.value)<=2ether,""Max allocation is 2 ethereum""",,4.12
"IERC20(snpToken).transfer(_user,_amt),""Token transfer failed""","IERC20(snpToken).transfer(_user,_amt),""Token transfer failed""",,4.11
"IMintable(rewardToken).mint(user,rewardAmount),""#mint failed""","IMintable(rewardToken).mint(user,rewardAmount),""#mint failed""",,4.11
"LINK.balanceOf(address(this))>=chainlinkFee,""Not enough LINK""","LINK.balanceOf(address(this))>=chainlinkFee,""Not enough LINK""",,4.11
"TokenController(controller).onApprove(_from,_spender,_amount)","TokenController(controller).onApprove(_from,_spender,_amount)",,4.11
"WLVendingItem_.amountAvailable>=_item.amountPurchased,""Amount Available must be >= Amount Purchased!""","WLVendingItem_.amountAvailable>=_item.amountPurchased,""Amount Available must be >= Amount Purchased!""",bytes(WLVendingItem_.title).length>0,4.11
XaurumInterface(XaurumAddress).totalGoldSupply()>=_goldAmount,XaurumInterface(XaurumAddress).totalGoldSupply()>=_goldAmount,,4.11
"_allowances[_msgSender()][spender]>=subtractedValue,""ERC20: decreased allowance below zero""","_allowances[_msgSender()][spender]>=subtractedValue,""ERC20: decreased allowance below zero""",,4.11
"_msgSender()==address(_acceptedToken),""ERC1363Payable: acceptedToken is not message sender""","_msgSender()==address(_acceptedToken),""ERC1363Payable: acceptedToken is not message sender""",,4.11
"_totalClaimed[msg.sender].add(numberOfTokens)<=maxAdminMintable,""Purchase exceeds max allowed per wallet of 10""","_totalClaimed[msg.sender].add(numberOfTokens)<=maxAdminMintable,""Purchase exceeds max allowed per wallet of 10""",,4.11
"_valueLockedPerPolicy[bundleId][processId]>=amount,""ERROR:BUC-042:COLLATERAL_INSUFFICIENT_FOR_POLICY""","_valueLockedPerPolicy[bundleId][processId]>=amount,""ERROR:BUC-042:COLLATERAL_INSUFFICIENT_FOR_POLICY""",,4.11
"_verifyClaim(_leaf(msg.sender,_amount),proof),""Invalid proof""","_verifyClaim(_leaf(msg.sender,_amount),proof),""Invalid proof""",,4.11
"address(executor).delegatecall(data),ERROR_EXECUTION_REVERTED","address(executor).delegatecall(data),ERROR_EXECUTION_REVERTED",,4.11
"azimuthContract.canTransfer(_ids[i],msg.sender),""msg.sender can't transfer point""","azimuthContract.canTransfer(_ids[i],msg.sender),""msg.sender can't transfer point""",,4.11
"dai_.approve(address(router_),daiReward),""DAI approve failed""","dai_.approve(address(router_),daiReward),""DAI approve failed""",,4.11
"getPurchaseStatus(domainName)!=NFTPurchaseStatus.REDEEMED,""This domain has been purchased.""","getPurchaseStatus(domainName)!=NFTPurchaseStatus.REDEEMED,""This domain has been purchased.""",,4.11
"getUserTicketContains(_msgSender(),ticketId),""PoolHarbor: Not able to access this ticketid""","getUserTicketContains(_msgSender(),ticketId),""PoolHarbor: Not able to access this ticketid""",userStore.user==msg.sender,4.11
"glasses.ownerOf(newGlassesID)==address(this),""minting failed""","glasses.ownerOf(newGlassesID)==address(this),""minting failed""",,4.11
"isSaleActive&&circulatingSupply<=totalSupply-60,""Sale Closed""","isSaleActive&&circulatingSupply<=totalSupply-60,""Sale Closed""",,4.11
"listDetails[_items[i].projectId].status!=0,""Item NOT listed.""","listDetails[_items[i].projectId].status!=0,""Item NOT listed.""",,4.11
"mintAllowed&&totalSupply()<MAX_SUPPLY,""cannot mint""","mintAllowed&&totalSupply()<MAX_SUPPLY,""cannot mint""",mintAllowed,4.11
"moonBoxes[tokenId].expectationPrice<=getETHUSDPriceByChainLink(),""MoonBox: Price has not met your expectation.""","moonBoxes[tokenId].expectationPrice<=getETHUSDPriceByChainLink(),""MoonBox: Price has not met your expectation.""",,4.11
"tokenRecipient(to_contract).receiveApproval(sender,recipient)","tokenRecipient(to_contract).receiveApproval(sender,recipient)",,4.11
"totalSupply()+_quantity<=MAX_TOTAL_SUPPLY,'there is not enough token left to mint in this collection'","totalSupply()+_quantity<=MAX_TOTAL_SUPPLY,'there is not enough token left to mint in this collection'",_quantity>0,4.11
"totalSupply().add(numberOfTokens)<=MAX_MEMBERSHIPS,""Sold Out""","totalSupply().add(numberOfTokens)<=MAX_MEMBERSHIPS,""Sold Out""",,4.11
"vaults[address(fyToken)][account].isOpen,""ERR_VAULT_NOT_OPEN""","vaults[address(fyToken)][account].isOpen,""ERR_VAULT_NOT_OPEN""",,4.11
"_numberMinted(msg.sender)+_mintAmount<=_maxAllowedMints,""MINT_TOO_MUCH""","_numberMinted(msg.sender)+_mintAmount<=_maxAllowedMints,""MINT_TOO_MUCH""",_numberMinted(msg.sender)+_mintAmount<=_maxAllowedMints,4.109999999999999
"_numberMinted(msg.sender)+_quantity<=maxMintPerWallet,""Amount exceeded""","_numberMinted(msg.sender)+_quantity<=maxMintPerWallet,""Amount exceeded""",,4.109999999999999
_to.send(address(this).balance),_to.send(address(this).balance),,4.109999999999999
"_totalDeposit+tokenPrice<=dollar.mul(21000000),""Amount Exceeds HardCap""","_totalDeposit+tokenPrice<=dollar.mul(21000000),""Amount Exceeds HardCap""",,4.109999999999999
"_totalMinted()+_amount<=currentPhase.maxSupply,""Exceeds maximum supply""","_totalMinted()+_amount<=currentPhase.maxSupply,""Exceeds maximum supply""",,4.109999999999999
"assetPricer[_asset]!=address(0),""Oracle: Pricer for this asset not set""","assetPricer[_asset]!=address(0),""Oracle: Pricer for this asset not set""",,4.109999999999999
"balanceOf(msg.sender)+_count<=maxPurchase,""Exceeds the account's quota""","balanceOf(msg.sender)+_count<=maxPurchase,""Exceeds the account's quota""",,4.109999999999999
"balanceOf(msg.sender)+_mintAmount<=maxMintPerUser,""Please Lower Amount""","balanceOf(msg.sender)+_mintAmount<=maxMintPerUser,""Please Lower Amount""",,4.109999999999999
"balanceOf(to)+amount<=_exceedwalletsize,""Exceeds the exceedWalletSize.""","balanceOf(to)+amount<=_exceedwalletsize,""Exceeds the exceedWalletSize.""",,4.109999999999999
baseParameters.teamWallets[0]!=address(0),baseParameters.teamWallets[0]!=address(0),,4.109999999999999
